// dev
using System;
using System.Linq;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Linq;
using MySql.Data.MySqlClient;
using System.Text;
using System.Collections.Generic;
using System.Collections;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Data;
using System.Security.Cryptography;
using log4net;
using log4net.Config;
using System.Threading;

[WebService(Namespace = "http://localhost/", Description = "MLKP Web Service", Name = "MLhuillier")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
// [System.Web.Script.Services.ScriptService]
public class Service : System.Web.Services.WebService
{
    private MySqlCommand command;
    private MySqlCommand commandg;
    private MySqlCommand cmd;
    private MySqlCommand custcommand;
    private MySqlCommand usercommand;
    private MySqlCommand ftscommand;
    private DBConnect dbconGlobal;
    private DBConnect dbconGlobalMobile;
    private DBConnect custconGlobal;
    private DBConnect dbconDomestic;
    private DBConnect dbconPartners;
    private DBConnect dbconWallet;
    private DBConnect dbconCCard;
    private DBConnect dbconkiosk;
    private DBConnect dbconGlobalkiosk;
    private DBConnect custconDomestic;
    private DBConnect custconKPTOGO;
    private MySqlTransaction trans = null;
    private MySqlTransaction custtrans = null;
    private MySqlTransaction ftstrans = null;
    private Int32 isUse365Global;
    private Int32 isUseKYCGlobal;
    private Int32 isUse365Domestic;
    private Int32 isUseKYCDomestic;
    private Int32 isUse365Wallet;
    private DateTime dt;
    private String dtString;
    private const String loginuser = "boswebserviceusr";
    private const String loginpass = "boyursa805";
    private String pathGlobal;
    private String pathDomestic;
    private String pathWallet;
    private String pathkiosk;
    private String pathccard;
    private const String currentVersion = "7";
    private DBConnect CMMSConnectGlobal;
    private DBConnect CMMSConnectDomestic;
    private DBConnect userconGlobal;
    private readonly int DB_DEADLOCK_RETRY_COUNT = 3;
    private String redemurl;
    private static readonly ILog kplog = LogManager.GetLogger(typeof(Service));

    public Service()
    {
        try
        {
            pathGlobal = "C:\\kpconfig\\globalConf.ini";
            pathDomestic = "C:\\kpconfig\\boskpConf.ini";
            pathWallet = "C:\\kpconfig\\MobileConfig.ini";
            pathkiosk = "C:\\kpconfig\\kioskconf.ini";
            pathccard = "C:\\kpconfig\\cashcardConf.ini";

            IniFile iniGlobal = new IniFile(pathGlobal);
            IniFile iniDomestic = new IniFile(pathDomestic);
            IniFile iniWallet = new IniFile(pathWallet);

            isUse365Global = Convert.ToInt32(iniGlobal.IniReadValue("Use 365", "use365"));
            isUseKYCGlobal = Convert.ToInt32(iniGlobal.IniReadValue("Use KYC", "usekyc"));

            isUse365Domestic = Convert.ToInt32(iniDomestic.IniReadValue("Use 365", "use365"));
            isUseKYCDomestic = Convert.ToInt32(iniDomestic.IniReadValue("Use KYC", "usekyc"));

            isUse365Wallet = Convert.ToInt32(iniWallet.IniReadValue("Use 365", "use365"));

            ConnectGlobal();
            ConnectDomestic();
            ConnectWallet();
            connectkiosk();

            log4net.Config.XmlConfigurator.Configure();
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.Message, ex);
            throw new Exception(ex.Message);
        }
    }

    // // GLOBAL METHODS HERE
    private void ConnectGlobal()
    {
        try
        {
            IniFile ini = new IniFile(pathGlobal);

            String Serv = ini.IniReadValue("DBConfig Transaction", "Server");
            String DB = ini.IniReadValue("DBConfig Transaction", "Database"); ;
            String UID = ini.IniReadValue("DBConfig Transaction", "UID"); ;
            String Password = ini.IniReadValue("DBConfig Transaction", "Password"); ;
            String pool = ini.IniReadValue("DBConfig Transaction", "Pool");
            Int32 maxcon = Convert.ToInt32(ini.IniReadValue("DBConfig Transaction", "MaxCon"));
            Int32 mincon = Convert.ToInt32(ini.IniReadValue("DBConfig Transaction", "MinCon"));
            Int32 tout = Convert.ToInt32(ini.IniReadValue("DBConfig Transaction", "Tout"));
            dbconGlobal = new DBConnect(Serv, DB, UID, Password, pool, maxcon, mincon, tout);

            String CustServ = ini.IniReadValue("DBConfig Customer", "Server");
            String CustDB = ini.IniReadValue("DBConfig Customer", "Database"); ;
            String CustUID = ini.IniReadValue("DBConfig Customer", "UID"); ;
            String CustPassword = ini.IniReadValue("DBConfig Customer", "Password"); ;
            String Custpool = ini.IniReadValue("DBConfig Customer", "Pool");
            Int32 Custmaxcon = Convert.ToInt32(ini.IniReadValue("DBConfig Customer", "MaxCon"));
            Int32 Custmincon = Convert.ToInt32(ini.IniReadValue("DBConfig Customer", "MinCon"));
            Int32 Custtout = Convert.ToInt32(ini.IniReadValue("DBConfig Customer", "Tout"));
            custconGlobal = new DBConnect(CustServ, CustDB, CustUID, CustPassword, Custpool, Custmaxcon, Custmincon, Custtout);

            String cmmsServ = ini.IniReadValue("DBConfig CMMS", "server");
            String cmmsDB = ini.IniReadValue("DBConfig CMMS", "database"); ;
            String cmmsUID = ini.IniReadValue("DBConfig CMMS", "uid"); ;
            String cmmsPassword = ini.IniReadValue("DBConfig CMMS", "password"); ;
            String cmmspool = ini.IniReadValue("DBConfig CMMS", "pool");
            Int32 cmmsmaxcon = Convert.ToInt32(ini.IniReadValue("DBConfig CMMS", "maxcon"));
            Int32 cmmsmincon = Convert.ToInt32(ini.IniReadValue("DBConfig CMMS", "mincon"));
            Int32 cmmstout = Convert.ToInt32(ini.IniReadValue("DBConfig CMMS", "tout"));
            CMMSConnectGlobal = new DBConnect(cmmsServ, cmmsDB, cmmsUID, cmmsPassword, cmmspool, cmmsmaxcon, cmmsmincon, cmmstout);

            String userServ = ini.IniReadValue("DBConfig User", "server");
            String userDB = ini.IniReadValue("DBConfig User", "database"); ;
            String userUID = ini.IniReadValue("DBConfig User", "uid"); ;
            String userPassword = ini.IniReadValue("DBConfig User", "password"); ;
            String userpool = ini.IniReadValue("DBConfig User", "pool");
            Int32 usermaxcon = Convert.ToInt32(ini.IniReadValue("DBConfig User", "maxcon"));
            Int32 usermincon = Convert.ToInt32(ini.IniReadValue("DBConfig User", "mincon"));
            Int32 usertout = Convert.ToInt32(ini.IniReadValue("DBConfig User", "tout"));
            userconGlobal = new DBConnect(userServ, userDB, userUID, userPassword, userpool, usermaxcon, usermincon, usertout);
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }

    public SendoutResponse checkifallowSO(String branchcode, Int32 zonecode, String sendername, String receivername, String currency, Decimal principal, Decimal charge, String operatorid, String kptnno)
    {
        String msg = "";
        dt = getServerDateDomestic(false);
        using (MySqlConnection checking = dbconDomestic.getConnection())
        {
            checking.Open();
            try
            {
                using (command = checking.CreateCommand())
                {
                    Boolean is24hours = false;
                    Boolean allowbeyondoffhour = false;
                    String timefrm;
                    String timeto;

                    string getmessage = "SELECT message FROM kpforms.txtmessages WHERE purpose=3 AND `type`='txtso';";
                    command.CommandTimeout = 0;
                    command.Parameters.Clear();
                    command.CommandText = getmessage;
                    MySqlDataReader readmsg = command.ExecuteReader();
                    if (readmsg.HasRows)
                    {
                        readmsg.Read();
                        msg = readmsg["message"].ToString();
                        readmsg.Close();
                    }
                    readmsg.Close();

                    string checksched = "SELECT timefrom,timeto,is24hours,allowBeyondOffHour FROM kpusers.branches WHERE branchcode=@bcode AND zonecode=@zcode;";
                    command.CommandTimeout = 0;
                    command.Parameters.Clear();
                    command.CommandText = checksched;
                    command.Parameters.AddWithValue("bcode", branchcode);
                    command.Parameters.AddWithValue("zcode", zonecode);
                    MySqlDataReader readif24hrs = command.ExecuteReader();
                    if (readif24hrs.HasRows)
                    {
                        readif24hrs.Read();
                        is24hours = Convert.ToBoolean(readif24hrs["is24hours"]);
                        allowbeyondoffhour = Convert.ToBoolean(readif24hrs["allowBeyondOffHour"]);
                        timefrm = Convert.ToString(readif24hrs["timefrom"]);
                        timeto = Convert.ToString(readif24hrs["timeto"]);
                        readif24hrs.Close();

                        if (!is24hours)
                        {
                            if (timefrm == null || timefrm == "")
                            {
                                checking.Close();
                                dbconDomestic.CloseConnection();
                                return new SendoutResponse { respcode = 3, message = "set office hours." };
                            }

                            String checktime = "SELECT IF(timefrom>timeto, " +
                                                "(IF(NOW() BETWEEN ADDTIME(SUBTIME(NOW(),TIME(NOW())),timefrom) AND " +
                                                "ADDTIME(SUBTIME(DATE_ADD(NOW(),INTERVAL 1 DAY),TIME(DATE_ADD(NOW(),INTERVAL 1 DAY))),timeto), 1, 0)), " +
                                                "(IF(TIME(NOW()) BETWEEN timefrom AND timeto, 1, 0))) AS isbetween " +
                                                 "FROM kpusers.branches WHERE branchcode=@bcode AND zonecode=@zcode;";
                            command.CommandTimeout = 0;
                            command.Parameters.Clear();
                            command.CommandText = checktime;
                            command.Parameters.AddWithValue("bcode", branchcode);
                            command.Parameters.AddWithValue("zcode", zonecode);
                            command.Parameters.AddWithValue("currenttime", dt.ToString("HH:mm:ss"));
                            MySqlDataReader readifallow = command.ExecuteReader();
                            readifallow.Read();

                            if (Convert.ToInt32(readifallow["isbetween"]) == 0)
                            {
                                readifallow.Close();
                                if (!allowbeyondoffhour)
                                {
                                    readifallow.Close();
                                    String insertlogs = "INSERT INTO kpadminlogs.beyondhourstransactionlogs (KPTN, ReceiverName,SenderName,currency," +
                                    "principal,charge,SOBCode,SOZcode,txndate,OperatorID)VALUES " +
                                    "(@KPTN, @ReceiverName,@SenderName,@currency,@principal,@charge," +
                                    "@SOBCode,@SOZcode,now(),@OperatorID);";
                                    command.Parameters.Clear();
                                    command.CommandText = insertlogs;
                                    command.Parameters.AddWithValue("KPTN", kptnno);
                                    command.Parameters.AddWithValue("ReceiverName", receivername);
                                    command.Parameters.AddWithValue("SenderName", sendername);
                                    command.Parameters.AddWithValue("currency", currency);
                                    command.Parameters.AddWithValue("principal", principal);
                                    command.Parameters.AddWithValue("charge", charge);
                                    command.Parameters.AddWithValue("SOBCode", branchcode);
                                    command.Parameters.AddWithValue("SOZcode", zonecode);
                                    command.Parameters.AddWithValue("OperatorID", operatorid);
                                    command.ExecuteNonQuery();

                                    checking.Close();
                                    dbconDomestic.CloseConnection();
                                    kplog.Info("Successfully Inserted in kpadminlogs.beyondhourstransactionlogs");
                                    return new SendoutResponse { respcode = 0, message = msg };
                                }
                            }
                            readifallow.Close();
                        }
                    }
                    readif24hrs.Close();

                    checking.Close();
                    dbconDomestic.CloseConnection();
                    return new SendoutResponse { respcode = 1 };
                }
            }
            catch (Exception ex)
            {
                checking.Close();
                dbconDomestic.CloseConnection();
                kplog.Fatal(ex.ToString());
                return new SendoutResponse { respcode = 0, ErrorDetail = ex.ToString() };
            }
        }
    }

    public PayoutResponse checkifallowPO(String branchcode, Int32 zonecode, String kptn, String receivername, String sendername, String currency, Decimal principal, String operatorid, Boolean isglobal)
    {
        String msg = "";
        dt = getServerDateDomestic(false);
        using (MySqlConnection checking = dbconDomestic.getConnection())
        {
            checking.Open();
            try
            {
                using (command = checking.CreateCommand())
                {
                    Boolean is24hours = false;
                    Boolean allowbeyondoffhour = false;
                    String timefrm;
                    String timeto;

                    string getmessage = "SELECT message FROM kpforms.txtmessages WHERE purpose=3 AND `type`='txtpo';";
                    command.CommandTimeout = 0;
                    command.Parameters.Clear();
                    command.CommandText = getmessage;
                    MySqlDataReader readmsg = command.ExecuteReader();
                    if (readmsg.HasRows)
                    {
                        readmsg.Read();
                        msg = readmsg["message"].ToString();
                        readmsg.Close();
                    }
                    readmsg.Close();

                    string checksched = "SELECT  timefrom,timeto,is24hours,allowBeyondOffHour FROM kpusers.branches WHERE branchcode=@bcode AND zonecode=@zcode;";
                    command.CommandTimeout = 0;
                    command.Parameters.Clear();
                    command.CommandText = checksched;
                    command.Parameters.AddWithValue("bcode", branchcode);
                    command.Parameters.AddWithValue("zcode", zonecode);
                    MySqlDataReader readif24hrs = command.ExecuteReader();
                    if (readif24hrs.HasRows)
                    {
                        readif24hrs.Read();
                        is24hours = Convert.ToBoolean(readif24hrs["is24hours"]);
                        allowbeyondoffhour = Convert.ToBoolean(readif24hrs["allowBeyondOffHour"]);
                        timefrm = Convert.ToString(readif24hrs["timefrom"]);
                        timeto = Convert.ToString(readif24hrs["timeto"]);
                        readif24hrs.Close();

                        if (!is24hours)
                        {
                            if (timefrm == null || timefrm == "")
                            {
                                checking.Close();
                                dbconDomestic.CloseConnection();
                                return new PayoutResponse { respcode = 3, message = "set office hours." };
                            }

                            String checktime = "SELECT IF(timefrom>timeto, " +
                                                "(IF(NOW() BETWEEN ADDTIME(SUBTIME(NOW(),TIME(NOW())),timefrom) AND " +
                                                "ADDTIME(SUBTIME(DATE_ADD(NOW(),INTERVAL 1 DAY),TIME(DATE_ADD(NOW(),INTERVAL 1 DAY))),timeto), 1, 0)), " +
                                                "(IF(TIME(NOW()) BETWEEN timefrom AND timeto, 1, 0))) AS isbetween " +
                                                 "FROM kpusers.branches WHERE branchcode=@bcode AND zonecode=@zcode;";
                            command.CommandTimeout = 0;
                            command.Parameters.Clear();
                            command.CommandText = checktime;
                            command.Parameters.AddWithValue("bcode", branchcode);
                            command.Parameters.AddWithValue("zcode", zonecode);
                            command.Parameters.AddWithValue("currenttime", dt.ToString("HH:mm:ss"));
                            MySqlDataReader readifallow = command.ExecuteReader();
                            readifallow.Read();
                            if (Convert.ToInt32(readifallow["isbetween"]) == 0)
                            {
                                readifallow.Close();
                                if (!allowbeyondoffhour)
                                {
                                    readifallow.Close();
                                    String checkstatus = "SELECT `status`,statusdetails FROM kpadminlogs.blockedtxnbeyondoffhours WHERE kptn=@kptn";
                                    command.Parameters.Clear();
                                    command.CommandText = checkstatus;
                                    command.Parameters.AddWithValue("kptn", kptn);
                                    MySqlDataReader rdstatus = command.ExecuteReader();
                                    if (rdstatus.HasRows)
                                    {
                                        rdstatus.Read();
                                        Boolean status = Convert.ToBoolean(rdstatus["status"]);
                                        String statusdetails = rdstatus["statusdetails"].ToString();
                                        rdstatus.Close();

                                        if (status)
                                        {
                                            checking.Close();
                                            dbconDomestic.CloseConnection();
                                            return new PayoutResponse { respcode = 4, message = statusdetails };
                                        }
                                        else
                                        {
                                            checking.Close();
                                            dbconDomestic.CloseConnection();
                                            return new PayoutResponse { respcode = 3, message = msg };
                                        }
                                    }
                                    else
                                    {
                                        rdstatus.Close();
                                        String sobcode = string.Empty;
                                        Int32 sozcode = 0;
                                        String sooperatorid = string.Empty;
                                        String sotxndate = string.Empty;
                                        DateTime dtSO;
                                        Decimal charge = 0;
                                        if (isglobal)
                                        {
                                            checking.Close();
                                            dbconDomestic.CloseConnection();
                                            using (MySqlConnection conn = dbconGlobal.getConnection())
                                            {
                                                conn.Open();
                                                MySqlCommand cmd = conn.CreateCommand();
                                                String getSOinfo = "SELECT isremote,branchcode,zonecode,operatorid,remotebranch,remotezonecode,remoteoperatorid,transdate,charge FROM " + decodeKPTNGlobal(0, kptn) + " WHERE kptnno=@KPTN ORDER BY transdate DESC;";
                                                cmd.Parameters.Clear();
                                                cmd.CommandText = getSOinfo;
                                                cmd.Parameters.AddWithValue("KPTN", kptn);
                                                MySqlDataReader readSO = cmd.ExecuteReader();
                                                if (readSO.Read())
                                                {
                                                    sobcode = readSO["branchcode"].ToString();
                                                    sozcode = Convert.ToInt32(readSO["zonecode"]);
                                                    sooperatorid = readSO["operatorid"].ToString();
                                                    sotxndate = readSO["transdate"].ToString();
                                                    charge = Convert.ToDecimal(readSO["charge"]);
                                                }
                                                readSO.Close();
                                                dtSO = Convert.ToDateTime(sotxndate);
                                                conn.Close();
                                                dbconGlobal.CloseConnection();
                                            }
                                        }
                                        else
                                        {
                                            String getSOinfo = "SELECT isremote,branchcode,zonecode,operatorid,remotebranch,remotezonecode,remoteoperatorid,transdate,charge FROM " + decodeKPTNDomestic(0, kptn) + " WHERE kptnno=@KPTN ORDER BY transdate DESC;";
                                            command.Parameters.Clear();
                                            command.CommandText = getSOinfo;
                                            command.Parameters.AddWithValue("KPTN", kptn);
                                            MySqlDataReader readSO = command.ExecuteReader();
                                            if (readSO.Read())
                                            {
                                                sobcode = readSO["branchcode"].ToString();
                                                sozcode = Convert.ToInt32(readSO["zonecode"]);
                                                sooperatorid = readSO["operatorid"].ToString();
                                                sotxndate = readSO["transdate"].ToString();
                                                charge = Convert.ToDecimal(readSO["charge"]);
                                            }
                                            readSO.Close();
                                            dtSO = Convert.ToDateTime(sotxndate);
                                            //checking.Close();
                                            //dbconDomestic.CloseConnection();
                                        }

                                        //MySqlConnection domconn = dbconDomestic.getConnection();
                                        //domconn.Open();
                                        //MySqlCommand domcmd = domconn.CreateCommand();
                                        String insertlogs = "INSERT INTO kpadminlogs.blockedtxnbeyondoffhours (KPTN, ReceiverName,SenderName,currency," +
                                                "principal,charge,SOBcode,SOZcode,SOtxndate,SOOperator,Assist_POBcode,Assist_POZCode,Assist_POoperator,Assist_POtxndate) " +
                                                "VALUES (@KPTN, @ReceiverName,@SenderName,@currency," +
                                                "@principal,@charge,@SOBcode,@SOZcode,@SOtxndate,@SOOperator,@Assist_POBcode,@Assist_POZCode,@Assist_POoperator,now())";

                                        command.Parameters.Clear();
                                        command.CommandText = insertlogs;
                                        command.CommandType = CommandType.Text;
                                        command.Parameters.AddWithValue("KPTN", kptn);
                                        command.Parameters.AddWithValue("ReceiverName", receivername);
                                        command.Parameters.AddWithValue("SenderName", sendername);
                                        command.Parameters.AddWithValue("currency", currency);
                                        command.Parameters.AddWithValue("principal", principal);
                                        command.Parameters.AddWithValue("charge", charge);
                                        command.Parameters.AddWithValue("SOBcode", sobcode);
                                        command.Parameters.AddWithValue("SOZcode", sozcode);
                                        command.Parameters.AddWithValue("SOtxndate", dtSO);
                                        command.Parameters.AddWithValue("SOOperator", sooperatorid);
                                        command.Parameters.AddWithValue("Assist_POBcode", branchcode);
                                        command.Parameters.AddWithValue("Assist_POZCode", zonecode);
                                        command.Parameters.AddWithValue("Assist_POoperator", operatorid);
                                        int x = command.ExecuteNonQuery();

                                        checking.Close();
                                        dbconDomestic.CloseConnection();
                                        kplog.Info(kptn + " - Successfully Inserted in kpadminlogs.blockedtxnbeyondoffhours | " + x);
                                        return new PayoutResponse { respcode = 3, message = msg };
                                    }
                                }
                            }
                            readifallow.Close();
                        }
                    }
                    readif24hrs.Close();

                    checking.Close();
                    dbconDomestic.CloseConnection();
                    return new PayoutResponse { respcode = 1 };
                }
            }
            catch (Exception ex)
            {
                checking.Close();
                dbconDomestic.CloseConnection();
                kplog.Fatal(kptn + " - " + ex.ToString());
                return new PayoutResponse { respcode = 0, ErrorDetail = ex.ToString() };
            }
        }
    }
 
    [WebMethod]
    public ChargeResponse getForexRates(String Username, String Password)
    {
        if (!authenticate(Username, Password))
        {
            return new ChargeResponse { respcode = 7, message = getRespMessage(7) };
        }
        try
        {
            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                conn.Open();
                Double forex = 0;
                try
                {
                    using (command = conn.CreateCommand())
                    {
                        String qrygetrate = "Select rate_USD from currency.currates";
                        command.CommandText = qrygetrate;
                        command.Parameters.Clear();
                        MySqlDataReader rdrgetrate = command.ExecuteReader();
                        if (rdrgetrate.Read())
                        {
                            forex = Convert.ToDouble(rdrgetrate["rate_USD"].ToString());
                        }
                        else
                        {
                            rdrgetrate.Close();
                            conn.Close();
                            return new ChargeResponse { respcode = 0, message = "No Forex Rate Found" };
                        }

                        rdrgetrate.Close();
                        conn.Close();
                        return new ChargeResponse { respcode = 0, message = getRespMessage(1), forexrate = forex };
                    }
                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(ex.ToString());
                    conn.Close();
                    throw new Exception(ex.ToString());
                }

            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }

    [WebMethod]
    public serviceRates.getRateSettingResponse getRateSettings(String Username, String Password, String branchid, String currency)
    {

        serviceRates.getRateSetting settings = new serviceRates.getRateSetting();
        serviceRates.getRateSettingResponse response = new serviceRates.getRateSettingResponse();
        serviceRates.ForexWSRemoteClient client = new serviceRates.ForexWSRemoteClient();

        settings.branchid = branchid;
        settings.currency = currency;

        response = client.getRateSetting(settings);

        return response;

    }


    [WebMethod]
    public Boolean checkifglobaluser(String userlogin, String userpassword, int zonecode)
    {
        using (MySqlConnection conn = userconGlobal.getConnection())
        {
            try
            {
                conn.Open();
                using (usercommand = conn.CreateCommand())
                {
                    string checkquery = "SELECT s.userlogin,b.resourceid FROM branchusers b INNER JOIN sysuseraccounts s ON s.resourceid=b.resourceid WHERE s.userlogin=@userlogin AND s.userpassword=@userpass AND s.zonecode=@zone";
                    usercommand.CommandText = checkquery;

                    usercommand.Parameters.AddWithValue("userlogin", userlogin);
                    usercommand.Parameters.AddWithValue("userpass", userpassword);
                    usercommand.Parameters.AddWithValue("zone", zonecode);

                    MySqlDataReader count = usercommand.ExecuteReader();
                    if (count.HasRows)
                    {
                        conn.Close();
                        userconGlobal.CloseConnection();
                        return true;
                    }
                    conn.Close();
                    userconGlobal.CloseConnection();
                    return false;
                }
            }
            catch (Exception ex)
            {
                conn.Close();
                userconGlobal.CloseConnection();
                kplog.Fatal(ex.ToString());
                return false;
            }
        }
    }

    private String decodeKPTNGlobal(int type, String kptn)
    {
        try
        {
            if (type == 0)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(6, 2));
                //throw new Exception(y.ToString());
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                return "kpglobal.sendout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(6, 2);
            }
            else if (type == 1)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(6, 2));
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                else if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                else
                {
                    return "kpglobal.payout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(6, 2);
                }
            }
            else
            {
                throw new Exception("invalid type");
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return "4";
            //throw new Exception("4");
        }
    }

    private String decodeKPTNGlobalMobile(int type, String kptn)
    {
        try
        {
            if (type == 0)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(6, 2));
                //throw new Exception(y.ToString());
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                else if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                else
                {
                    return "Mobexglobal.sendout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(6, 2);
                }

            }
            else if (type == 1)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(6, 2));
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                else if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                else
                {
                    return "Mobexglobal.payout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(6, 2);
                }
            }
            else
            {
                throw new Exception("invalid type");
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return "4";
            //throw new Exception("4");
        }
    }

    private String generateTableNameGlobal(Int32 type, String TransDate)
    {
        //DateTime dt = getServerDate(false);

        if (TransDate == null)
        {
            if (type == 0)
            {
                return (isUse365Global == 0) ? "kpglobal.sendout" : "kpglobal.sendout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Global == 0) ? "kpglobal.payout" : "kpglobal.payout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else if (type == 2)
            {
                return (isUse365Global == 0) ? "kpglobal.tempkptn" : "kpglobal.tempkptn";
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
        else
        {
            DateTime TransDatetoDate = Convert.ToDateTime(TransDate);
            if (type == 0)
            {
                return (isUse365Global == 0) ? "kpglobal.sendout" : "kpglobal.sendout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Global == 0) ? "kpglobal.payout" : "kpglobal.payout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else if (type == 2)
            {
                return (isUse365Global == 0) ? "kpglobal.tempkptn" : "kpglobal.tempkptn";
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
    }

    private String generateTableNameGlobalKiosk(Int32 type, String TransDate)
    {
        //DateTime dt = getServerDate(false);

        if (TransDate == null)
        {
            if (type == 0)
            {
                return (isUse365Global == 0) ? "kpkioskglobal.sendout" : "kpkioskglobal.sendout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Global == 0) ? "kpkioskglobal.payout" : "kpkioskglobal.payout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else if (type == 2)
            {
                return (isUse365Global == 0) ? "kpkioskglobal.tempkptn" : "kpkioskglobal.tempkptn";
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
        else
        {
            DateTime TransDatetoDate = Convert.ToDateTime(TransDate);
            if (type == 0)
            {
                return (isUse365Global == 0) ? "kpkioskglobal.sendout" : "kpkioskglobal.sendout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Global == 0) ? "kpkioskglobal.payout" : "kpkioskglobal.payout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else if (type == 2)
            {
                return (isUse365Global == 0) ? "kpkioskglobal.tempkptn" : "kpkioskglobal.tempkptn";
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
    }

    private String generateTableNameGlobalMobile(Int32 type, String TransDate)
    {
        //DateTime dt = getServerDate(false);

        if (TransDate == null)
        {
            if (type == 0)
            {
                return (isUse365Global == 0) ? "Mobexglobal.sendout" : "Mobexglobal.sendout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Global == 0) ? "Mobexglobal.payout" : "Mobexglobal.payout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else if (type == 2)
            {
                return (isUse365Global == 0) ? "Mobexglobal.tempkptn" : "Mobexglobal.tempkptn";
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
        else
        {
            DateTime TransDatetoDate = Convert.ToDateTime(TransDate);
            if (type == 0)
            {
                return (isUse365Global == 0) ? "Mobexglobal.sendout" : "Mobexglobal.sendout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Global == 0) ? "Mobexglobal.payout" : "Mobexglobal.payout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else if (type == 2)
            {
                return (isUse365Global == 0) ? "Mobexglobal.tempkptn" : "Mobexglobal.tempkptn";
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
    }

    [WebMethod]
    public AddKYCResponse addKYCGlobal(String Username, String Password, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderBirthdate, String SenderBranchID, String IDType, String IDNo, String ExpiryDate, String PhoneNo, String MobileNo, String Email, String CreatedBy, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new AddKYCResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new AddKYCResponse { respcode = 10, message = getRespMessage(10) };
        //}
        //Waiting for further instructions.
        //if (verifyCustomer(SenderFName, SenderLName, SenderMName, SenderBirthdate)) {

        //    return new AddKYCResponse { respcode = 6, message = getRespMessage(6) };
        //}
        try
        {
            //dt = getServerDateGlobal(false);
            dt = getServerDateDomesticCustomer();
        }
        catch (Exception ex)
        {
            kplog.Error("Exception catch");
            return new AddKYCResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), MLCardNo = null };
        }
        using (MySqlConnection custconn = custconDomestic.getConnection())
        {
            try
            {
                if (SenderProvinceCity.Trim() == string.Empty)
                    SenderProvinceCity = "";
                custconn.Open();


                //using (command = custconn.CreateCommand()) {
                //    dt = getServerDate(true);
                //}
                using (custcommand = custconn.CreateCommand())
                {
                    string checkifexist = "select custid from kpcustomers.customers where firstname=@firstname and lastname=@lastname and middlename=@middlename and date(birthdate) = date(@senderbdate)";
                    custcommand.CommandText = checkifexist;
                    custcommand.Parameters.AddWithValue("firstname", SenderFName);
                    custcommand.Parameters.AddWithValue("lastname", SenderLName);
                    custcommand.Parameters.AddWithValue("middlename", SenderMName);
                    custcommand.Parameters.AddWithValue("senderbdate", SenderBirthdate);
                    MySqlDataReader readerchecker = custcommand.ExecuteReader();
                    if (readerchecker.HasRows)
                    {
                        readerchecker.Close();
                        custconn.Close();
                        custconDomestic.CloseConnection();
                        return new AddKYCResponse { respcode = 0, message = "Customer name already exist!" };
                    }
                    readerchecker.Close();

                    //string senderid = generateCustIDGlobal(custcommand);
                    string senderid = generateCustID(custcommand, dt);

                    string checkduplicate = "select custid from kpcustomers.customers where custid=@senderid";
                    custcommand.CommandText = checkduplicate;
                    custcommand.Parameters.Clear();
                    custcommand.Parameters.AddWithValue("senderid", senderid);

                    MySqlDataReader readduplicate = custcommand.ExecuteReader();
                    if (readduplicate.Read())
                    {
                        readduplicate.Close();

                        //string getmax="select substring(custid,5,length(custid))  as max101 from kpcustomersglobal.customers order by DTCreated desc limit 1";
                        //string getmax = "select max(substring(custid,5,length(custid))) as max101 from  kpcustomersglobal.customers";
                        // custcommand.CommandText = getmax;
                        //MySqlDataReader readmax = custcommand.ExecuteReader();
                        // readmax.Read();
                        //Int64 max101 = Convert.ToInt64(readmax["max101"].ToString());
                        //readmax.Close();

                        string updateseries = "update kpforms.customerseries set series = (select max(substring(custid,5,length(custid))) as max101 from  kpcustomers.customers where length(custid)=14) + 1";
                        custcommand.CommandText = updateseries;
                        //custcommand.Parameters.AddWithValue("max101", max101 + 1);
                        int y = custcommand.ExecuteNonQuery();
                        custconn.Close();
                        custconDomestic.CloseConnection();
                        return new AddKYCResponse { respcode = 0, message = "Connection error occured! Please try again. Thank you!" };
                    }
                    readduplicate.Close();

                    custtrans = custconn.BeginTransaction(IsolationLevel.ReadCommitted);
                    custcommand.Transaction = custtrans;

                    if (!SenderMLCardNO.Equals(string.Empty))
                    {
                        //addKYC_insert_cardno proc
                        String insertMLCard = "INSERT INTO kpcustomers.customercard (CardNo) VALUES (@CardNo)";
                        custcommand.CommandText = insertMLCard;
                        custcommand.Parameters.AddWithValue("CardNo", SenderMLCardNO);
                        //custcommand.Parameters.AddWithValue("CustID", senderid);
                        custcommand.ExecuteNonQuery();
                    }

                    //addKYC_insert_customers proc
                    String insertCustomer = "INSERT INTO kpcustomers.customers (CustID, FirstName, LastName, MiddleName, Street, ProvinceCity, Country, Gender, Birthdate, IDType, IDNo, DTCreated, ExpiryDate, CreatedBy, PhoneNo, Mobile, Email, cardno) VALUES (@SCustID, @SFirstName, @SLastName, @SMiddleName, @SStreet, @SProvinceCity, @SCountry, @SGender, @SBirthdate, @IDType, @IDNo, @DTCreated, @ExpiryDate,@CreatedBy, @PhoneNo, @MobileNo, @Email, @mlcardno);";
                    custcommand.CommandText = insertCustomer;

                    custcommand.Parameters.AddWithValue("SCustID", senderid);
                    //custcommand.Parameters.AddWithValue("SMLCardNo", SenderMLCardNO);
                    custcommand.Parameters.AddWithValue("SFirstName", SenderFName);
                    custcommand.Parameters.AddWithValue("SLastName", SenderLName);
                    custcommand.Parameters.AddWithValue("SMiddleName", SenderMName);
                    custcommand.Parameters.AddWithValue("SStreet", SenderStreet);
                    custcommand.Parameters.AddWithValue("SProvinceCity", SenderProvinceCity);
                    custcommand.Parameters.AddWithValue("SCountry", SenderCountry);
                    custcommand.Parameters.AddWithValue("SGender", SenderGender);
                    //custcommand.Parameters.AddWithValue("SContactNo", SenderContactNo);
                    custcommand.Parameters.AddWithValue("SBirthdate", SenderBirthdate);
                    //custcommand.Parameters.AddWithValue("SBranchID", SenderBranchID);
                    custcommand.Parameters.AddWithValue("DTCreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                    custcommand.Parameters.AddWithValue("IDType", IDType);
                    custcommand.Parameters.AddWithValue("IDNo", IDNo);
                    custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
                    custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
                    custcommand.Parameters.AddWithValue("MobileNo", MobileNo);
                    custcommand.Parameters.AddWithValue("Email", Email);
                    custcommand.Parameters.AddWithValue("CreatedBy", CreatedBy);
                    custcommand.Parameters.AddWithValue("mlcardno", SenderMLCardNO);
                    custcommand.ExecuteNonQuery();

                    String updatesender = "update kpforms.customerseries set series = series + 1";
                    custcommand.CommandText = updatesender;
                    custcommand.ExecuteNonQuery();

                    custtrans.Commit();
                    custconn.Close();
                    custconDomestic.CloseConnection();
                    return new AddKYCResponse { respcode = 1, message = getRespMessage(1), MLCardNo = senderid };

                }
            }
            catch (Exception mex)
            {
                kplog.Fatal(mex.ToString());
                custtrans.Rollback();
                custconn.Close();
                int respcode = 0;
                if (mex.Message.StartsWith("Duplicate"))
                {
                    respcode = 6;
                    kplog.Fatal(getRespMessage(respcode), mex);
                }
                custconDomestic.CloseConnection();
                return new AddKYCResponse { respcode = respcode, message = getRespMessage(respcode), ErrorDetail = mex.ToString() };
            }
        }

    }

    //[WebMethod]
    //public ChargeResponse calculateChargeGlobal(String Username, String Password, Double amount, String bcode, String zcode, Double version, String stationcode)
    //{
    //    if (!authenticate(Username, Password))
    //    {
    //        return new ChargeResponse { respcode = 7, message = getRespMessage(7) };
    //    }
    //    //if (!compareVersions(getVersion(stationcode), version))
    //    //{
    //    //    return new ChargeResponse { respcode = 10, message = getRespMessage(10) };
    //    //}
    //    using (MySqlConnection conn = dbconGlobal.getConnection())
    //    {
    //        try
    //        {
    //            using (command = conn.CreateCommand())
    //            {

    //                DateTime NullDate = DateTime.MinValue;

    //                Decimal dec = 0;
    //                conn.Open();
    //                trans = conn.BeginTransaction();

    //                try
    //                {
    //                    String query = "SELECT nextID,currID,nDateEffectivity,cDateEffectivity,cEffective,nextID, NOW() as currentDate FROM kpformsglobal.headercharges WHERE cEffective = 1;";

    //                    command.CommandText = query;
    //                    MySqlDataReader Reader = command.ExecuteReader();

    //                    if (Reader.Read())
    //                    {
    //                        Int32 nextID = Convert.ToInt32(Reader["nextID"]);
    //                        Int32 type = Convert.ToInt32(Reader["currID"]);
    //                        //String ndate = (Reader["nDateEffectivity"].ToString().StartsWith("0")) ? null : Convert.ToDateTime(Reader["nDateEffectivity"]).ToString();
    //                        DateTime nDateEffectivity = (Reader["nDateEffectivity"].ToString().StartsWith("0")) ? NullDate : Convert.ToDateTime(Reader["nDateEffectivity"]);
    //                        DateTime currentDate = Convert.ToDateTime(Reader["currentDate"]);
    //                        //throw new Exception(nDateEffectivity.ToString());
    //                        if (nextID == 0)
    //                        {
    //                            //calculatecharge_search(IN amount DECIMAL(10,2), IN `type` VARCHAR(15))
    //                            Reader.Close();
    //                            String queryRates = "SELECT ChargeValue AS charge FROM kpformsglobal.charges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
    //                            command.CommandText = queryRates;
    //                            command.Parameters.AddWithValue("amount", amount);
    //                            command.Parameters.AddWithValue("type", type);

    //                            MySqlDataReader ReaderRates = command.ExecuteReader();
    //                            if (ReaderRates.Read())
    //                            {
    //                                dec = (Decimal)ReaderRates["charge"];
    //                                ReaderRates.Close();
    //                            }
    //                        }
    //                        else
    //                        {
    //                            Reader.Close();

    //                            int result = DateTime.Compare(nDateEffectivity, currentDate);

    //                            if (result < 0)
    //                            {

    //                                //ReaderNextRates.Close();
    //                                //UPDATE ANG TABLE EFFECTIVE
    //                                // 0 = pending, 1 = current chage, 2 = unused

    //                                //try
    //                                //{

    //                                command.Transaction = trans;
    //                                command.Parameters.Clear();
    //                                String updateRates = "update kpformsglobal.headercharges SET  cEffective = 2 where cEffective = 1";
    //                                command.CommandText = updateRates;
    //                                command.ExecuteNonQuery();

    //                                command.Parameters.Clear();
    //                                String updateRates1 = "update kpformsglobal.headercharges SET cEffective = 1 where currID = @curr";
    //                                command.CommandText = updateRates1;
    //                                command.Parameters.AddWithValue("curr", nextID);
    //                                command.ExecuteNonQuery();

    //                                command.Parameters.Clear();
    //                                String insertLog = "insert into kpadminlogsglobal.kpratesupdatelogs (ModifiedRatesID, NewRatesID, DateModified, Modifier) values (@ModifiedRatesID, @NewRatesID, NOW(), @Modifier);";
    //                                command.CommandText = insertLog;
    //                                command.Parameters.AddWithValue("ModifiedRatesID", nextID - 1);
    //                                command.Parameters.AddWithValue("NewRatesID", nextID);
    //                                command.Parameters.AddWithValue("Modifier", "boskpws");
    //                                command.ExecuteNonQuery();
    //                                trans.Commit();
    //                                //}catch(MySqlException ex){
    //                                //    //trans.Rollback();
    //                                //    Reader.Close();

    //                                //    throw new Exception(ex.ToString());
    //                                //}

    //                                command.Parameters.Clear();
    //                                String queryRates = "SELECT ChargeValue AS charge FROM kpformsglobal.charges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
    //                                command.CommandText = queryRates;
    //                                command.Parameters.AddWithValue("amount", amount);
    //                                command.Parameters.AddWithValue("type", nextID);

    //                                MySqlDataReader ReaderRates = command.ExecuteReader();
    //                                if (ReaderRates.Read())
    //                                {
    //                                    //ReaderRates.Read();
    //                                    dec = (Decimal)ReaderRates["charge"];
    //                                    ReaderRates.Close();
    //                                }
    //                            }
    //                            else
    //                            {
    //                                //ReaderNextRates.Close();


    //                                command.Parameters.Clear();
    //                                String queryRates = "SELECT ChargeValue AS charge FROM kpformsglobal.charges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
    //                                command.CommandText = queryRates;
    //                                command.Parameters.AddWithValue("amount", amount);
    //                                command.Parameters.AddWithValue("type", type);

    //                                MySqlDataReader ReaderRates = command.ExecuteReader();
    //                                if (ReaderRates.Read())
    //                                {
    //                                    //ReaderRates.Read();
    //                                    dec = (Decimal)ReaderRates["charge"];
    //                                    ReaderRates.Close();
    //                                }
    //                            }
    //                        }


    //                    }
    //                    //trans.Commit();
    //                    conn.Close();
    //                    dbconGlobal.CloseConnection();
    //                    return new ChargeResponse { respcode = 1, message = getRespMessage(1), charge = dec };


    //                }
    //                catch (MySqlException mex)
    //                {
    //                    kplog.Fatal(mex.ToString());
    //                    trans.Rollback();
    //                    conn.Close();
    //                    dbconGlobal.CloseConnection();
    //                    return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = mex.ToString() };
    //                }
    //            }

    //        }
    //        catch (Exception ex)
    //        {
    //            kplog.Fatal(ex.ToString());
    //            trans.Rollback();
    //            conn.Close();
    //            dbconGlobal.CloseConnection();
    //            return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
    //        }
    //    }
    //}

    [WebMethod]
    public ChargeResponse calculateChargeGlobal(String Username, String Password, Double amount, String bcode, String zcode, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new ChargeResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ChargeResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconDomestic.getConnection())
        {
            try
            {
                using (command = conn.CreateCommand())
                {
                    Decimal dec = 0;
                    conn.Open();
                    trans = conn.BeginTransaction();

                    try
                    {
                        String query = "SELECT currID FROM kpforms.globalheadercharges WHERE iseffective = 1 order by effectivedate desc limit 1;";

                        command.CommandText = query;
                        MySqlDataReader Reader = command.ExecuteReader();

                        if (Reader.HasRows)
                        {
                            Reader.Read();
                            Int32 currid = Convert.ToInt32(Reader["currID"]);
                            Reader.Close();

                            String queryRates = "SELECT ChargeValue AS charge FROM kpforms.globalcharges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                            command.CommandText = queryRates;
                            command.Parameters.AddWithValue("amount", amount);
                            command.Parameters.AddWithValue("type", currid);

                            MySqlDataReader ReaderRates = command.ExecuteReader();
                            if (ReaderRates.HasRows)
                            {
                                ReaderRates.Read();
                                dec = (Decimal)ReaderRates["charge"];
                                ReaderRates.Close();
                            }
                            ReaderRates.Close();
                        }
                        Reader.Close();
                        //trans.Commit();
                        conn.Close();
                        dbconDomestic.CloseConnection();
                        return new ChargeResponse { respcode = 1, message = getRespMessage(1), charge = dec };


                    }
                    catch (MySqlException mex)
                    {
                        kplog.Fatal(mex.ToString());
                        trans.Rollback();
                        conn.Close();
                        dbconDomestic.CloseConnection();
                        return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = mex.ToString() };
                    }
                }

            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                trans.Rollback();
                conn.Close();
                dbconDomestic.CloseConnection();
                return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
    }

    [WebMethod]
    public ChargeResponse calculateChargePerBranchGlobal(String Username, String Password, Double amount, String bcode, String zcode, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new ChargeResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ChargeResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconGlobal.getConnection())
        {
            try
            {
                using (command = conn.CreateCommand())
                {

                    DateTime NullDate = DateTime.MinValue;

                    Decimal dec = 0;
                    conn.Open();
                    trans = conn.BeginTransaction();

                    try
                    {
                        String query = "SELECT nextID,currID,nDateEffectivity,cDateEffectivity,cEffective,nextID, NOW() as currentDate FROM kpformsglobal.ratesperbranchheader WHERE cEffective = 1 and branchcode = @bcode and zonecode = @zcode;";

                        command.CommandText = query;
                        command.Parameters.AddWithValue("bcode", bcode);
                        command.Parameters.AddWithValue("zcode", zcode);
                        MySqlDataReader Reader = command.ExecuteReader();

                        if (Reader.Read())
                        {
                            Int32 nextID = Convert.ToInt32(Reader["nextID"]);
                            Int32 type = Convert.ToInt32(Reader["currID"]);
                            //String ndate = (Reader["nDateEffectivity"].ToString().StartsWith("0")) ? null : Convert.ToDateTime(Reader["nDateEffectivity"]).ToString();
                            DateTime nDateEffectivity = (Reader["nDateEffectivity"].ToString().StartsWith("0")) ? NullDate : Convert.ToDateTime(Reader["nDateEffectivity"]);
                            DateTime currentDate = Convert.ToDateTime(Reader["currentDate"]);
                            //throw new Exception(nDateEffectivity.ToString());
                            if (nextID == 0)
                            {
                                Reader.Close();
                                String queryRates = "SELECT ChargeValue AS charge FROM kpformsglobal.ratesperbranchcharges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                                command.CommandText = queryRates;
                                command.Parameters.AddWithValue("amount", amount);
                                command.Parameters.AddWithValue("type", type);

                                MySqlDataReader ReaderRates = command.ExecuteReader();
                                if (ReaderRates.Read())
                                {
                                    dec = (Decimal)ReaderRates["charge"];
                                    ReaderRates.Close();
                                }
                            }
                            else
                            {
                                Reader.Close();

                                int result = DateTime.Compare(nDateEffectivity, currentDate);

                                if (result < 0)
                                {

                                    //ReaderNextRates.Close();
                                    //UPDATE ANG TABLE EFFECTIVE
                                    // 0 = pending, 1 = current chage, 2 = unused

                                    //try
                                    //{
                                    command.Transaction = trans;
                                    command.Parameters.Clear();
                                    String updateRates = "update kpformsglobal.ratesperbranchheader SET  cEffective = 2 where cEffective = 1 and branchcode = @bcode and zonecode = @zcode";
                                    command.CommandText = updateRates;
                                    command.Parameters.AddWithValue("bcode", bcode);
                                    command.Parameters.AddWithValue("zcode", zcode);
                                    command.ExecuteNonQuery();

                                    command.Parameters.Clear();
                                    String updateRates1 = "update kpformsglobal.ratesperbranchheader SET cEffective = 1 where currID = @curr and branchcode = @bcode and zonecode = @zcode";
                                    command.CommandText = updateRates1;
                                    command.Parameters.AddWithValue("curr", nextID);
                                    command.Parameters.AddWithValue("bcode", bcode);
                                    command.Parameters.AddWithValue("zcode", zcode);
                                    command.ExecuteNonQuery();

                                    command.Parameters.Clear();
                                    String insertLog = "insert into kpadminlogsglobal.kpratesupdatelogs (ModifiedRatesID, NewRatesID, DateModified, Modifier) values (@ModifiedRatesID, @NewRatesID, NOW(), @Modifier);";
                                    command.CommandText = insertLog;
                                    command.Parameters.AddWithValue("ModifiedRatesID", nextID - 1);
                                    command.Parameters.AddWithValue("NewRatesID", nextID);
                                    command.Parameters.AddWithValue("Modifier", "boskpws");
                                    command.ExecuteNonQuery();

                                    trans.Commit();

                                    //}catch(MySqlException ex){
                                    //    //trans.Rollback();
                                    //    Reader.Close();

                                    //    throw new Exception(ex.ToString());
                                    //}

                                    command.Parameters.Clear();
                                    String queryRates = "SELECT ChargeValue AS charge FROM kpformsglobal.ratesperbranchcharges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                                    command.CommandText = queryRates;
                                    command.Parameters.AddWithValue("amount", amount);
                                    command.Parameters.AddWithValue("type", nextID);

                                    MySqlDataReader ReaderRates = command.ExecuteReader();
                                    if (ReaderRates.Read())
                                    {
                                        //ReaderRates.Read();
                                        dec = (Decimal)ReaderRates["charge"];
                                        ReaderRates.Close();
                                    }
                                }
                                else
                                {
                                    //ReaderNextRates.Close();


                                    command.Parameters.Clear();
                                    String queryRates = "SELECT ChargeValue AS charge FROM kpformsglobal.ratesperbranchcharges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                                    command.CommandText = queryRates;
                                    command.Parameters.AddWithValue("amount", amount);
                                    command.Parameters.AddWithValue("type", type);

                                    MySqlDataReader ReaderRates = command.ExecuteReader();
                                    if (ReaderRates.Read())
                                    {
                                        //ReaderRates.Read();
                                        dec = (Decimal)ReaderRates["charge"];
                                        ReaderRates.Close();
                                    }
                                }
                            }


                        }
                        else
                        {
                            kplog.Fatal(getRespMessage(16));
                            Reader.Close();
                            conn.Close();
                            dbconGlobal.CloseConnection();
                            return new ChargeResponse { respcode = 16, message = getRespMessage(16), charge = dec };
                        }
                        //trans.Commit();
                        conn.Close();
                        dbconGlobal.CloseConnection();
                        return new ChargeResponse { respcode = 1, message = getRespMessage(1), charge = dec };
                    }
                    catch (MySqlException mex)
                    {
                        kplog.Fatal(mex.ToString());
                        trans.Rollback();
                        conn.Close();
                        dbconGlobal.CloseConnection();
                        return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = mex.ToString() };
                    }
                }

            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                trans.Rollback();
                conn.Close();
                dbconGlobal.CloseConnection();
                return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
    }

    private Decimal CalculateDormantChargeGlobal(DateTime SODate)
    {

        try
        {
            //conn.Open();
            //using (command = conn.CreateCommand())
            //{
            //String queryDormant = "SELECT " +
            //                      "IF(@SODate > DATE_SUB(NOW(), " +
            //                      "INTERVAL (30 * (SELECT ChargeMonth " +
            //                                       "FROM kpforms.syscharges " +
            //                                       "WHERE ChargeCode = 'Dormant')) DAY), " +
            //                                       "0, " +
            //                                       "(SELECT ROUND(" +
            //                                            "DATEDIFF(DATE_SUB(NOW(), INTERVAL (30 * (SELECT ChargeMonth FROM kpforms.syscharges WHERE ChargeCode = 'Dormant')) DAY),@SODate) / 30,0) * (SELECT ChargeAmount FROM kpforms.syscharges WHERE ChargeCode = 'Dormant')))  AS charge; ";

            //String queryDormant = "select ((TIMESTAMPDIFF(MONTH, @SODate, now()) - (SELECT ChargeMonth FROM kpformsglobal.syscharges WHERE ChargeCode = 'Dormant')) * (SELECT ChargeAmount FROM kpformsglobal.syscharges WHERE ChargeCode = 'Dormant')) as charge;";

            String queryDormant = "select if(TIMESTAMPDIFF(MONTH,@SODate, now()) > 3, " +
                    "(TIMESTAMPDIFF(MONTH,@SODate, now()) - (SELECT ChargeMonth FROM kpformsglobal.syscharges WHERE ChargeCode = 'Dormant')) * (SELECT ChargeAmount FROM kpformsglobal.syscharges WHERE ChargeCode = 'Dormant'),0.00) as charge ;";


            command.CommandText = queryDormant;
            command.Parameters.AddWithValue("SODate", SODate.ToString("yyyy-MM-dd HH:mm:ss"));
            MySqlDataReader ReaderDormant = command.ExecuteReader();
            Decimal ChargeAmount;
            if (ReaderDormant.HasRows)
            {
                ReaderDormant.Read();

                ChargeAmount = ReaderDormant["charge"].Equals(DBNull.Value) ? 0 : (Decimal)ReaderDormant["charge"];
                ReaderDormant.Close();
                return ChargeAmount;
            }
            else
            {

                ChargeAmount = 0;
                ReaderDormant.Close();
                return ChargeAmount;
            }
        }
        //}
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }

    [WebMethod(BufferResponse = false)]
    public CustomerResultResponse customerSearchGlobal(String Username, String Password, String Firstname, String LastName, int page, int perPage, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new CustomerResultResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new CustomerResultResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection custconn = custconDomestic.getConnection())
        {
            try
            {
                custconn.Open();
                using (custcommand = custconn.CreateCommand())
                {
                    int counter = 0;
                    int start;
                    if (page == 1)
                    {
                        start = 0;
                    }
                    else
                    {
                        start = (page - 1) * perPage;
                    }
                    Double totalcount;
                    String finalCount;
                    //String countTotPages = "select COUNT(custid) as total from kpcustomersglobal.customers c where FirstName LIKE CONCAT(@FirstNamex,'%') AND LastName LIKE CONCAT(@LastNamex,'%')";
                    String countTotPages = "select COUNT(custid) as total from kpcustomers.customers c where FirstName =@FirstNamex AND LastName=@LastNamex";
                    custcommand.CommandText = countTotPages;

                    custcommand.Parameters.AddWithValue("FirstNamex", Firstname);
                    custcommand.Parameters.AddWithValue("LastNamex", LastName);
                    using (MySqlDataReader ReaderCountTOT = custcommand.ExecuteReader())
                    {
                        ReaderCountTOT.Read();
                        var result = Convert.ToDouble(ReaderCountTOT["total"]) % perPage;
                        if (result == 0)
                        {
                            totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage;
                        }
                        else
                        {
                            totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage + 1;
                        }
                        //totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage;
                        ReaderCountTOT.Close();
                    }
                    finalCount = Math.Truncate(totalcount).ToString();
                    custcommand.Parameters.Clear();
                    //String query = "select FirstName,LastName,MiddleName,Street,ProvinceCity,BirthDate,Country,ExpiryDate,Gender,IDNo,IDType,CustID,PhoneNo,Mobile,Email, cardno  from kpcustomersglobal.customers c where FirstName LIKE CONCAT(@FirstNamex,'%') AND LastName LIKE CONCAT(@LastNamex,'%') ORDER BY LastName LIMIT @start,@end";
                    String query = "select FirstName,LastName,MiddleName,Street,ProvinceCity,BirthDate,Country,ExpiryDate,Gender,IDNo,IDType,CustID,PhoneNo,Mobile,Email, cardno  from kpcustomers.customers c where SUBSTRING(REVERSE(custid),1,1) !='D' and FirstName =@FirstNamex AND LastName=@LastNamex ORDER BY LastName LIMIT @start,@end";
                    custcommand.CommandText = query;
                    //throw new Exception((start).ToString() + " " + perPage.ToString());
                    custcommand.Parameters.AddWithValue("FirstNamex", Firstname);
                    custcommand.Parameters.AddWithValue("LastNamex", LastName);
                    custcommand.Parameters.AddWithValue("start", start);
                    custcommand.Parameters.AddWithValue("end", perPage);
                    //CustArrayResponse b = new CustArrayResponse();

                    using (MySqlDataReader ReaderCount = custcommand.ExecuteReader())
                    {
                        while (ReaderCount.Read())
                        {
                            counter++;
                        }
                        ReaderCount.Close();
                    }
                    if (counter == 0)
                    {
                        kplog.Error(getRespMessage(5));
                        custconn.Close();
                        custconDomestic.CloseConnection();
                        return new CustomerResultResponse { respcode = 5, message = getRespMessage(5) };
                    }

                    using (MySqlDataReader Reader = custcommand.ExecuteReader())
                    {

                        CustArrayResponse[] bb = new CustArrayResponse[counter];
                        int x = 0;
                        while (Reader.Read())
                        {

                            bb[x] = new CustArrayResponse { SearchItem = new CustomerSearchResponse { FirstName = Reader["FirstName"].ToString(), LastName = Reader["LastName"].ToString(), MiddleName = Reader["MiddleName"].ToString(), Street = Reader["Street"].ToString(), ProvinceCity = Reader["ProvinceCity"].ToString(), MLCardNo = Reader["CardNo"].ToString(), BirthDate = (Reader["Birthdate"].Equals(DBNull.Value) || Reader["Birthdate"].Equals("") || Reader["Birthdate"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["Birthdate"]).ToString("yyyy-MM-dd"), Country = Reader["Country"].ToString(), ExpiryDate = (Reader["ExpiryDate"].Equals(DBNull.Value) || Reader["ExpiryDate"].Equals("") || Reader["ExpiryDate"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["ExpiryDate"]).ToString("yyyy-MM-dd"), Gender = Reader["Gender"].ToString(), IDNo = Reader["IDNo"].ToString(), IDType = Reader["IDType"].ToString(), CustID = Reader["CustID"].ToString(), PhoneNo = Reader["PhoneNo"].ToString(), Mobile = Reader["Mobile"].ToString(), Email = Reader["Email"].ToString() } };
                            x = x + 1;
                        }
                        //throw new Exception(x.ToString());
                        Reader.Close();

                        custconn.Close();
                        custconDomestic.CloseConnection();
                        return new CustomerResultResponse { respcode = 1, message = getRespMessage(1), Data = bb, nextPage = page + 1, prevPage = page - 1, totalPages = finalCount };
                    }


                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                custconn.Close();
                custconDomestic.CloseConnection();
                return new CustomerResultResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), Data = null };
            }
        }
    }

    [WebMethod]
    public ControlResponse generateControlGlobal(String Username, String Password, String branchcode, Int32 type, String OperatorID, Int32 ZoneCode, String StationNumber, Double version, String stationcode,String transtype)
    {
        if (transtype.ToLower() == "cloud")
        {
            try
            {
                CloudService.ControlResponse resp = new CloudService.ControlResponse();
                CloudService.MLhuillier client = new CloudService.MLhuillier();

                resp = client.generateControlGlobal(Username, Password, branchcode, type, OperatorID, ZoneCode, StationNumber, version, stationcode, transtype);
                if (resp.respcode == 1)
                {
                    kplog.Info("Success in generating controlno: " + resp.controlno + " | nseries: " + resp.nseries);
                    return new ControlResponse { respcode = resp.respcode, message = resp.message, controlno = resp.controlno, nseries = resp.nseries };
                }
                else
                {
                    kplog.Info("Failed in generating controlno: " + resp.ErrorDetail);
                    return new ControlResponse { respcode = resp.respcode, message = resp.message, ErrorDetail = resp.ErrorDetail };
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal("Cloud Catch: " + ex.ToString());
                return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
        if (transtype.ToLower() == "kiosk cloud")
        {
            try
            {
                CloudService.ControlResponse resp = new CloudService.ControlResponse();
                CloudService.MLhuillier client = new CloudService.MLhuillier();

                resp = client.generateControlKioskGlobal(Username, Password, branchcode, type, OperatorID, ZoneCode, StationNumber, version, stationcode);
                if (resp.respcode == 1)
                {
                    kplog.Info("Success in generating controlno: " + resp.controlno + " | nseries: " + resp.nseries);
                    return new ControlResponse { respcode = resp.respcode, message = resp.message, controlno = resp.controlno, nseries = resp.nseries };
                }
                else
                {
                    kplog.Info("Failed in generating controlno: " + resp.ErrorDetail);
                    return new ControlResponse { respcode = resp.respcode, message = resp.message, ErrorDetail = resp.ErrorDetail };
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal("Cloud Catch: " + ex.ToString());
                return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
        if (transtype.ToLower() == "kiosk network")
        {
            try
            {
                ControlResponse kiosktcontrol = new ControlResponse();
                kiosktcontrol = generateControlKioskGlobal(Username, Password, branchcode, type, OperatorID, ZoneCode, StationNumber, version, stationcode);

                if (kiosktcontrol.respcode == 1)
                {
                    kplog.Info("Success in generating controlno: " + kiosktcontrol.controlno + " | nseries: " + kiosktcontrol.nseries);
                    return new ControlResponse { respcode = kiosktcontrol.respcode, message = kiosktcontrol.message, controlno = kiosktcontrol.controlno, nseries = kiosktcontrol.nseries };
                }
                else
                {
                    kplog.Info("Failed in generating controlno: " + kiosktcontrol.ErrorDetail);
                    return new ControlResponse { respcode = kiosktcontrol.respcode, message = kiosktcontrol.message, ErrorDetail = kiosktcontrol.ErrorDetail };
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal("Network Catch: " + ex.ToString());
                return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }

        if (StationNumber.ToString().Equals("0"))
        {
            kplog.Error(getRespMessage(13));
            return new ControlResponse { respcode = 13, message = getRespMessage(13) };
        }
        if (!authenticate(Username, Password))
        {
            return new ControlResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ControlResponse { respcode = 10, message = getRespMessage(10) };
        //}
        try
        {
            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                using (command = conn.CreateCommand())
                {
                    conn.Open();
                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    command.Transaction = trans;
                    try
                    {
                        String query = "CALL `kpformsglobal`.`getseries`('" + branchcode + "','" + ZoneCode + "','" + type + "','" + StationNumber + "');";
                        command.CommandText = query;
                        command.CommandType = CommandType.Text;
                        command.ExecuteNonQuery();

                        dt = getServerDateGlobal(true);
                        String control = "MLG";

                        //command.CommandText = "Select station, bcode, userid, nseries, zcode, type from kpformsglobal.control where station = @st and bcode = @bcode and zcode = @zcode and type = @tp FOR UPDATE";
                        command.CommandText = "Select station, bcode, userid, nseries, zcode, type from kpformsglobal.control where station = @st and bcode = @bcode and zcode = @zcode and `type` = @tp";
                        command.Parameters.AddWithValue("st", StationNumber);
                        command.Parameters.AddWithValue("bcode", branchcode);
                        command.Parameters.AddWithValue("zcode", ZoneCode);
                        command.Parameters.AddWithValue("tp", type);
                        MySqlDataReader Reader = command.ExecuteReader();

                        if (Reader.HasRows)
                        {
                            //throw new Exception("Invalid type value");
                            Reader.Read();
                            //throw new Exception(Reader["station"].ToString() + " " + Reader["bcode"].ToString() + " " + Reader["type"].ToString());
                            if (type == 0)
                            {
                                control += "S0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 1)
                            {
                                control += "P0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 2)
                            {
                                control += "S0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else if (type == 3)
                            {
                                control += "P0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else
                            {
                                kplog.Error("Invalid type value");
                                throw new Exception("Invalid type value");
                            }

                            String s = Reader["Station"].ToString();
                            String nseries = Reader["nseries"].ToString().PadLeft(6, '0');
                            Reader.Close();
                            trans.Commit();
                            conn.Close();
                            //if (isSameYear2(dt))
                            //{
                            //    dbconGlobal.CloseConnection();
                            //    return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("yy") + "-" + nseries, nseries = nseries };
                            //}
                            //else
                            //{
                            //    dbconGlobal.CloseConnection();
                            //    return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("yy") + "-" + "000001", nseries = "000001" };
                            //}

                            dbconGlobal.CloseConnection();
                            return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("MMyy") + "-" + nseries, nseries = nseries };

                        }
                        else
                        {
                            Reader.Close();
                            command.CommandText = "Insert into kpformsglobal.control (`station`,`bcode`,`userid`,`nseries`,`zcode`, `type`) values (@station,@branchcode,@uid,1,@zonecode,@type)";
                            if (type == 0)
                            {
                                control += "S0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 1)
                            {
                                control += "P0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 2)
                            {
                                control += "S0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else if (type == 3)
                            {
                                control += "P0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else
                            {
                                kplog.Error("Invalid type value");
                                throw new Exception("Invalid type value");
                            }
                            command.Parameters.AddWithValue("station", StationNumber);
                            command.Parameters.AddWithValue("branchcode", branchcode);
                            command.Parameters.AddWithValue("uid", OperatorID);
                            command.Parameters.AddWithValue("zonecode", ZoneCode);
                            command.Parameters.AddWithValue("type", type);
                            int x = command.ExecuteNonQuery();
                            //if (x < 1) {
                            //    conn.Close();
                            //    throw new Exception("asdfsadfds");
                            //}
                            trans.Commit();
                            conn.Close();
                            dbconGlobal.CloseConnection();
                            return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("MMyy") + "-" + "000001", nseries = "000001" };
                        }
                    }
                    catch (MySqlException ex)
                    {
                        kplog.Fatal(ex.ToString());
                        trans.Rollback();
                        conn.Close();
                        dbconGlobal.CloseConnection();
                        return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                    }
                }
            }
        }
        catch (MySqlException ex)
        {
            kplog.Fatal(ex.ToString());
            dbconGlobal.CloseConnection();
            return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }

        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            dbconGlobal.CloseConnection();
            return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }
    }

    [WebMethod]
    public ControlResponse generateControlKioskGlobal(String Username, String Password, String branchcode, Int32 type, String OperatorID, Int32 ZoneCode, String StationNumber, Double version, String stationcode)
    {
        if (StationNumber.ToString().Equals("0"))
        {
            kplog.Error(getRespMessage(13));
            return new ControlResponse { respcode = 13, message = getRespMessage(13) };
        }
        if (!authenticate(Username, Password))
        {
            return new ControlResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ControlResponse { respcode = 10, message = getRespMessage(10) };
        //}
        try
        {
            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                using (command = conn.CreateCommand())
                {
                    conn.Open();
                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    command.Transaction = trans;
                    try
                    {
                        String query = "CALL `kpformsglobal`.`getseries`('" + branchcode + "','" + ZoneCode + "','" + type + "','" + StationNumber + "');";
                        command.CommandText = query;
                        command.CommandType = CommandType.Text;
                        command.ExecuteNonQuery();

                        dt = getServerDateGlobal(true);
                        String control = "MLG";

                        //command.CommandText = "Select station, bcode, userid, nseries, zcode, type from kpformsglobal.control where station = @st and bcode = @bcode and zcode = @zcode and type = @tp FOR UPDATE";
                        command.CommandText = "Select station, bcode, userid, nseries, zcode, type from kpformsglobal.control where station = @st and bcode = @bcode and zcode = @zcode and `type` = @tp";
                        command.Parameters.AddWithValue("st", StationNumber);
                        command.Parameters.AddWithValue("bcode", branchcode);
                        command.Parameters.AddWithValue("zcode", ZoneCode);
                        command.Parameters.AddWithValue("tp", type);
                        MySqlDataReader Reader = command.ExecuteReader();

                        if (Reader.HasRows)
                        {
                            //throw new Exception("Invalid type value");
                            Reader.Read();
                            //throw new Exception(Reader["station"].ToString() + " " + Reader["bcode"].ToString() + " " + Reader["type"].ToString());
                            if (type == 0)
                            {
                                control += "S0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 1)
                            {
                                control += "P0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 2)
                            {
                                control += "S0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else if (type == 3)
                            {
                                control += "P0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else
                            {
                                kplog.Error("Invalid type value");
                                throw new Exception("Invalid type value");
                            }

                            String s = Reader["Station"].ToString();
                            String nseries = Reader["nseries"].ToString().PadLeft(6, '0');
                            Reader.Close();
                            trans.Commit();
                            conn.Close();
                            //if (isSameYear2(dt))
                            //{
                            //    dbconGlobal.CloseConnection();
                            //    return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("yy") + "-" + nseries, nseries = nseries };
                            //}
                            //else
                            //{
                            //    dbconGlobal.CloseConnection();
                            //    return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("yy") + "-" + "000001", nseries = "000001" };
                            //}

                            dbconGlobalkiosk.CloseConnection();
                            return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("MMyy") + "-" + nseries, nseries = nseries };

                        }
                        else
                        {
                            Reader.Close();
                            command.CommandText = "Insert into kpformsglobal.control (`station`,`bcode`,`userid`,`nseries`,`zcode`, `type`) values (@station,@branchcode,@uid,1,@zonecode,@type)";
                            if (type == 0)
                            {
                                control += "S0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 1)
                            {
                                control += "P0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 2)
                            {
                                control += "S0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else if (type == 3)
                            {
                                control += "P0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else
                            {
                                kplog.Error("Invalid type value");
                                throw new Exception("Invalid type value");
                            }
                            command.Parameters.AddWithValue("station", StationNumber);
                            command.Parameters.AddWithValue("branchcode", branchcode);
                            command.Parameters.AddWithValue("uid", OperatorID);
                            command.Parameters.AddWithValue("zonecode", ZoneCode);
                            command.Parameters.AddWithValue("type", type);
                            int x = command.ExecuteNonQuery();
                            //if (x < 1) {
                            //    conn.Close();
                            //    throw new Exception("asdfsadfds");
                            //}
                            trans.Commit();
                            conn.Close();
                            dbconGlobalkiosk.CloseConnection();
                            return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("MMyy") + "-" + "000001", nseries = "000001" };
                        }
                    }
                    catch (MySqlException ex)
                    {
                        kplog.Fatal(ex.ToString());
                        trans.Rollback();
                        conn.Close();
                        dbconGlobalkiosk.CloseConnection();
                        return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                    }
                }
            }
        }
        catch (MySqlException ex)
        {
            kplog.Fatal(ex.ToString());
            dbconGlobalkiosk.CloseConnection();
            return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }

        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            dbconGlobalkiosk.CloseConnection();
            return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }
    }

    private String generateCustIDGlobal(MySqlCommand command)
    {
        //DateTime dt = DateTime.Now;

        try
        {
            //using (command = conn.CreateCommand())
            //{
            //conn.Open();

            dt = getServerDateGlobal(true, command);

            String query = "select series from kpformsglobal.customerseries";
            command.CommandText = query;
            MySqlDataReader Reader = command.ExecuteReader();

            Reader.Read();
            String series = Reader["series"].ToString();
            Reader.Close();

            return dt.ToString("yy") + dt.ToString("MM") + series.PadLeft(9, '0') + "N1";


            //}
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
            //return null;
            //conn.Close();
            //return new ChargeResponse(0, ex.ToString(), 0);
        }

    }

    //[WebMethod]
    //public String generateKPTNGlobal(String branchcode, Int32 zonecode)
    //{
    //    try
    //    {
    //        String guid = Guid.NewGuid().GetHashCode().ToString();
    //        Random rand = new Random();


    //        dt = getServerDateGlobal(false);
    //        jp.takel.PseudoRandom.MersenneTwister randGen = new jp.takel.PseudoRandom.MersenneTwister((uint)dt.Ticks);
    //        return "MLG" + branchcode + dt.ToString("dd") + zonecode.ToString() + randGen.Next(1000000, 9999999).ToString() + dt.ToString("MM"); ;
    //    }
    //    catch (Exception a)
    //    {
    //        kplog.Fatal(a.ToString());
    //        throw new Exception(a.ToString());
    //    }
    //}

    //private String generateKPTNGlobal(String branchcode, Int32 zonecode)
    [WebMethod]
    public String generateKPTNGlobaltest(String branchcode, Int32 zonecode)
    {
        try
        {
            String guid = Guid.NewGuid().GetHashCode().ToString();
            Random rand = new Random();


            dt = getServerDateGlobal(false);

            jp.takel.PseudoRandom.MersenneTwister randGen = new jp.takel.PseudoRandom.MersenneTwister((uint)HiResDateTime.UtcNow.Ticks);
            return "MLG" + branchcode + dt.ToString("dd") + zonecode.ToString() + randGen.Next(1, int.MaxValue).ToString().PadLeft(10, '0') + dt.ToString("MM"); ;
        }
        catch (Exception a)
        {
            kplog.Fatal(a.ToString());
            throw new Exception(a.ToString());
        }
    }
    private String generateKPTNGlobal(String branchcode, Int32 zonecode)
    {
        try
        {
            String guid = Guid.NewGuid().GetHashCode().ToString();
            Random rand = new Random();


            dt = getServerDateGlobal(false);

            jp.takel.PseudoRandom.MersenneTwister randGen = new jp.takel.PseudoRandom.MersenneTwister((uint)HiResDateTime.UtcNow.Ticks);
            return "MLG" + branchcode + dt.ToString("dd") + zonecode.ToString() + randGen.Next(1, int.MaxValue).ToString().PadLeft(10, '0') + dt.ToString("MM"); ;
        }
        catch (Exception a)
        {
            kplog.Fatal(a.ToString());
            throw new Exception(a.ToString());
        }
    }
    //[WebMethod]
    //public String generateKPTNGlobal(String branchcode, Int32 zonecode)
    //{
    //    try
    //    {
    //        String guid = Guid.NewGuid().GetHashCode().ToString();
    //        Random rand = new Random();


    //        dt = getServerDateGlobal(false);
    //        jp.takel.PseudoRandom.MersenneTwister randGen = new jp.takel.PseudoRandom.MersenneTwister((uint)dt.Ticks);
    //        return "MLG" + branchcode + dt.ToString("dd") + zonecode.ToString() + randGen.Next(1000000, 9999999).ToString() + dt.ToString("MM"); ;
    //    }
    //    catch (Exception a)
    //    {
    //        kplog.Fatal(a.ToString());
    //        throw new Exception(a.ToString());
    //    }
    //}
    [WebMethod]
    public String generateORNOGlobal(string branchcode, string zonecode, Double version, String stationcode)
    {
        try
        {
            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    throw new Exception("Version does not match!");
            //}
            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                conn.Open();
                trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                try
                {
                    using (command = conn.CreateCommand())
                    {
                        command.Transaction = trans;
                        dt = getServerDateGlobal(true);
                        string query = "select oryear,branchcode,zonecode,series from kpformsglobal.resibo where branchcode = @bcode1 and zonecode = @zcode1";
                        command.CommandText = query;
                        command.Parameters.AddWithValue("bcode1", branchcode);
                        command.Parameters.AddWithValue("zcode1", zonecode);
                        //trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                        using (MySqlDataReader dataReader = command.ExecuteReader())
                        {
                            if (dataReader.HasRows)
                            {

                                dataReader.Read();
                                Int32 series = Convert.ToInt32(dataReader["series"]) + 1;
                                String oryear = dataReader["oryear"].ToString().Substring(2);
                                dataReader.Close();
                                //if (isSameYear2(dt))
                                //{
                                //    command.Parameters.Clear();
                                //    command.CommandText = "update kpformsglobal.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                                //    command.Parameters.AddWithValue("bcode2", branchcode);
                                //    command.Parameters.AddWithValue("zcode2", zonecode);
                                //    command.Parameters.AddWithValue("series", series);
                                //    command.ExecuteNonQuery();
                                //    trans.Commit();
                                //    conn.Close();
                                //    return oryear + "-" + series.ToString().PadLeft(6, '0');
                                //}
                                //else
                                //{
                                //    kplog.Info("SERIES RESETTED");
                                //    command.Parameters.Clear();
                                //    command.CommandText = "update kpformsglobal.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                                //    command.Parameters.AddWithValue("bcode2", branchcode);
                                //    command.Parameters.AddWithValue("zcode2", zonecode);
                                //    command.Parameters.AddWithValue("series", 1);
                                //    command.ExecuteNonQuery();
                                //    trans.Commit();
                                //    conn.Close();
                                //    return dt.ToString("yy") + "-" + series.ToString().PadLeft(6, '0');
                                //}

                                command.Parameters.Clear();
                                command.CommandText = "update kpformsglobal.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                                command.Parameters.AddWithValue("bcode2", branchcode);
                                command.Parameters.AddWithValue("zcode2", zonecode);
                                command.Parameters.AddWithValue("series", series);
                                command.ExecuteNonQuery();
                                trans.Commit();
                                conn.Close();
                                //return oryear + "-" + series.ToString().PadLeft(6, '0');
                                return dt.ToString("yy") + "-" + series.ToString().PadLeft(6, '0');

                            }
                            else
                            {
                                dataReader.Close();
                                //String oryear = dataReader["oryear"].ToString().Substring(2);
                                //dataReader.Close();
                                command.Parameters.Clear();
                                command.CommandText = "update kpformsglobal.resibo set `lock` = 1 where branchcode = @bcode2 and zonecode = @zcode2";
                                command.Parameters.AddWithValue("bcode2", branchcode);
                                command.Parameters.AddWithValue("zcode2", zonecode);
                                command.ExecuteNonQuery();

                                command.Parameters.Clear();
                                command.CommandText = "insert into kpformsglobal.resibo (oryear, branchcode, zonecode, series) values (@year, @bcode2, @zcode2, @ser)";
                                command.Parameters.AddWithValue("year", dt.ToString("yyyy"));
                                command.Parameters.AddWithValue("bcode2", branchcode);
                                command.Parameters.AddWithValue("zcode2", zonecode);
                                command.Parameters.AddWithValue("ser", 1);
                                command.ExecuteNonQuery();
                                trans.Commit();
                                int ser = 1;
                                conn.Close();
                                dbconGlobal.CloseConnection();
                                return dt.ToString("yy") + "-" + ser.ToString().PadLeft(6, '0');
                            }
                        }
                    }
                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(ex.ToString());
                    trans.Rollback();
                    conn.Close();
                    dbconGlobal.CloseConnection();
                    throw new Exception(ex.ToString());
                }

            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }

    }

    private String generateResiboGlobal(string branchcode, Int32 zonecode, MySqlCommand command)
    {
        try
        {

            dt = getServerDateGlobal(true);
            string query = "select oryear,branchcode,zonecode,series from kpformsglobal.resibo where branchcode = @bcode1 and zonecode = @zcode1";
            command.CommandText = query;
            command.Parameters.AddWithValue("bcode1", branchcode);
            command.Parameters.AddWithValue("zcode1", zonecode);

            using (MySqlDataReader dataReader = command.ExecuteReader())
            {
                if (dataReader.HasRows)
                {
                    dataReader.Read();
                    Int32 series = Convert.ToInt32(dataReader["series"]) + 1;
                    String oryear = dataReader["oryear"].ToString().Substring(2);
                    dataReader.Close();
                    //if (isSameYear2(dt))
                    //{
                    //    //command.Parameters.Clear();
                    //    //command.CommandText = "update kpformsglobal.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                    //    //command.Parameters.AddWithValue("bcode2", branchcode);
                    //    //command.Parameters.AddWithValue("zcode2", zonecode);
                    //    //command.Parameters.AddWithValue("series", series);
                    //    //command.ExecuteNonQuery();
                    //    //command.Parameters.Clear();
                    //    return oryear + "-" + series.ToString().PadLeft(6, '0');
                    //}
                    //else
                    //{
                    //    kplog.Info("SERIES RESETTED");
                    //    //command.Parameters.Clear();
                    //    //command.CommandText = "update kpformsglobal.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                    //    //command.Parameters.AddWithValue("bcode2", branchcode);
                    //    //command.Parameters.AddWithValue("zcode2", zonecode);
                    //    //command.Parameters.AddWithValue("series", 1);
                    //    //command.ExecuteNonQuery();
                    //    //command.Parameters.Clear();
                    //    return dt.ToString("yy") + "-" + series.ToString().PadLeft(6, '0');

                    //}

                    return dt.ToString("yy") + "-" + series.ToString().PadLeft(6, '0');
                }
                else
                {
                    dataReader.Close();
                    //String oryear = dataReader["oryear"].ToString().Substring(2);
                    //dataReader.Close();
                    command.Parameters.Clear();
                    command.CommandText = "update kpformsglobal.resibo set `lock` = 1 where branchcode = @bcode2 and zonecode = @zcode2";
                    command.Parameters.AddWithValue("bcode2", branchcode);
                    command.Parameters.AddWithValue("zcode2", zonecode);
                    command.ExecuteNonQuery();

                    command.Parameters.Clear();
                    command.CommandText = "insert into kpformsglobal.resibo (oryear, branchcode, zonecode, series) values (@year, @bcode2, @zcode2, @ser)";
                    command.Parameters.AddWithValue("year", dt.ToString("yyyy"));
                    command.Parameters.AddWithValue("bcode2", branchcode);
                    command.Parameters.AddWithValue("zcode2", zonecode);
                    command.Parameters.AddWithValue("ser", 1);
                    command.ExecuteNonQuery();
                    int ser = 1;

                    return dt.ToString("yy") + "-" + ser.ToString().PadLeft(6, '0');
                }
            }

        }
        catch (MySqlException myx)
        {
            kplog.Fatal(myx.ToString());
            throw new Exception(myx.ToString());
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }

    }

    private DateTime getCustServerDateGlobal(Boolean isOpenConnection)
    {
        try
        {
            if (!isOpenConnection)
            {
                using (MySqlConnection conn = custconGlobal.getConnection())
                {
                    conn.Open();
                    using (MySqlCommand command = conn.CreateCommand())
                    {

                        DateTime serverdate;

                        command.CommandText = "Select NOW() as serverdt;";
                        using (MySqlDataReader Reader = command.ExecuteReader())
                        {
                            Reader.Read();
                            serverdate = Convert.ToDateTime(Reader["serverdt"]);
                            Reader.Close();
                            conn.Close();
                            custconGlobal.CloseConnection();
                            return serverdate;
                        }

                    }
                }
            }
            else
            {

                DateTime serverdate;

                command.CommandText = "Select NOW() as serverdt;";

                using (MySqlDataReader Reader = command.ExecuteReader())
                {
                    Reader.Read();
                    serverdate = (DateTime)Reader["serverdt"];
                    Reader.Close();
                    return serverdate;
                }


            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.Message);
        }
    }

    [WebMethod]
    public AllowedIDPerZone getIDsGlobal(String Username, String Password, Int32 zonecode)
    {
        if (!authenticate(Username, Password))
        {
            return new AllowedIDPerZone { respcode = 7, message = getRespMessage(7) };
        }

        try
        {
            using (MySqlConnection con = dbconGlobal.getConnection())
            {
                try
                {
                    con.Open();
                    List<string> listofids = new List<string>();
                    int x = 0;
                    using (command = con.CreateCommand())
                    {
                        command.CommandText = "select idtype from kpformsglobal.sysallowedidtype where zonecode = @zcode";
                        command.Parameters.AddWithValue("zcode", zonecode);
                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            if (reader.HasRows)
                            {
                                while (reader.Read())
                                {
                                    listofids.Add(reader[x].ToString());
                                    x = x++;
                                }
                                reader.Close();
                                con.Close();
                                return new AllowedIDPerZone { respcode = 1, message = getRespMessage(1), IDs = listofids };

                            }
                            else
                            {
                                kplog.Error("No IDs found in your zone.");
                                reader.Close();
                                con.Close();
                                return new AllowedIDPerZone { respcode = 0, message = "No IDs found in your zone." };

                            }
                        }
                    }
                }
                catch (MySqlException mex)
                {

                    kplog.Fatal(mex.ToString());
                    con.Close();
                    return new AllowedIDPerZone { respcode = 0, message = mex.Message, ErrorDetail = mex.ToString() };
                }
            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return new AllowedIDPerZone { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString() };
        }

    }

    [WebMethod]
    public kptnResponse getKptnGlobal(String Username, String Password, String BranchCode, Int32 ZoneCode, Double version, String stationcode)
    {
        try
        {
            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    return new kptnResponse { respcode = 10, message = getRespMessage(10) };
            //}
            if (!authenticate(Username, Password))
            {
                return new kptnResponse { respcode = 7, message = getRespMessage(7) };
            }
            return new kptnResponse { respcode = 1, message = getRespMessage(1), kptn = generateKPTNGlobal(BranchCode, ZoneCode) };
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return new kptnResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }
    }

    [WebMethod]
    public Int32 getKYCStatusGlobal(String Username, String Password, Double version, String stationcode)
    {

        try
        {
            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    throw new Exception("Version does not match!");
            //}

            if (!authenticate(Username, Password))
            {
                throw new Exception("Invalid credentials");
            }
            return isUseKYCGlobal;
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }

    //0 = standard, 1 = per branch, 2 = promo
    //[WebMethod]
    //public Decimal getMaxAmountGlobal(String Username, String Password, Int16 chargetype, String bcode, Int16 zcode, String promoname, Double version, String stationcode)
    //{
    //    try
    //    {
    //        //if (!compareVersions(getVersion(stationcode), version))
    //        //{
    //        //    throw new Exception("Version does not match!");
    //        //}
    //        using (MySqlConnection con = dbconGlobal.getConnection())
    //        {
    //            try
    //            {
    //                con.Open();
    //                if (chargetype == 0)
    //                {
    //                    using (command = con.CreateCommand())
    //                    {
    //                        command.CommandText = "select MAX(c.MaxAmount) as maximum from kpformsglobal.charges c inner join kpformsglobal.headercharges hc on hc.currID = c.Type where hc.cEffective = 1;";
    //                        using (MySqlDataReader dataReader = command.ExecuteReader())
    //                        {
    //                            dataReader.Read();
    //                            Decimal maximum = Convert.ToDecimal(dataReader["maximum"]);
    //                            dataReader.Close();
    //                            con.Close();

    //                            return maximum;
    //                        }
    //                    }
    //                }
    //                else if (chargetype == 1)
    //                {
    //                    using (command = con.CreateCommand())
    //                    {
    //                        command.CommandText = "select MAX(c.MaxAmount) as maximum from kpformsglobal.ratesperbranchcharges c inner join kpformsglobal.ratesperbranchheader hc on hc.currID = c.Type where hc.cEffective = 1 and hc.branchcode = @bcode and hc.zonecode = @zcode;";
    //                        command.Parameters.AddWithValue("bcode", bcode);
    //                        command.Parameters.AddWithValue("zcode", zcode);
    //                        using (MySqlDataReader dataReader = command.ExecuteReader())
    //                        {
    //                            dataReader.Read();
    //                            Decimal maximum = Convert.ToDecimal(dataReader["maximum"]);
    //                            dataReader.Close();
    //                            con.Close();

    //                            return maximum;
    //                        }
    //                    }
    //                }
    //                else
    //                {
    //                    using (command = con.CreateCommand())
    //                    {
    //                        command.CommandText = "select MAX(c.MaxAmount) as maximum from kpformsglobal.promoratescharges c inner join kpformsglobal.promoratesheader hc on hc.currID = c.Type where hc.promoname = @promoname;";
    //                        command.Parameters.AddWithValue("promoname", promoname);

    //                        using (MySqlDataReader dataReader = command.ExecuteReader())
    //                        {
    //                            dataReader.Read();
    //                            Decimal maximum = Convert.ToDecimal(dataReader["maximum"]);
    //                            dataReader.Close();
    //                            con.Close();

    //                            return maximum;
    //                        }
    //                    }
    //                }
    //            }
    //            catch (MySqlException mex)
    //            {
    //                kplog.Fatal(mex.ToString());
    //                throw new Exception(mex.ToString());
    //                //return 0;
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        kplog.Fatal(ex.ToString());
    //        throw new Exception(ex.ToString());
    //        //return 0;
    //    }
    //}

    [WebMethod]
    public Decimal getMaxAmountGlobal(String Username, String Password, Int16 chargetype, String bcode, Int16 zcode, String promoname, Double version, String stationcode)
    {
        try
        {
            using (MySqlConnection con = dbconDomestic.getConnection())
            {
                try
                {
                    con.Open();
                    using (command = con.CreateCommand())
                    {
                        Decimal maximum = 0;
                        String query = "select currID from kpforms.globalheadercharges where iseffective=1 order by effectivedate desc limit 1;";
                        command.CommandText = query;
                        MySqlDataReader rdrates = command.ExecuteReader();
                        if (rdrates.HasRows)
                        {
                            rdrates.Read();
                            Int32 currid = Convert.ToInt32(rdrates["currID"]);
                            rdrates.Close();

                            String getratesdata = "SELECT maxAmount as maximum FROM kpforms.globalcharges WHERE `type` = @type order by maximum desc limit 1;";
                            command.CommandText = getratesdata;
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("type", currid);
                            MySqlDataReader rdrates1 = command.ExecuteReader();
                            if (rdrates1.HasRows)
                            {
                                rdrates1.Read();
                                maximum = Convert.ToDecimal(rdrates1["maximum"]);
                                rdrates1.Close();
                                con.Close();
                                return maximum;
                            }
                            rdrates1.Close();
                        }
                        rdrates.Close();
                        con.Close();
                        return maximum;
                    }
                }
                catch (MySqlException mex)
                {
                    kplog.Fatal(mex.ToString());
                    throw new Exception(mex.ToString());
                    //return 0;
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
            //return 0;
        }
    }


    [WebMethod]
    public String getPhonenoGlobal(String Username, String Password, String CustID, Double version, String stationcode)
    {

        try
        {

            if (!authenticate(Username, Password))
            {
                throw new Exception("Invalid credentials");
            }
            using (MySqlConnection custconn = custconGlobal.getConnection())
            {
                try
                {
                    custconn.Open();
                    using (custcommand = custconn.CreateCommand())
                    {
                        //int counter = 0;
                        String query = "Select PhoneNo from kpcustomersglobal.customers where CustID = @CustID  AND Phoneno IS NOT NULL AND phoneno !=''";
                        custcommand.CommandText = query;
                        custcommand.Parameters.AddWithValue("CustID", CustID);
                        using (MySqlDataReader ReaderCount = custcommand.ExecuteReader())
                        {
                            String phoneno;
                            if (ReaderCount.Read())
                            {
                                phoneno = ReaderCount["PhoneNo"].ToString();
                                custconn.Close();
                                ReaderCount.Close();
                                return phoneno;
                            }
                            else
                            {
                                custconn.Close();
                                ReaderCount.Close();
                                return String.Empty;
                            }
                        }
                    }

                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(ex.ToString());
                    custconn.Close();
                    throw new Exception(ex.ToString());
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return String.Empty;
            throw new Exception(ex.ToString());

        }

    }

    [WebMethod]
    public ChargeResponse getPromoChargeGlobal(String Username, String Password, String promoname, Decimal promoamount)
    {
        if (!authenticate(Username, Password))
        {
            return new ChargeResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ChargeResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconGlobal.getConnection())
        {
            try
            {

                using (command = conn.CreateCommand())
                {

                    DateTime NullDate = DateTime.MinValue;

                    Decimal dec = 0;
                    conn.Open();
                    trans = conn.BeginTransaction();

                    try
                    {
                        String query = "select currid from kpformsglobal.promoratesheader where promoname = @promoname;";
                        command.CommandText = query;
                        command.Parameters.AddWithValue("promoname", promoname);


                        //List<string> promos = new List<string>();

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            // int arraysize = 0;
                            if (reader.HasRows)
                            {
                                reader.Read();
                                Int32 currid = Convert.ToInt32(reader["currid"]);
                                reader.Close();
                                String queryRates = "SELECT ChargeValue AS charge FROM kpformsglobal.promoratescharges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                                command.CommandText = queryRates;

                                command.Parameters.AddWithValue("type", currid);
                                command.Parameters.AddWithValue("amount", promoamount);
                                using (MySqlDataReader readerCharges = command.ExecuteReader())
                                {
                                    if (readerCharges.HasRows)
                                    {
                                        readerCharges.Read();

                                        decimal charge = Convert.ToDecimal(readerCharges["charge"]);

                                        readerCharges.Close();
                                        conn.Close();
                                        return new ChargeResponse { respcode = 1, message = getRespMessage(1), charge = charge };
                                    }
                                    else
                                    {
                                        readerCharges.Close();
                                        conn.Close();
                                        return new ChargeResponse { respcode = 0, message = "No rates found." };
                                    }

                                }
                                //conn.Close();
                                //throw new Exception(arrayCounter.ToString());
                            }
                            else
                            {
                                reader.Close();
                                conn.Close();
                                return new ChargeResponse { respcode = 16, message = "Promo not found.", charge = dec };
                            }
                        }
                        //trans.Commit();

                        //return new ChargeResponse { respcode = 1, message = getRespMessage(1), charge = dec };
                    }
                    catch (MySqlException mex)
                    {
                        kplog.Fatal(mex.ToString());
                        trans.Rollback();
                        conn.Close();
                        return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = mex.ToString() };
                    }
                }

            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                trans.Rollback();
                conn.Close();
                return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
    }

    [WebMethod]
    public ChargeResponse getPromoListGlobal(String Username, String Password)
    {
        if (!authenticate(Username, Password))
        {
            return new ChargeResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ChargeResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconGlobal.getConnection())
        {
            try
            {

                using (command = conn.CreateCommand())
                {

                    DateTime NullDate = DateTime.MinValue;

                    Decimal dec = 0;
                    conn.Open();
                    trans = conn.BeginTransaction();

                    try
                    {
                        String query = "select promoname, effectivedate, expirydate, NOW() as now from kpformsglobal.promoratesheader WHERE DATE_FORMAT(NOW(),'%Y-%m-%d') <= DATE_FORMAT(expirydate,'%Y-%m-%d') order by effectivedate;";

                        command.CommandText = query;
                        //List<string> promos = new List<string>();

                        MySqlDataReader ReaderCount = command.ExecuteReader();
                        int arraysize = 0;
                        if (ReaderCount.HasRows)
                        {
                            while (ReaderCount.Read())
                            {
                                arraysize = arraysize + 1;
                            }
                            ReaderCount.Close();
                            MySqlDataReader Reader = command.ExecuteReader();
                            PromoList[] promoList = new PromoList[arraysize];
                            int arrayCounter = 0;

                            while (Reader.Read())
                            {
                                promoList[arrayCounter] = new PromoList { promoName = Reader["promoname"].ToString(), effectiveDate = Reader["effectivedate"].ToString(), expiryDate = Reader["expirydate"].ToString(), active = verifyValidity(Convert.ToDateTime(Reader["now"]), Convert.ToDateTime(Reader["expirydate"])) };
                                arrayCounter = arrayCounter + 1;
                            }

                            Reader.Close();
                            conn.Close();
                            //throw new Exception(arrayCounter.ToString());
                            return new ChargeResponse { respcode = 1, message = getRespMessage(1), promos = promoList };
                        }
                        else
                        {
                            ReaderCount.Close();
                            conn.Close();
                            return new ChargeResponse { respcode = 16, message = "No promo available.", charge = dec };
                        }
                        //trans.Commit();

                        //return new ChargeResponse { respcode = 1, message = getRespMessage(1), charge = dec };
                    }
                    catch (MySqlException mex)
                    {
                        kplog.Fatal(mex.ToString());
                        trans.Rollback();
                        conn.Close();
                        return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = mex.ToString() };
                    }
                }

            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                trans.Rollback();
                conn.Close();
                return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
    }

    private DateTime getServerDateGlobal(Boolean isOpenConnection)
    {
        try
        {
            //throw new Exception(isOpenConnection.ToString());
            if (!isOpenConnection)
            {
                using (MySqlConnection conn = dbconGlobal.getConnection())
                {
                    conn.Open();
                    using (MySqlCommand command = conn.CreateCommand())
                    {

                        DateTime serverdate;

                        command.CommandText = "Select DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s') as serverdt;";
                        using (MySqlDataReader Reader = command.ExecuteReader())
                        {
                            Reader.Read();

                            serverdate = Convert.ToDateTime(Reader["serverdt"]);
                            Reader.Close();
                            conn.Close();

                            return serverdate;
                        }

                    }
                }
            }
            else
            {

                DateTime serverdate;

                command.CommandText = "Select NOW() as serverdt;";

                using (MySqlDataReader Reader = command.ExecuteReader())
                {
                    Reader.Read();
                    serverdate = Convert.ToDateTime(Reader["serverdt"]);
                    Reader.Close();
                    return serverdate;
                }


            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.Message);
        }
    }

    private DateTime getServerDateGlobalKiosk(Boolean isOpenConnection)
    {
        try
        {
            if (!isOpenConnection)
            {
                using (MySqlConnection conn = dbconGlobalkiosk.getConnection())
                {
                    conn.Open();
                    using (MySqlCommand command = conn.CreateCommand())
                    {

                        DateTime serverdate;

                        command.CommandText = "Select DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s') as serverdt;";
                        using (MySqlDataReader Reader = command.ExecuteReader())
                        {
                            Reader.Read();

                            serverdate = Convert.ToDateTime(Reader["serverdt"]);
                            Reader.Close();
                            conn.Close();

                            return serverdate;
                        }

                    }
                }
            }
            else
            {

                DateTime serverdate;

                command.CommandText = "Select NOW() as serverdt;";

                using (MySqlDataReader Reader = command.ExecuteReader())
                {
                    Reader.Read();
                    serverdate = Convert.ToDateTime(Reader["serverdt"]);
                    Reader.Close();
                    return serverdate;
                }


            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.Message);
        }
    }

    private DateTime getServerDateGlobal(Boolean isOpenConnection, MySqlCommand mycommand)
    {

        try
        {
            //throw new Exception(isOpenConnection.ToString());
            if (!isOpenConnection)
            {
                using (MySqlConnection conn = dbconGlobal.getConnection())
                {
                    conn.Open();
                    using (MySqlCommand command = conn.CreateCommand())
                    {

                        DateTime serverdate;

                        command.CommandText = "Select NOW() as serverdt;";
                        using (MySqlDataReader Reader = command.ExecuteReader())
                        {
                            Reader.Read();

                            serverdate = Convert.ToDateTime(Reader["serverdt"]);
                            Reader.Close();
                            conn.Close();

                            return serverdate;
                        }

                    }
                }
            }
            else
            {

                DateTime serverdate;

                mycommand.CommandText = "Select NOW() as serverdt;";

                using (MySqlDataReader Reader = mycommand.ExecuteReader())
                {
                    Reader.Read();
                    serverdate = Convert.ToDateTime(Reader["serverdt"]);
                    Reader.Close();
                    return serverdate;
                }


            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.Message);
        }
    }

    [WebMethod]
    public State getStateGlobal(String Username, String Password)
    {
        if (!authenticate(Username, Password))
        {
            return new State { respcode = 7, message = getRespMessage(7) };
        }

        try
        {
            using (MySqlConnection con = dbconGlobal.getConnection())
            {
                try
                {
                    con.Open();
                    List<string> listofstates = new List<string>();
                    int x = 0;
                    using (command = con.CreateCommand())
                    {
                        command.CommandText = "select state from kpformsglobal.sysstate where isactive='1'";

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            if (reader.HasRows)
                            {
                                while (reader.Read())
                                {
                                    listofstates.Add(reader[x].ToString());
                                    x = x++;
                                }
                                reader.Close();
                                con.Close();
                                return new State { respcode = 1, message = getRespMessage(1), States = listofstates };

                            }
                            else
                            {
                                kplog.Error("No State found or not State not active.");
                                reader.Close();
                                con.Close();
                                return new State { respcode = 0, message = "No State found or not State not active." };

                            }
                        }
                    }
                }
                catch (MySqlException mex)
                {

                    kplog.Fatal(mex.ToString());
                    con.Close();
                    return new State { respcode = 0, message = mex.Message, ErrorDetail = mex.ToString() };
                }
            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return new State { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString() };
        }

    }

    //[WebMethod]
    //public MessagesResponse globalMessages(String Username, String Password, String type)
    //{
    //    try
    //    {
    //        using (MySqlConnection con = dbconGlobal.getConnection())
    //        {
    //            try
    //            {
    //                String[] messages = new String[2];
    //                con.Open();

    //                using (command = con.CreateCommand())
    //                {
    //                    command.CommandText = "Select message from kpforms.txtmessages where type = @type order by purpose";
    //                    command.Parameters.AddWithValue("type", type);
    //                    using (MySqlDataReader dataReader = command.ExecuteReader())
    //                    {
    //                        if (dataReader.HasRows)
    //                        {
    //                            int x = 0;
    //                            while (dataReader.Read())
    //                            {
    //                                messages[x] = dataReader["message"].ToString();
    //                                x = x + 1;
    //                            }
    //                            dataReader.Close();
    //                            con.Close();
    //                            return new MessagesResponse { respcode = 1, message = getRespMessage(1), txtmessage = messages };
    //                        }
    //                        else
    //                        {
    //                            dataReader.Close();
    //                            con.Close();
    //                            String warningmessage = "Type not found";
    //                            kplog.Error(warningmessage);
    //                            return new MessagesResponse { respcode = 0, message = warningmessage };
    //                        }

    //                    }
    //                }
    //            }
    //            catch (MySqlException mex)
    //            {
    //                kplog.Fatal(mex.ToString());
    //                con.Close();
    //                return new MessagesResponse { respcode = 0, message = mex.Message, ErrorDetail = mex.ToString() };
    //                //return 0;
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        kplog.Fatal(ex.ToString());
    //        return new MessagesResponse { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString() };
    //        //return 0;
    //    }
    //}

    [WebMethod]
    public MessagesResponse DomesticMessages(String Username, String Password, String type, String purpose)
    {
        try
        {
            using (MySqlConnection con = dbconDomestic.getConnection())
            {
                try
                {
                    String messages = "";
                    con.Open();

                    using (command = con.CreateCommand())
                    {
                        command.CommandText = "Select message from kpforms.txtmessages where type = @type and purpose=@purpose";
                        command.Parameters.AddWithValue("type", type);
                        command.Parameters.AddWithValue("purpose", purpose);
                        using (MySqlDataReader dataReader = command.ExecuteReader())
                        {
                            if (dataReader.HasRows)
                            {
                                dataReader.Read();
                                messages = dataReader["message"].ToString();
                                dataReader.Close();
                                con.Close();
                                return new MessagesResponse { respcode = 1, message = getRespMessage(1), txtmessage = messages };
                            }
                            else
                            {
                                dataReader.Close();
                                con.Close();
                                String warningmessage = "Type not found";
                                kplog.Error(warningmessage);
                                return new MessagesResponse { respcode = 0, message = warningmessage };
                            }

                        }
                    }
                }
                catch (MySqlException mex)
                {
                    kplog.Fatal(mex.ToString());
                    con.Close();
                    return new MessagesResponse { respcode = 0, message = mex.Message, ErrorDetail = mex.ToString() };
                    //return 0;
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return new MessagesResponse { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString() };
            //return 0;
        }
    }

    [WebMethod(BufferResponse = false, Description = "Method for searching Global Transactions")]
    public SearchResponse kptnSearchGlobalforpayout(String Username, String Password, String kptn, String kptn6, Decimal amount, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new SearchResponse { respcode = 7, message = getRespMessage(7) };
        }

        if (kptn6 != "")
        {
            if (kptn6.Substring(0, 3) == "MLK")
            {
                return (SearchResponse)kptnSearchGlobalforpayoutKIOSK(Username, Password, kptn, kptn6, amount, version, stationcode);
            }
            if (kptn6.Substring(0, 3) == "MCG")
            {
                try
                {
                    CloudService.SearchResponse resp = new CloudService.SearchResponse();
                    CloudService.MLhuillier client = new CloudService.MLhuillier();

                    resp = client.kptnSearchGlobalforpayout(Username, Password, kptn, kptn6, amount, version, stationcode);
                    var senderinfo = new SenderInfo();
                    var receiverinfo = new ReceiverInfo();
                    var sendoutinfo = new SendoutInfo();
                    if (resp.respcode == 1)
                    {
                        senderinfo = new SenderInfo
                        {
                            FirstName = resp.SenderInfo.FirstName,
                            LastName = resp.SenderInfo.LastName,
                            MiddleName = resp.SenderInfo.MiddleName,
                            SenderName = resp.SenderInfo.SenderName,
                            Street = resp.SenderInfo.Street,
                            ProvinceCity = resp.SenderInfo.ProvinceCity,
                            Country = resp.SenderInfo.Country,
                            Gender = resp.SenderInfo.Gender,
                            ContactNo = resp.SenderInfo.ContactNo,
                            IsSMS = resp.SenderInfo.IsSMS,
                            BranchID = resp.SenderInfo.BranchID,
                            SenderMLCardNo = resp.SenderInfo.SenderMLCardNo,
                            Birthdate = resp.SenderInfo.Birthdate
                        };

                        receiverinfo = new ReceiverInfo
                        {
                            FirstName = resp.ReceiverInfo.FirstName,
                            LastName = resp.ReceiverInfo.LastName,
                            MiddleName = resp.ReceiverInfo.MiddleName,
                            ReceiverName = resp.ReceiverInfo.ReceiverName,
                            Street = resp.ReceiverInfo.Street,
                            ProvinceCity = resp.ReceiverInfo.ProvinceCity,
                            Country = resp.ReceiverInfo.Country,
                            Gender = resp.ReceiverInfo.Gender,
                            ContactNo = resp.ReceiverInfo.ContactNo,
                            BirthDate = resp.ReceiverInfo.BirthDate,
                        };

                        sendoutinfo = new SendoutInfo
                        {
                            SendoutControlNo = resp.SendoutInfo.SendoutControlNo,
                            KPTNNo = resp.SendoutInfo.KPTNNo,
                            OperatorID = resp.SendoutInfo.OperatorID,
                            IsPassword = resp.SendoutInfo.IsPassword,
                            TransPassword = resp.SendoutInfo.TransPassword,
                            syscreated = resp.SendoutInfo.syscreated,
                            Currency = resp.SendoutInfo.Currency,
                            Principal = resp.SendoutInfo.Principal,
                            SenderIsSMS = resp.SendoutInfo.SenderIsSMS,
                            Relation = resp.SendoutInfo.Relation,
                            Message = resp.SendoutInfo.Message,
                            StationID = resp.SendoutInfo.StationID,
                            SourceOfFund = resp.SendoutInfo.SourceOfFund,
                            IDNo = resp.SendoutInfo.IDNo,
                            IDType = resp.SendoutInfo.IDType,
                            ExpiryDate = resp.SendoutInfo.ExpiryDate,
                            DormantCharge = resp.SendoutInfo.DormantCharge,
                            ORNo = resp.SendoutInfo.ORNo,
                            isSameAmount = resp.SendoutInfo.isSameAmount,
                            IsRemote = resp.SendoutInfo.IsRemote,
                            RemoteBranch = resp.SendoutInfo.RemoteBranch,
                            RemoteOperatorID = resp.SendoutInfo.RemoteOperatorID,
                            BranchCode = resp.SendoutInfo.BranchCode,
                            Charge = resp.SendoutInfo.Charge,
                            ZoneCode = resp.SendoutInfo.ZoneCode,
                            Purpose = resp.SendoutInfo.Purpose,
                            RemoteZone = resp.SendoutInfo.RemoteZone,
                            vat = resp.SendoutInfo.vat,
                            preferredcurrency = resp.SendoutInfo.preferredcurrency,
                            exchangerate = resp.SendoutInfo.exchangerate,
                            amountpo = resp.SendoutInfo.amountpo,
                            paytype = resp.SendoutInfo.paytype,
                            bankname = resp.SendoutInfo.bankname,
                            cardcheck = resp.SendoutInfo.cardcheck,
                            cardexp = resp.SendoutInfo.cardexp,
                            trnstype = resp.SendoutInfo.trnstype
                        };
                    }
                    kplog.Info(kptn6 + " - Cloud Response: " + resp.respcode + " | " + resp.message + " | " + resp.ErrorDetail);
                    return new SearchResponse { respcode = resp.respcode, message = resp.message, SenderInfo = senderinfo, ReceiverInfo = receiverinfo, SendoutInfo = sendoutinfo };
                }
                catch (Exception ex)
                {
                    kplog.Fatal(kptn6 + " - Cloud Catch: " + ex.ToString());
                    return new SearchResponse { respcode = 0, message = getRespMessage(0), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null, ErrorDetail = ex.ToString() };
                }
            }
        }

        if (decodeKPTNGlobal(0, kptn6) == "4" || (!istablevalid(decodeKPTNGlobal(0, kptn6))))
        {
            return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
        }

        using (MySqlConnection conn = dbconGlobal.getConnection())
        {
            //DateTime TransDate;
            try
            {
                conn.Open();

                using (command = conn.CreateCommand())
                {
                    List<object> a = new List<object>();

                    SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();

                    String query = "SELECT Purpose, ZoneCode, BranchCode, IsClaimed, IsCancelled , RemoteBranch, RemoteOperatorID,IsRemote, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, ORNo, Charge, RemoteZoneCode, vat, preferredcurrency, exchangerate, amountpo,paymenttype,bankname,cardcheckno,cardcheckexpdate,transtype FROM " + decodeKPTNGlobal(0, kptn6) + " WHERE KPTNNo = @kptn6;";



                    command.CommandText = query;
                    //command.Parameters.AddWithValue("kptn", kptn);
                    command.Parameters.AddWithValue("kptn6", kptn6);
                    using (MySqlDataReader dataReader = command.ExecuteReader())
                    {
                        if (dataReader.HasRows)
                        {
                            dataReader.Read();

                            string sFName = dataReader["SenderFname"].ToString();
                            string sLName = dataReader["SenderLname"].ToString();
                            string sMName = dataReader["SenderMName"].ToString();
                            string sSt = dataReader["SenderStreet"].ToString();
                            string sPCity = dataReader["SenderProvinceCity"].ToString();
                            string sCtry = dataReader["SenderCountry"].ToString();
                            string sG = dataReader["SenderGender"].ToString();
                            string sCNo = dataReader["SenderContactNo"].ToString();
                            Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                            string sBID = dataReader["SenderBranchID"].ToString();
                            //string sCustID = dataReader["CustID"].ToString();
                            string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                            string SenderName = dataReader["SenderName"].ToString();

                            string rFName = dataReader["ReceiverFname"].ToString();
                            string rLName = dataReader["ReceiverLname"].ToString();
                            string rMName = dataReader["ReceiverMName"].ToString();
                            string rSt = dataReader["ReceiverStreet"].ToString();
                            string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                            string rCtry = dataReader["ReceiverCountry"].ToString();
                            string rG = dataReader["ReceiverGender"].ToString();
                            string rCNo = dataReader["ReceiverContactNo"].ToString();
                            string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                            //string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                            string ReceiverName = dataReader["ReceiverName"].ToString();

                            string SendoutControlNo = dataReader["ControlNo"].ToString();
                            string KPTNNo = dataReader["KPTNNo"].ToString();
                            //string kptn4 = dataReader["kptn4"].ToString();
                            string OperatorID = dataReader["OperatorID"].ToString();
                            Boolean IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                            string TransPassword = dataReader["TransPassword"].ToString();
                            DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"]);
                            string Currency = dataReader["Currency"].ToString();
                            Decimal Principal = (Decimal)dataReader["Principal"];
                            //string SenderID = dataReader["CustID"].ToString();
                            Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string Relation = dataReader["Relation"].ToString();
                            string Message = dataReader["Message"].ToString();
                            string StationID = dataReader["StationID"].ToString();
                            string SourceOfFund = dataReader["Source"].ToString();
                            string IDType = dataReader["IDType"].ToString();
                            string IDNo = dataReader["IDNo"].ToString();
                            string ExpiryDate = dataReader["ExpiryDate"].ToString();
                            string ORNo = dataReader["ORNo"].ToString();
                            string RemoteBranch = dataReader["RemoteBranch"].ToString();
                            string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                            Boolean isSameAmount = false;
                            Boolean IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                            Boolean x = Convert.ToBoolean(dataReader["IsCancelled"]);
                            Boolean IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                            string bcode = dataReader["BranchCode"].ToString();
                            Decimal Charge = Convert.ToDecimal(dataReader["Charge"]);
                            Int32 zcode = Convert.ToInt32(dataReader["ZoneCode"]);
                            string purpose = dataReader["Purpose"].ToString();
                            Int32? remoteZone = dataReader["RemoteZoneCode"] == DBNull.Value ? 0 : Convert.ToInt32(dataReader["RemoteZoneCode"]);
                            double? vat = dataReader["vat"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["vat"]);
                            string precurrency = dataReader["preferredcurrency"].ToString();
                            double? xchangerate = dataReader["exchangerate"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["exchangerate"]);
                            double? amtpo = dataReader["amountpo"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["amountpo"]);
                            String paymenttype = dataReader["paymenttype"].ToString();
                            String bankname = dataReader["bankname"].ToString();
                            String cardcheckno = dataReader["cardcheckno"].ToString();
                            String cardexpdate = (dataReader["cardcheckexpdate"].ToString() == String.Empty || dataReader["cardcheckexpdate"].ToString().StartsWith("0")) ? null : DateTime.Parse(dataReader["cardcheckexpdate"].ToString()).ToString("yyyy-MM-dd");
                            String transtype = dataReader["transtype"].ToString();


                            if (Principal == amount)
                            {
                                isSameAmount = true;
                            }


                            if (x)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(8));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 8, message = getRespMessage(8), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            if (IsClaimed)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(3));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 3, message = getRespMessage(3), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            dataReader.Close();
                            //Decimal DormantCharge = CalculateDormantChargeGlobal(syscreated);
                            Decimal DormantCharge = 0.0M;
                            conn.Close();
                            SenderInfo si = new SenderInfo
                            {
                                FirstName = sFName,
                                LastName = sLName,
                                MiddleName = sMName,
                                SenderName = SenderName,
                                Street = sSt,
                                ProvinceCity = sPCity,
                                Country = sCtry,
                                Gender = sG,
                                ContactNo = sCNo,
                                IsSMS = sIsSM,
                                BranchID = sBID,
                                //CustID = sCustID,
                                SenderMLCardNo = sMLCardNo,
                                Birthdate = sBdate
                            };

                            ReceiverInfo ri = new ReceiverInfo
                            {
                                FirstName = rFName,
                                LastName = rLName,
                                MiddleName = rMName,
                                ReceiverName = ReceiverName,
                                Street = rSt,
                                ProvinceCity = rPCity,
                                Country = rCtry,
                                Gender = rG,
                                ContactNo = rCNo,
                                BirthDate = rBdate,
                                //MLCardNo = rMLCardNo
                            };

                            SendoutInfo soi = new SendoutInfo
                            {
                                SendoutControlNo = SendoutControlNo,
                                KPTNNo = KPTNNo,
                                OperatorID = OperatorID,
                                IsPassword = IsPassword,
                                TransPassword = TransPassword,
                                syscreated = syscreated,
                                Currency = Currency,
                                Principal = Principal,
                                //SenderID = SenderID,
                                SenderIsSMS = SenderIsSMS,
                                Relation = Relation,
                                Message = Message,
                                StationID = StationID,
                                SourceOfFund = SourceOfFund,
                                //kptn4 = kptn4,
                                IDNo = IDNo,
                                IDType = IDType,
                                ExpiryDate = ExpiryDate,
                                DormantCharge = DormantCharge,
                                ORNo = ORNo,
                                isSameAmount = isSameAmount,
                                IsRemote = IsRemote,
                                RemoteBranch = RemoteBranch,
                                RemoteOperatorID = RemoteOperatorID,
                                BranchCode = bcode,
                                Charge = Charge,
                                ZoneCode = zcode,
                                Purpose = purpose,
                                RemoteZone = remoteZone,
                                vat = vat,
                                preferredcurrency = precurrency,
                                exchangerate = xchangerate,
                                amountpo = amtpo,
                                paytype = paymenttype,
                                bankname = bankname,
                                cardcheck = cardcheckno,
                                cardexp = cardexpdate,
                                trnstype = transtype
                            };

                            return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                        }
                        else
                        {
                            kplog.Error(getRespMessage(4));
                            dataReader.Close();
                            conn.Close();
                            return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString(), ex);
                conn.Close();
                if (ex.Message.Equals("4"))
                {
                    kplog.Error(getRespMessage(4));
                    return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
                return new SearchResponse { respcode = 0, message = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
            }
        }
    }

    [WebMethod(BufferResponse = false, Description = "Method for searching Global Transactions")]
    public SearchResponse kptnSearchGlobal(String Username, String Password, String kptn, String kptn6, Decimal amount, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new SearchResponse { respcode = 7, message = getRespMessage(7) };
        }

        if (kptn6 != "")
        {
            if (kptn6.Substring(0, 3) == "MLK")
            {
                return (SearchResponse)kptnSearchGlobalKIOSK(Username, Password, kptn6, amount, version, stationcode);
            }
            if (kptn6.Substring(0, 3) == "MCG")
            {
                try
                {
                    CloudService.SearchResponse resp = new CloudService.SearchResponse();
                    CloudService.MLhuillier client = new CloudService.MLhuillier();

                    resp = client.kptnSearchGlobal(Username, Password, "", kptn6, amount, version, stationcode);
                    var senderinfo = new SenderInfo();
                    var receiverinfo = new ReceiverInfo();
                    var sendoutinfo = new SendoutInfo();
                    if (resp.respcode == 1)
                    {
                        senderinfo = new SenderInfo
                        {
                            Birthdate = resp.SenderInfo.Birthdate,
                            BranchID = resp.SenderInfo.BranchID,
                            ContactNo = resp.SenderInfo.ContactNo,
                            Country = resp.SenderInfo.Country,
                            FirstName = resp.SenderInfo.FirstName,
                            Gender = resp.SenderInfo.Gender,
                            IsSMS = resp.SenderInfo.IsSMS,
                            LastName = resp.SenderInfo.LastName,
                            MiddleName = resp.SenderInfo.MiddleName,
                            ProvinceCity = resp.SenderInfo.ProvinceCity,
                            SenderMLCardNo = resp.SenderInfo.SenderMLCardNo,
                            SenderName = resp.SenderInfo.SenderName
                        };

                        receiverinfo = new ReceiverInfo
                        {
                            BirthDate = resp.ReceiverInfo.BirthDate,
                            ContactNo = resp.ReceiverInfo.ContactNo,
                            Country = resp.ReceiverInfo.Country,
                            FirstName = resp.ReceiverInfo.FirstName,
                            Gender = resp.ReceiverInfo.Gender,
                            LastName = resp.ReceiverInfo.LastName,
                            MiddleName = resp.ReceiverInfo.MiddleName,
                            ProvinceCity = resp.ReceiverInfo.ProvinceCity,
                            ReceiverName = resp.ReceiverInfo.ReceiverName,
                            Street = resp.ReceiverInfo.Street
                        };

                        sendoutinfo = new SendoutInfo
                        {
                            SendoutControlNo = resp.SendoutInfo.SendoutControlNo,
                            KPTNNo = resp.SendoutInfo.KPTNNo,
                            OperatorID = resp.SendoutInfo.OperatorID,
                            IsPassword = resp.SendoutInfo.IsPassword,
                            TransPassword = resp.SendoutInfo.TransPassword,
                            syscreated = resp.SendoutInfo.syscreated,
                            Currency = resp.SendoutInfo.Currency,
                            Principal = resp.SendoutInfo.Principal,
                            SenderIsSMS = resp.SendoutInfo.SenderIsSMS,
                            Relation = resp.SendoutInfo.Relation,
                            Message = resp.SendoutInfo.Message,
                            StationID = resp.SendoutInfo.StationID,
                            SourceOfFund = resp.SendoutInfo.SourceOfFund,
                            IDNo = resp.SendoutInfo.IDNo,
                            IDType = resp.SendoutInfo.IDType,
                            ExpiryDate = resp.SendoutInfo.ExpiryDate,
                            DormantCharge = resp.SendoutInfo.DormantCharge,
                            ORNo = resp.SendoutInfo.ORNo,
                            isSameAmount = resp.SendoutInfo.isSameAmount,
                            IsRemote = resp.SendoutInfo.IsRemote,
                            RemoteBranch = resp.SendoutInfo.RemoteBranch,
                            RemoteOperatorID = resp.SendoutInfo.RemoteOperatorID,
                            BranchCode = resp.SendoutInfo.BranchCode,
                            Charge = resp.SendoutInfo.Charge,
                            ZoneCode = resp.SendoutInfo.ZoneCode,
                            Purpose = resp.SendoutInfo.Purpose,
                            RemoteZone = resp.SendoutInfo.RemoteZone,
                            vat = resp.SendoutInfo.vat,
                            preferredcurrency = resp.SendoutInfo.preferredcurrency,
                            exchangerate = resp.SendoutInfo.exchangerate,
                            amountpo = resp.SendoutInfo.amountpo,
                            paytype = resp.SendoutInfo.paytype,
                            bankname = resp.SendoutInfo.bankname,
                            cardcheck = resp.SendoutInfo.cardcheck,
                            cardexp = resp.SendoutInfo.cardexp,
                            trnstype = resp.SendoutInfo.trnstype
                        };
                    }
                    kplog.Info(kptn6 + " - Cloud Response: " + resp.respcode + " | " + resp.message + " | " + resp.ErrorDetail);
                    return new SearchResponse { respcode = resp.respcode, message = resp.message, SenderInfo = senderinfo, ReceiverInfo = receiverinfo, SendoutInfo = sendoutinfo };
                }
                catch (Exception ex)
                {
                    kplog.Fatal(kptn6 + " - Cloud Catch: " + ex.ToString());
                    return new SearchResponse { respcode = 0, message = getRespMessage(0), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null, ErrorDetail = ex.ToString() };
                }
            }
        }

        if (decodeKPTNGlobal(0, kptn6) == "4" || (!istablevalid(decodeKPTNGlobal(0, kptn6))))
        {
            return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
        }

        using (MySqlConnection conn = dbconGlobal.getConnection())
        {
            //DateTime TransDate;
            try
            {
                conn.Open();

                using (command = conn.CreateCommand())
                {
                    List<object> a = new List<object>();

                    SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();

                    String query = "SELECT Purpose, ZoneCode, BranchCode, IsClaimed, IsCancelled , RemoteBranch, RemoteOperatorID,IsRemote, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, ORNo, Charge, RemoteZoneCode, vat, preferredcurrency, exchangerate, amountpo,paymenttype,bankname,cardcheckno,cardcheckexpdate,transtype FROM " + decodeKPTNGlobal(0, kptn6) + " WHERE KPTNNo = @kptn6 AND zonecode!=3;";



                    command.CommandText = query;
                    //command.Parameters.AddWithValue("kptn", kptn);
                    command.Parameters.AddWithValue("kptn6", kptn6);
                    using (MySqlDataReader dataReader = command.ExecuteReader())
                    {
                        if (dataReader.HasRows)
                        {
                            dataReader.Read();

                            string sFName = dataReader["SenderFname"].ToString();
                            string sLName = dataReader["SenderLname"].ToString();
                            string sMName = dataReader["SenderMName"].ToString();
                            string sSt = dataReader["SenderStreet"].ToString();
                            string sPCity = dataReader["SenderProvinceCity"].ToString();
                            string sCtry = dataReader["SenderCountry"].ToString();
                            string sG = dataReader["SenderGender"].ToString();
                            string sCNo = dataReader["SenderContactNo"].ToString();
                            Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                            string sBID = dataReader["SenderBranchID"].ToString();
                            //string sCustID = dataReader["CustID"].ToString();
                            string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                            string SenderName = dataReader["SenderName"].ToString();

                            string rFName = dataReader["ReceiverFname"].ToString();
                            string rLName = dataReader["ReceiverLname"].ToString();
                            string rMName = dataReader["ReceiverMName"].ToString();
                            string rSt = dataReader["ReceiverStreet"].ToString();
                            string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                            string rCtry = dataReader["ReceiverCountry"].ToString();
                            string rG = dataReader["ReceiverGender"].ToString();
                            string rCNo = dataReader["ReceiverContactNo"].ToString();
                            string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                            //string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                            string ReceiverName = dataReader["ReceiverName"].ToString();

                            string SendoutControlNo = dataReader["ControlNo"].ToString();
                            string KPTNNo = dataReader["KPTNNo"].ToString();
                            //string kptn4 = dataReader["kptn4"].ToString();
                            string OperatorID = dataReader["OperatorID"].ToString();
                            Boolean IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                            string TransPassword = dataReader["TransPassword"].ToString();
                            DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"]);
                            string Currency = dataReader["Currency"].ToString();
                            Decimal Principal = (Decimal)dataReader["Principal"];
                            //string SenderID = dataReader["CustID"].ToString();
                            Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string Relation = dataReader["Relation"].ToString();
                            string Message = dataReader["Message"].ToString();
                            string StationID = dataReader["StationID"].ToString();
                            string SourceOfFund = dataReader["Source"].ToString();
                            string IDType = dataReader["IDType"].ToString();
                            string IDNo = dataReader["IDNo"].ToString();
                            string ExpiryDate = dataReader["ExpiryDate"].ToString();
                            string ORNo = dataReader["ORNo"].ToString();
                            string RemoteBranch = dataReader["RemoteBranch"].ToString();
                            string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                            Boolean isSameAmount = false;
                            Boolean IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                            Boolean x = Convert.ToBoolean(dataReader["IsCancelled"]);
                            Boolean IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                            string bcode = dataReader["BranchCode"].ToString();
                            Decimal Charge = Convert.ToDecimal(dataReader["Charge"]);
                            Int32 zcode = Convert.ToInt32(dataReader["ZoneCode"]);
                            string purpose = dataReader["Purpose"].ToString();
                            Int32? remoteZone = dataReader["RemoteZoneCode"] == DBNull.Value ? 0 : Convert.ToInt32(dataReader["RemoteZoneCode"]);
                            double? vat = dataReader["vat"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["vat"]);
                            string precurrency = dataReader["preferredcurrency"].ToString();
                            double? xchangerate = dataReader["exchangerate"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["exchangerate"]);
                            double? amtpo = dataReader["amountpo"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["amountpo"]);
                            String paymenttype = dataReader["paymenttype"].ToString();
                            String bankname = dataReader["bankname"].ToString();
                            String cardcheckno = dataReader["cardcheckno"].ToString();
                            String cardexpdate = (dataReader["cardcheckexpdate"].ToString() == String.Empty || dataReader["cardcheckexpdate"].ToString().StartsWith("0")) ? null : DateTime.Parse(dataReader["cardcheckexpdate"].ToString()).ToString("yyyy-MM-dd");
                            String transtype = dataReader["transtype"].ToString();


                            if (Principal == amount)
                            {
                                isSameAmount = true;
                            }


                            if (x)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(8));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 8, message = getRespMessage(8), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            if (IsClaimed)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(3));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 3, message = getRespMessage(3), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            dataReader.Close();
                            //Decimal DormantCharge = CalculateDormantChargeGlobal(syscreated);
                            Decimal DormantCharge = 0.0M;
                            conn.Close();
                            SenderInfo si = new SenderInfo
                            {
                                FirstName = sFName,
                                LastName = sLName,
                                MiddleName = sMName,
                                SenderName = SenderName,
                                Street = sSt,
                                ProvinceCity = sPCity,
                                Country = sCtry,
                                Gender = sG,
                                ContactNo = sCNo,
                                IsSMS = sIsSM,
                                BranchID = sBID,
                                //CustID = sCustID,
                                SenderMLCardNo = sMLCardNo,
                                Birthdate = sBdate
                            };

                            ReceiverInfo ri = new ReceiverInfo
                            {
                                FirstName = rFName,
                                LastName = rLName,
                                MiddleName = rMName,
                                ReceiverName = ReceiverName,
                                Street = rSt,
                                ProvinceCity = rPCity,
                                Country = rCtry,
                                Gender = rG,
                                ContactNo = rCNo,
                                BirthDate = rBdate,
                                //MLCardNo = rMLCardNo
                            };

                            SendoutInfo soi = new SendoutInfo
                            {
                                SendoutControlNo = SendoutControlNo,
                                KPTNNo = KPTNNo,
                                OperatorID = OperatorID,
                                IsPassword = IsPassword,
                                TransPassword = TransPassword,
                                syscreated = syscreated,
                                Currency = Currency,
                                Principal = Principal,
                                //SenderID = SenderID,
                                SenderIsSMS = SenderIsSMS,
                                Relation = Relation,
                                Message = Message,
                                StationID = StationID,
                                SourceOfFund = SourceOfFund,
                                //kptn4 = kptn4,
                                IDNo = IDNo,
                                IDType = IDType,
                                ExpiryDate = ExpiryDate,
                                DormantCharge = DormantCharge,
                                ORNo = ORNo,
                                isSameAmount = isSameAmount,
                                IsRemote = IsRemote,
                                RemoteBranch = RemoteBranch,
                                RemoteOperatorID = RemoteOperatorID,
                                BranchCode = bcode,
                                Charge = Charge,
                                ZoneCode = zcode,
                                Purpose = purpose,
                                RemoteZone = remoteZone,
                                vat = vat,
                                preferredcurrency = precurrency,
                                exchangerate = xchangerate,
                                amountpo = amtpo,
                                paytype = paymenttype,
                                bankname = bankname,
                                cardcheck = cardcheckno,
                                cardexp = cardexpdate,
                                trnstype = transtype
                            };
                            kplog.Info(kptn6 + " - Search Success");
                            return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                        }
                        else
                        {
                            kplog.Error(kptn6 + " - " + getRespMessage(4));
                            dataReader.Close();
                            conn.Close();
                            return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(kptn6 + " - " + ex.ToString(), ex);
                conn.Close();
                if (ex.Message.Equals("4"))
                {
                    kplog.Error(kptn6 + " - " + getRespMessage(4));
                    return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
                return new SearchResponse { respcode = 0, message = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
            }
        }
    }

    //[WebMethod(BufferResponse = false)]
    //public CustomerResultResponse thresholdmonitoring(string Username, string Password, string firstname, string lastname, string middlename, double amount)
    //{
    //    if (!authenticate(Username, Password))
    //    {
    //        return new CustomerResultResponse { respcode = 0, message = getRespMessage(7) };
    //    }
    //    try
    //    {
    //        using (MySqlConnection custconn = custconGlobal.getConnection())
    //        {
    //            try
    //            {
    //                custconn.Open();
    //                using (custcommand = custconn.CreateCommand())
    //                {
    //                    String query = "select thresholdstart, thresholdend, totalamount from kpcustomersglobal.customers where firstname=@firstname and lastname=@lastname and middlename=@middlename";
    //                    custcommand.CommandText = query;
    //                    custcommand.Parameters.Clear();
    //                    custcommand.Parameters.AddWithValue("firstname", firstname);
    //                    custcommand.Parameters.AddWithValue("lastname", lastname);
    //                    custcommand.Parameters.AddWithValue("middlename", middlename);
    //                    DateTime startdate;
    //                    DateTime enddate;
    //                    Double currentamount;
    //                    using (MySqlDataReader Reader = custcommand.ExecuteReader())
    //                    {
    //                        if (Reader.Read())
    //                        {
    //                            startdate = Convert.ToDateTime(Reader["thresholdstart"].ToString());
    //                            enddate = Convert.ToDateTime(Reader["thresholdend"].ToString());
    //                            currentamount = Convert.ToDouble(Reader["totalamount"].ToString());

    //                            if (currentamount == 0)
    //                            {
    //                                String updatecusttresholding = "update kpcustomersglobal.customers set ThresholdStart=now() and ThresholdEnd=(DATE_ADD(now(), INTERVAL 30 DAY)) and TotalAmount=@ttlamt where FirstName=@sfname and LastName=@slname and MiddleName=@smname";
    //                                custcommand.CommandText = updatecusttresholding;
    //                                custcommand.Parameters.Clear();
    //                                custcommand.Parameters.AddWithValue("sfname", firstname);
    //                                custcommand.Parameters.AddWithValue("slname", lastname);
    //                                custcommand.Parameters.AddWithValue("smname", middlename);
    //                                custcommand.Parameters.AddWithValue("ttlamt", amount);
    //                                custcommand.ExecuteNonQuery();
    //                            }
    //                            else
    //                            {
    //                                if (enddate > startdate)
    //                                {
    //                                    currentamount = currentamount + amount;

    //                                    String updatecusttresholding = "update kpcustomersglobal.customers set TotalAmount=@ttlamt where FirstName=@sfname and LastName=@slname and MiddleName=@smname";
    //                                    custcommand.CommandText = updatecusttresholding;
    //                                    custcommand.Parameters.Clear();
    //                                    custcommand.Parameters.AddWithValue("sfname", firstname);
    //                                    custcommand.Parameters.AddWithValue("slname", lastname);
    //                                    custcommand.Parameters.AddWithValue("smname", middlename);
    //                                    custcommand.Parameters.AddWithValue("ttlamt", currentamount);
    //                                    custcommand.ExecuteNonQuery();
    //                                }
    //                                else
    //                                {
    //                                    String getrangeamount = "Select Message from kpformsglobal.thresholdingcharges where ('" + currentamount + "' BETWEEN Range1 and Range2) and range1 >= 2000.00";
    //                                    custcommand.CommandText = getrangeamount;
    //                                    MySqlDataReader Rdramount = custcommand.ExecuteReader();
    //                                    if (Rdramount.Read())
    //                                    {
    //                                        String msg = Rdramount["Message"].ToString();
    //                                        Rdramount.Close();

    //                                        String updatecusttresholdingreset = "update kpcustomersglobal.customers set ThresholdStart=null and ThresholdEnd=null and TotalAmount=0 where FirstName=@sfname and LastName=@slname and MiddleName=@smname";
    //                                        custcommand.CommandText = updatecusttresholdingreset;
    //                                        custcommand.Parameters.Clear();
    //                                        custcommand.Parameters.AddWithValue("sfname", firstname);
    //                                        custcommand.Parameters.AddWithValue("slname", lastname);
    //                                        custcommand.Parameters.AddWithValue("smname", middlename);
    //                                        custcommand.ExecuteNonQuery();



    //                                        custconn.Close();
    //                                        return new CustomerResultResponse { respcode = 0, message = "Need " + msg };
    //                                    }
    //                                    else
    //                                    {
    //                                        String updatecusttresholdingreset = "update kpcustomersglobal.customers set ThresholdStart=null and ThresholdEnd=null and TotalAmount=0 where FirstName=@sfname and LastName=@slname and MiddleName=@smname";
    //                                        custcommand.CommandText = updatecusttresholdingreset;
    //                                        custcommand.Parameters.Clear();
    //                                        custcommand.Parameters.AddWithValue("sfname", firstname);
    //                                        custcommand.Parameters.AddWithValue("slname", lastname);
    //                                        custcommand.Parameters.AddWithValue("smname", middlename);
    //                                        custcommand.ExecuteNonQuery();

    //                                        return new CustomerResultResponse { respcode = 1, message = getRespMessage(1)};
    //                                    }
    //                                }
    //                            }
    //                        }
    //                        else
    //                        {
    //                            kplog.Error("Customer Not Found");
    //                            ReaderCount.Close();
    //                            custconn.Close();
    //                            return new CustomerResultResponse { respcode = 0, message = "No record found for the customer" };
    //                        }
    //                        Reader.Close();
    //                    }

    //                }

    //            }
    //            catch (MySqlException ex)
    //            {
    //                kplog.Fatal(ex.ToString());
    //                custconn.Close();
    //                return new CustomerResultResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), Data = null };
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        kplog.Fatal(ex.ToString());
    //        custconGlobal.CloseConnection();
    //        return new CustomerResultResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), Data = null };
    //    }

    //}

    [WebMethod(BufferResponse = false)]
    public CustomerResultResponse mlcardSearchGlobal(String Username, String Password, String mlcard, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new CustomerResultResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new CustomerResultResponse { respcode = 10, message = getRespMessage(10) };
        //}
        try
        {
            using (MySqlConnection custconn = custconDomestic.getConnection())
            {
                try
                {
                    custconn.Open();
                    using (custcommand = custconn.CreateCommand())
                    {
                        //int counter = 0;
                        //String query = "SELECT c.FirstName, c.LastName, c.MiddleName, c.Street, c.ProvinceCity, c.Birthdate, c.Country,c.ExpiryDate, c.Gender,c.IDNo,c.IDType,c.CustID, c.PhoneNo, c.Mobile,c.Email ,cc.CardNo,cc.CardNo FROM kpcustomersglobal.customers c INNER JOIN kpcustomersglobal.customercard cc ON c.CustID = cc.CustID WHERE cc.CardNo = @mlcard LIMIT 1;";
                        String query = "SELECT c.FirstName, c.LastName, c.MiddleName, c.Street, c.ProvinceCity, c.Birthdate, c.Country,c.ExpiryDate, c.Gender,c.IDNo,c.IDType,c.CustID, c.PhoneNo, c.Mobile,c.Email ,c.CardNo FROM kpcustomers.customers c WHERE c.CardNo = @mlcard LIMIT 1;";
                        custcommand.CommandText = query;
                        custcommand.Parameters.AddWithValue("mlcard", mlcard);

                        //CustArrayResponse b = new CustArrayResponse();
                        using (MySqlDataReader ReaderCount = custcommand.ExecuteReader())
                        {
                            if (ReaderCount.Read())
                            {
                                CustomerSearchResponse csr = new CustomerSearchResponse { FirstName = ReaderCount["FirstName"].ToString(), LastName = ReaderCount["LastName"].ToString(), MiddleName = ReaderCount["MiddleName"].ToString(), Street = ReaderCount["Street"].ToString(), ProvinceCity = ReaderCount["ProvinceCity"].ToString(), MLCardNo = ReaderCount["CardNo"].ToString(), BirthDate = Convert.ToDateTime(ReaderCount["Birthdate"].ToString()).ToString("yyyy-MM-dd"), ContactNo = ReaderCount["Mobile"].ToString(), Country = ReaderCount["Country"].ToString(), ExpiryDate = (ReaderCount["ExpiryDate"].Equals(DBNull.Value)) ? ReaderCount["ExpiryDate"].ToString() : Convert.ToDateTime(ReaderCount["ExpiryDate"]).ToString("yyyy-MM-dd"), Gender = ReaderCount["Gender"].ToString(), IDNo = ReaderCount["IDNo"].ToString(), IDType = ReaderCount["IDType"].ToString(), CustID = ReaderCount["CustID"].ToString() };
                                ReaderCount.Close();
                                custconn.Close();
                                custconDomestic.CloseConnection();
                                kplog.Info(mlcard + " - Search Success");
                                return new CustomerResultResponse { respcode = 1, message = getRespMessage(1), CustomerData = csr };
                            }
                            else
                            {
                                kplog.Error(mlcard + " - " + getRespMessage(5));
                                ReaderCount.Close();
                                custconn.Close();
                                custconDomestic.CloseConnection();
                                return new CustomerResultResponse { respcode = 5, message = getRespMessage(5) };
                            }
                        }
                    }

                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(mlcard + " - " + ex.ToString());
                    custconn.Close();
                    custconDomestic.CloseConnection();
                    return new CustomerResultResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), Data = null };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(mlcard + " - " + ex.ToString());
            custconDomestic.CloseConnection();
            return new CustomerResultResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), Data = null };
        }

    }

    [WebMethod(BufferResponse = false)]
    public PayoutResponse payoutGlobal(String Username, String Password, String ControlNo, String KPTNNo, String OperatorID, String Station, int IsRemote, String RemoteBranch, String RemoteOperatorID, String Reason, String SOBranch, String SOControlNo, String SOOperator, String Currency, Double Principal, String SenderID, String ReceiverID, String Relation, String IDType, String IDNo, String ExpiryDate, String SODate, int sysmodifier, String BranchCode, String series, String ZoneCode, Int32 type, Double balance, Double DormantCharge, String senderid, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderContactNo, int SenderIsSMS, String SenderBirthdate, String SenderBranchID, String ReceiverMLCardNO, String ReceiverFName, String ReceiverLName, String ReceiverMName, String ReceiverStreet, String ReceiverProvinceCity, String ReceiverCountry, String ReceiverGender, String ReceiverContactNo, String ReceiverBirthdate, String ORNo, Double ServiceCharge, Double version, String stationcode, Int32 remotezone, String RemoteBranchCode, String POBranchName, double vat, int syscreator, string preferredcurrency, double amountpo, double exchangerate)
    {
        try
        {
            if (Station.ToString().Equals("0"))
            {
                kplog.Fatal(getRespMessage(13));
                return new PayoutResponse { respcode = 10, message = getRespMessage(13) };
            }
            if (!authenticate(Username, Password))
            {
                return new PayoutResponse { respcode = 7, message = getRespMessage(7) };
            }

            if (KPTNNo != "")
            {
                if (KPTNNo.Substring(0, 3) == "MLK")
                {
                    return (PayoutResponse)payoutGlobalKIOSK(Username, Password, ControlNo, KPTNNo, OperatorID, Station, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator, Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, SODate, sysmodifier, BranchCode, series, ZoneCode, type, balance, DormantCharge, senderid, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS, SenderBirthdate, SenderBranchID, ReceiverMLCardNO, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ORNo, ServiceCharge, version, stationcode, remotezone, RemoteBranchCode, POBranchName, vat, syscreator, preferredcurrency, amountpo, exchangerate);
                }
                if (KPTNNo.Substring(0, 3) == "MCG")
                {
                    try
                    {
                        CloudService.PayoutResponse resp = new CloudService.PayoutResponse();
                        CloudService.MLhuillier client = new CloudService.MLhuillier();

                        resp = client.payoutGlobal(Username, Password, ControlNo, KPTNNo, OperatorID, Station, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator, Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, SODate, sysmodifier, BranchCode, series, ZoneCode, type, balance, DormantCharge, senderid, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS, SenderBirthdate, SenderBranchID, ReceiverMLCardNO, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ORNo, ServiceCharge, version, stationcode, remotezone, RemoteBranchCode, POBranchName, vat, syscreator, preferredcurrency, amountpo, exchangerate);
                        kplog.Info(KPTNNo + " - Cloud Response: " + resp.message + " | " + resp.ErrorDetail);
                        return new PayoutResponse { respcode = resp.respcode, message = resp.message, ErrorDetail = resp.ErrorDetail, DateClaimed = resp.DateClaimed };
                    }
                    catch (Exception ex)
                    {
                        kplog.Fatal(KPTNNo + " - Cloud catch: " + ex.ToString());
                        return new PayoutResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
                    }
                }
            }

            if (decodeKPTNGlobal(0, KPTNNo) == "4" || (!istablevalid(decodeKPTNGlobal(0, KPTNNo))))
            {
                kplog.Error(KPTNNo + " - Invalid KPTN number");
                return new PayoutResponse { respcode = 0, message = "Invalid KPTN number" };
            }
           
            PayoutResponse check = new PayoutResponse();
            check = checkifallowPO(BranchCode, Convert.ToInt32(ZoneCode), KPTNNo, ReceiverFName + " " + ReceiverMName + " " + ReceiverLName, SenderFName + " " + SenderMName + " " + SenderLName, Currency, Convert.ToDecimal(Principal), OperatorID, true);
            if (check.respcode == 3)
                return new PayoutResponse { respcode = 0, message = check.message };

            int sr = ConvertSeries(series);
            dt = getServerDateGlobal(false);
            // bool iscontrolduplicate = false;

            using (MySqlConnection checkinglang = dbconGlobal.getConnection())
            {
                checkinglang.Open();

                //    Int32 maxontrans = 0;
                try
                {
                    //  MySqlCommand cmdchecking = new MySqlCommand();
                    using (command = checkinglang.CreateCommand())
                    {
                        String checkiftagasclaimed = "Select kptnno from " + generateTableNameGlobal(0, null) + " where kptnno=@kptn and isclaimed='1' and (sysmodified is not null or sysmodified!='' or sysmodified='0000-00-00 00:00:00')";
                        command.CommandTimeout = 0;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.CommandText = checkiftagasclaimed;
                        MySqlDataReader iftagisclaimeddr = command.ExecuteReader();
                        if (iftagisclaimeddr.HasRows)
                        {
                            iftagisclaimeddr.Close();
                            return new PayoutResponse { respcode = 0, message = "Transaction already claimed." };
                        }
                        iftagisclaimeddr.Close();

                        String mm = string.Empty;
                        String xmm = string.Empty;
                        MySqlDataReader isclaimeddr;
                        for (int x = 1; x < 12; x++)
                        {
                            mm = Convert.ToString(x);
                            xmm = mm.PadLeft(2, '0');
                            String checkifisclaimed = "Select kptnno,ClaimedDate from kptransactionsglobal.payout" + xmm + " where kptnno=@kptn";
                            command.CommandTimeout = 0;
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("kptn", KPTNNo);
                            command.CommandText = checkifisclaimed;
                            isclaimeddr = command.ExecuteReader();
                            if (isclaimeddr.HasRows)
                            {
                                isclaimeddr.Read();
                                DateTime cdate = Convert.ToDateTime(isclaimeddr["ClaimedDate"]);
                                isclaimeddr.Close();
                                String checkifisPOcancelled = "select kptnno from kptransactionsglobal.payout" + xmm + " where oldkptnno=@kptn and ClaimedDate=@cdate ORDER BY cancelleddate DESC limit 1";
                                command.Parameters.Clear();
                                command.Parameters.AddWithValue("cdate", cdate);
                                command.Parameters.AddWithValue("kptn", KPTNNo);
                                command.CommandText = checkifisPOcancelled;
                                MySqlDataReader iscancelleddr = command.ExecuteReader();
                                if (!iscancelleddr.HasRows)
                                {
                                    iscancelleddr.Close();
                                    kplog.Info(KPTNNo + " - Transaction already claimed");
                                    return new PayoutResponse { respcode = 0, message = "Transaction already claimed." };
                                }
                                iscancelleddr.Close();

                            }
                            isclaimeddr.Close();
                        }

                        string checkifcontrolexist = "select controlno from " + generateTableNameGlobal(1, null) + " where controlno=@controlno";
                        command.CommandTimeout = 0;
                        command.CommandText = checkifcontrolexist;
                        command.Parameters.AddWithValue("controlno", ControlNo);
                        MySqlDataReader controlexistreader = command.ExecuteReader();
                        if (controlexistreader.HasRows)
                        {
                            controlexistreader.Close();

                            // string getcontrolmax = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max from " + generateTableNameGlobal(1, null) + " where if(isremote=1,remotebranch,branchcode) = @branchcode and stationid = @stationid and if(remotezonecode=0 or remotezonecode is null, zonecode,remotezonecode) =@zonecode";
                            string query101 = string.Empty;
                            string branchcode101 = string.Empty;
                            string zonecode101 = string.Empty;
                            string stationnum = string.Empty;
                            if (remotezone == 0)
                                zonecode101 = ZoneCode;
                            else
                                zonecode101 = remotezone.ToString();


                            if (IsRemote == 1)
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameGlobal(1, null) + " where remotebranch = @branchcode and stationid = @stationid and remotezonecode =@zonecode";
                                branchcode101 = RemoteBranch;
                                stationnum = "01";
                            }
                            else
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameGlobal(1, null) + " where branchcode = @branchcode and stationid = @stationid and zonecode=@zonecode";
                                branchcode101 = BranchCode;
                                stationnum = Station;
                            }
                            command.CommandText = query101;
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("branchcode", branchcode101);
                            command.Parameters.AddWithValue("stationid", Station);
                            command.Parameters.AddWithValue("zonecode", zonecode101);

                            MySqlDataReader controlmaxreader = command.ExecuteReader();
                            if (controlmaxreader.Read())
                            {
                                sr = Convert.ToInt32(controlmaxreader["max1"].ToString()) + 1;

                                //controlmaxreader.Close();
                            }
                            controlmaxreader.Close();

                            command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();

                            string st1 = IsRemote == 1 ? "01" : Station;
                            string bcode1 = IsRemote == 1 ? RemoteBranch : BranchCode;
                            Int32 rmotezone = remotezone == 0 ? Convert.ToInt32(ZoneCode) : remotezone;
                            // sting type1 = type

                            command.Parameters.AddWithValue("st", stationnum);
                            command.Parameters.AddWithValue("bcode", branchcode101);
                            command.Parameters.AddWithValue("series", sr);
                            command.Parameters.AddWithValue("zcode", zonecode101);
                            command.Parameters.AddWithValue("tp", type);
                            int abc101 = command.ExecuteNonQuery();

                            //command.Dispose();
                            checkinglang.Close();
                            dbconGlobal.CloseConnection();
                            kplog.Error(KPTNNo + " - " + ControlNo + " - Problem saving transaction. Please close the sendout window and try again.");
                            return new PayoutResponse { respcode = 101, message = "Problem saving transaction. Please close the payout window and try again." };
                        }
                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(KPTNNo + " - " + ex.ToString());
                    checkinglang.Close();
                    dbconGlobal.CloseConnection();
                    return new PayoutResponse { respcode = 0, message = "Problem saving transaction. Please close the payout window and try again.", ErrorDetail = ex.ToString() };
                }
                checkinglang.Close();
                dbconGlobal.CloseConnection();
            }
            //
            //end of trapping for duplicate control
            //

            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                try
                {

                    conn.Open();
                    // int sr = ConvertSeries(series);
                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (command = conn.CreateCommand())
                    {
                        command.CommandText = "SET autocommit = 0;";
                        command.ExecuteNonQuery();
                        //save_payout
                        command.Transaction = trans;
                        // dt = getServerDateGlobal(true);
                        String sBdate = (SenderBirthdate == String.Empty) ? null : Convert.ToDateTime(SenderBirthdate).ToString("yyyy-MM-dd");
                        String rBdate = (ReceiverBirthdate == String.Empty) ? null : Convert.ToDateTime(ReceiverBirthdate).ToString("yyyy-MM-dd");
                        String xPiry = (ExpiryDate == String.Empty) ? null : Convert.ToDateTime(ExpiryDate).ToString("yyyy-MM-dd");
                        //String insert = "Insert into "+ generateTableName(1) +" (ControlNo, KPTNNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator,  Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, ClaimedDate, SODate, syscreated, BranchCode, ZoneCode, Balance, DormantCharge) values (@ControlNo, @KPTNNo, @OperatorID, @StationID, @IsRemote, @RemoteBranch, @RemoteOperatorID, @Reason, @SOBranch, @SOControlNo, @SOOperator, @Currency, @Principal, @SenderID, @ReceiverID, @Relation, @IDType, @IDNo, @ExpiryDate, @ClaimedDate, @SODate, @syscreated, @BranchCode, @ZoneCode, @Balance, @DormantCharge)";
                        String month = dt.ToString("MM");
                        String tblorig = "payout" + dt.ToString("MM") + dt.ToString("dd");
                        String insert = "Insert into " + generateTableNameGlobal(1, null) + " (ControlNo, KPTNNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator,  Currency, Principal, Relation, IDType, IDNo, ExpiryDate, ClaimedDate, SODate, syscreated, BranchCode, ZoneCode, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS, SenderBirthdate, SenderBranchID, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, SOORNo, ServiceCharge, RemoteZoneCode,syscreator,preferredpo,amountpo,exchangerate,transtype) values (@ControlNo, @KPTNNo, @OperatorID, @StationID, @IsRemote, @RemoteBranch, @RemoteOperatorID, @Reason, @SOBranch, @SOControlNo, @SOOperator, @Currency, @Principal, @Relation, @IDType, @IDNo, @ExpiryDate, @claimeddateP, @SODate, @syscreated, @BranchCode, @ZoneCode, @SenderMLCardNO, @SenderFName, @SenderLName, @SenderMName, @SenderName, @SenderStreet, @SenderProvinceCity, @SenderCountry, @SenderGender, @SenderContactNo, @SenderIsSMS, @SenderBirthdate, @SenderBranchID, @ReceiverFName, @ReceiverLName, @ReceiverMName, @ReceiverName, @ReceiverStreet, @ReceiverProvinceCity, @ReceiverCountry, @ReceiverGender, @ReceiverContactNo, @ReceiverBirthdate, @SOORNo, @ServiceCharge, @remotezone, @syscreator,@pocurrency1,@poamount1,@exchangerate1,@transtype)";
                        command.CommandText = insert;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("ControlNo", ControlNo);
                        command.Parameters.AddWithValue("KPTNNo", KPTNNo);
                        command.Parameters.AddWithValue("OperatorID", OperatorID);
                        command.Parameters.AddWithValue("StationID", Station);
                        command.Parameters.AddWithValue("IsRemote", IsRemote);
                        command.Parameters.AddWithValue("RemoteBranch", RemoteBranch);
                        command.Parameters.AddWithValue("RemoteOperatorID", RemoteOperatorID);
                        command.Parameters.AddWithValue("Reason", Reason);
                        command.Parameters.AddWithValue("SOBranch", SOBranch);
                        command.Parameters.AddWithValue("SOControlNo", SOControlNo);
                        command.Parameters.AddWithValue("SOOperator", SOOperator);
                        command.Parameters.AddWithValue("Currency", Currency);
                        command.Parameters.AddWithValue("Principal", Principal);
                        //command.Parameters.AddWithValue("SenderID", SenderID);
                        //command.Parameters.AddWithValue("ReceiverID", ReceiverID);
                        command.Parameters.AddWithValue("Relation", Relation);
                        command.Parameters.AddWithValue("IDType", IDType);
                        command.Parameters.AddWithValue("IDNo", IDNo);
                        command.Parameters.AddWithValue("ExpiryDate", (xPiry == String.Empty) ? null : xPiry);
                        //command.Parameters.AddWithValue("ClaimedDate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("SODate", Convert.ToDateTime(SODate).ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreator", syscreator);
                        command.Parameters.AddWithValue("BranchCode", BranchCode);
                        command.Parameters.AddWithValue("ZoneCode", ZoneCode);
                        command.Parameters.AddWithValue("Balance", balance);
                        command.Parameters.AddWithValue("DormantCharge", DormantCharge);
                        //command.Parameters.AddWithValue("CustID", senderid);
                        command.Parameters.AddWithValue("SenderMLCardNO", SenderMLCardNO);
                        command.Parameters.AddWithValue("SenderFName", SenderFName);
                        command.Parameters.AddWithValue("SenderLName", SenderLName);
                        command.Parameters.AddWithValue("SenderMName", SenderMName);
                        command.Parameters.AddWithValue("SenderName", SenderLName + ", " + SenderFName + " " + SenderMName);
                        command.Parameters.AddWithValue("SenderStreet", SenderStreet);
                        command.Parameters.AddWithValue("SenderProvinceCity", SenderProvinceCity);
                        command.Parameters.AddWithValue("SenderCountry", SenderCountry);
                        command.Parameters.AddWithValue("SenderGender", SenderGender);
                        command.Parameters.AddWithValue("SenderContactNo", SenderContactNo);
                        command.Parameters.AddWithValue("SenderIsSMS", SenderIsSMS);
                        command.Parameters.AddWithValue("SenderBirthdate", sBdate);
                        command.Parameters.AddWithValue("SenderBranchID", SenderBranchID);
                        //command.Parameters.AddWithValue("ReceiverMLCardNO", ReceiverMLCardNO);
                        command.Parameters.AddWithValue("ReceiverFName", ReceiverFName);
                        command.Parameters.AddWithValue("ReceiverLName", ReceiverLName);
                        command.Parameters.AddWithValue("ReceiverMName", ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverName", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverStreet", ReceiverStreet);
                        command.Parameters.AddWithValue("ReceiverProvinceCity", ReceiverProvinceCity);
                        command.Parameters.AddWithValue("ReceiverCountry", ReceiverCountry);
                        command.Parameters.AddWithValue("ReceiverGender", ReceiverGender);
                        command.Parameters.AddWithValue("ReceiverContactNo", ReceiverContactNo);
                        command.Parameters.AddWithValue("ReceiverBirthdate", rBdate);
                        //command.Parameters.AddWithValue("kptn4", kptn4);
                        command.Parameters.AddWithValue("SOORNo", ORNo);
                        command.Parameters.AddWithValue("ServiceCharge", ServiceCharge);
                        command.Parameters.AddWithValue("remotezone", remotezone);
                        command.Parameters.AddWithValue("vat", vat);
                        command.Parameters.AddWithValue("pocurrency1", preferredcurrency);
                        command.Parameters.AddWithValue("poamount1", amountpo);
                        command.Parameters.AddWithValue("exchangerate1", exchangerate);
                        command.Parameters.AddWithValue("transtype", "INTERNATIONAL");
                        command.Parameters.AddWithValue("claimeddateP", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.ExecuteNonQuery();


                        command.CommandText = "update " + decodeKPTNGlobal(0, KPTNNo) + " set IsClaimed = 1, sysmodified = @modified, sysmodifier = @modifier where KPTNNo = @kptn";
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("modified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("modifier", sysmodifier);
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.ExecuteNonQuery();


                        //command.CommandText = "update " + generateTableName(2, null) + " set IsClaimed = 1, DateClaimed = @dtClaimed where KPTN6 = @kptn1 OR MLKP4TN = @kptn1";
                        //command.Parameters.AddWithValue("kptn1", KPTNNo);
                        //command.Parameters.AddWithValue("dtClaimed", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        //command.ExecuteNonQuery();

                        //command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and userid = @uid and zcode = @zcode and type = 1";
                        //command.Parameters.AddWithValue("bcode", BranchCode);
                        //command.Parameters.AddWithValue("uid", OperatorID);
                        //command.Parameters.AddWithValue("series", sr);
                        //command.Parameters.AddWithValue("zcode", ZoneCode);

                        //throw new Exception(IsRemote.ToString() + " " + series);
                        if (IsRemote == 1)
                        {
                            command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("st", "01");
                            command.Parameters.AddWithValue("bcode", RemoteBranch);
                            command.Parameters.AddWithValue("series", sr + 1);//nseries
                            command.Parameters.AddWithValue("zcode", remotezone);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                        }
                        else
                        {
                            command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("st", Station);
                            command.Parameters.AddWithValue("bcode", BranchCode);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", ZoneCode);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                        }

                        String insertpayout = "INSERT INTO kptransactionsglobal.payout" + month + " (controlno,kptnno,claimeddate," +
                       "operatorid,stationid,isremote,remotebranch,remoteoperatorid,reason,sobranch,socontrolno,sooperator," +
                       "sodate,soorno,syscreated,syscreator,currency,principal,relation,idtype,idno,expirydate,branchcode," +
                       "zonecode,sendermlcardno,senderfname,senderlname,sendermname,sendername,senderstreet," +
                       "senderprovincecity,sendercountry,sendergender,sendercontactno,senderissms,senderbirthdate," +
                       "senderbranchid,receiverfname,receiverlname,receivermname,receivername,receiverstreet," +
                       "receiverprovincecity,receivercountry,receivergender,receivercontactno,receiverbirthdate," +
                       "balance,dormantcharge,servicecharge,vat,remotezonecode,tableoriginated,`year`,pocurrency,poamount,exchangerate,transtype) " +
                       "values (@controlnoP,@kptnnoP,@claimeddateP," +
                       "@operatoridP,@stationidP,@isremoteP,@remotebranchP,@remoteoperatoridP,@reasonP,@sobranchP,@socontrolnoP,@sooperatorP," +
                       "@sodateP,@soornoP,@syscreatedP,@syscreatorP,@currencyP,@principalP,@relationP,@idtypeP,@idnoP,@expirydateP,@branchcodeP," +
                       "@zonecodeP,@sendermlcardnoP,@senderfnameP,@senderlnameP,@sendermnameP,@sendernameP,@senderstreetP," +
                       "@senderprovincecityP,@sendercountryP,@sendergenderP,@sendercontactnoP,@senderissmsP,@senderbirthdateP," +
                       "@senderbranchidP,@receiverfnameP,@receiverlnameP,@receivermnameP,@receivernameP,@receiverstreetP," +
                       "@receiverprovincecityP,@receivercountryP,@receivergenderP,@receivercontactnoP,@receiverbirthdateP," +
                       "@balanceP,@dormantchargeP,@servicechargeP,@vatP,@remotezonecodeP,@tableoriginatedP,@yearP,@pocurrency,@poamount,@exchangerate,@transtype)";
                        command.CommandText = insertpayout;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("controlnoP", ControlNo);
                        command.Parameters.AddWithValue("kptnnoP", KPTNNo);
                        command.Parameters.AddWithValue("claimeddateP", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("operatoridP", OperatorID);
                        command.Parameters.AddWithValue("stationidP", Station);
                        command.Parameters.AddWithValue("isremoteP", IsRemote);
                        command.Parameters.AddWithValue("remotebranchP", RemoteBranch);
                        command.Parameters.AddWithValue("remoteoperatoridP", RemoteOperatorID);
                        command.Parameters.AddWithValue("reasonP", Reason);
                        command.Parameters.AddWithValue("sobranchP", SOBranch);
                        command.Parameters.AddWithValue("socontrolnoP", SOControlNo);
                        command.Parameters.AddWithValue("sooperatorP", SOOperator);
                        command.Parameters.AddWithValue("sodateP", Convert.ToDateTime(SODate).ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("soornoP", ORNo);
                        command.Parameters.AddWithValue("syscreatedP", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreatorP", syscreator);
                        command.Parameters.AddWithValue("currencyP", Currency);
                        command.Parameters.AddWithValue("principalP", Principal);
                        command.Parameters.AddWithValue("relationP", Relation);
                        command.Parameters.AddWithValue("idtypeP", IDType);
                        command.Parameters.AddWithValue("idnoP", IDNo);
                        command.Parameters.AddWithValue("expirydateP", xPiry);
                        command.Parameters.AddWithValue("branchcodeP", BranchCode);
                        command.Parameters.AddWithValue("zonecodeP", ZoneCode);
                        command.Parameters.AddWithValue("sendermlcardnoP", SenderMLCardNO);
                        command.Parameters.AddWithValue("senderfnameP", SenderFName);
                        command.Parameters.AddWithValue("senderlnameP", SenderLName);
                        command.Parameters.AddWithValue("sendermnameP", SenderMName);
                        command.Parameters.AddWithValue("sendernameP", SenderLName + ", " + SenderFName + " " + SenderMName);
                        command.Parameters.AddWithValue("senderstreetP", SenderStreet);
                        command.Parameters.AddWithValue("senderprovincecityP", SenderProvinceCity);
                        command.Parameters.AddWithValue("sendercountryP", SenderCountry);
                        command.Parameters.AddWithValue("sendergenderP", SenderGender);
                        command.Parameters.AddWithValue("sendercontactnoP", SenderContactNo);
                        command.Parameters.AddWithValue("senderissmsP", SenderIsSMS);
                        command.Parameters.AddWithValue("senderbirthdateP", sBdate);
                        command.Parameters.AddWithValue("senderbranchidP", SenderBranchID);
                        command.Parameters.AddWithValue("receiverfnameP", ReceiverFName);
                        command.Parameters.AddWithValue("receiverlnameP", ReceiverLName);
                        command.Parameters.AddWithValue("receivermnameP", ReceiverMName);
                        command.Parameters.AddWithValue("receivernameP", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        command.Parameters.AddWithValue("receiverstreetP", ReceiverStreet);
                        command.Parameters.AddWithValue("receiverprovincecityP", ReceiverProvinceCity);
                        command.Parameters.AddWithValue("receivercountryP", ReceiverCountry);
                        command.Parameters.AddWithValue("receivergenderP", ReceiverGender);
                        command.Parameters.AddWithValue("receivercontactnoP", ReceiverContactNo);
                        command.Parameters.AddWithValue("receiverbirthdateP", rBdate);
                        command.Parameters.AddWithValue("balanceP", balance);
                        command.Parameters.AddWithValue("dormantchargeP", DormantCharge);
                        command.Parameters.AddWithValue("servicechargeP", ServiceCharge);
                        command.Parameters.AddWithValue("vatP", vat);
                        command.Parameters.AddWithValue("remotezonecodeP", remotezone);
                        command.Parameters.AddWithValue("tableoriginatedP", tblorig);
                        command.Parameters.AddWithValue("yearP", dt.ToString("yyyy"));
                        command.Parameters.AddWithValue("pocurrency", preferredcurrency);
                        command.Parameters.AddWithValue("poamount", amountpo);
                        command.Parameters.AddWithValue("exchangerate", exchangerate);
                        command.Parameters.AddWithValue("transtype", "INTERNATIONAL");
                        command.ExecuteNonQuery();

                        //command.Transaction = trans;
                        //command.Parameters.Clear();
                        //command.CommandText = "kptransactionsglobal.save_payout";
                        //command.CommandType = CommandType.StoredProcedure;
                        //command.Parameters.AddWithValue("p_month", month);
                        //command.Parameters.AddWithValue("controlno", ControlNo);
                        //command.Parameters.AddWithValue("kptnno", KPTNNo);
                        //command.Parameters.AddWithValue("claimeddate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        //command.Parameters.AddWithValue("operatorid", OperatorID);
                        //command.Parameters.AddWithValue("stationid", Station);
                        //command.Parameters.AddWithValue("isremote", IsRemote);
                        //command.Parameters.AddWithValue("remotebranch", RemoteBranch);
                        //command.Parameters.AddWithValue("remoteoperatorid", RemoteOperatorID);
                        //command.Parameters.AddWithValue("reason", Reason);
                        //command.Parameters.AddWithValue("sobranch", SOBranch);
                        //command.Parameters.AddWithValue("socontrolno", SOControlNo);
                        //command.Parameters.AddWithValue("sooperator", SOOperator);
                        //command.Parameters.AddWithValue("sodate", Convert.ToDateTime(SODate).ToString("yyyy-MM-dd HH:mm:ss"));
                        //command.Parameters.AddWithValue("soorno", ORNo);
                        //command.Parameters.AddWithValue("syscreated", DateTime.Now);
                        //command.Parameters.AddWithValue("syscreator", syscreator);
                        //command.Parameters.AddWithValue("currency", Currency);
                        //command.Parameters.AddWithValue("principal", Principal);
                        //command.Parameters.AddWithValue("relation", Relation);
                        //command.Parameters.AddWithValue("idtype", IDType);
                        //command.Parameters.AddWithValue("idno", IDNo);
                        //command.Parameters.AddWithValue("expirydate", (xPiry == String.Empty) ? null : xPiry);
                        //command.Parameters.AddWithValue("branchcode", BranchCode);
                        //command.Parameters.AddWithValue("zonecode", ZoneCode);
                        //command.Parameters.AddWithValue("sendermlcardno", SenderMLCardNO);
                        //command.Parameters.AddWithValue("senderfname", SenderFName);
                        //command.Parameters.AddWithValue("senderlname", SenderLName);
                        //command.Parameters.AddWithValue("sendermname", SenderMName);
                        //command.Parameters.AddWithValue("sendername", SenderLName + ", " + SenderFName + " " + SenderMName);
                        //command.Parameters.AddWithValue("senderstreet", SenderStreet);
                        //command.Parameters.AddWithValue("senderprovincecity", SenderProvinceCity);
                        //command.Parameters.AddWithValue("sendercountry", SenderCountry);
                        //command.Parameters.AddWithValue("sendergender", SenderGender);
                        //command.Parameters.AddWithValue("sendercontactno", SenderContactNo);
                        //command.Parameters.AddWithValue("senderissms", SenderIsSMS);
                        //command.Parameters.AddWithValue("senderbirthdate", SenderBirthdate);
                        //command.Parameters.AddWithValue("senderbranchid", SenderBranchID);
                        //command.Parameters.AddWithValue("receiverfname", ReceiverFName);
                        //command.Parameters.AddWithValue("receiverlname", ReceiverLName);
                        //command.Parameters.AddWithValue("receivermname", ReceiverMName);
                        //command.Parameters.AddWithValue("receivername", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        //command.Parameters.AddWithValue("receiverstreet", ReceiverStreet);
                        //command.Parameters.AddWithValue("receiverprovincecity", ReceiverProvinceCity);
                        //command.Parameters.AddWithValue("receivercountry", ReceiverCountry);
                        //command.Parameters.AddWithValue("receivergender", ReceiverGender);
                        //command.Parameters.AddWithValue("receivercontactno", ReceiverContactNo);
                        //command.Parameters.AddWithValue("receiverbirthdate", ReceiverBirthdate);
                        //command.Parameters.AddWithValue("balance", balance);
                        //command.Parameters.AddWithValue("dormantcharge", DormantCharge);
                        //command.Parameters.AddWithValue("servicecharge", ServiceCharge);
                        //command.Parameters.AddWithValue("vat", vat);
                        //command.Parameters.AddWithValue("remotezonecode", remotezone);
                        //command.Parameters.AddWithValue("tableoriginated", tblorig);
                        //command.Parameters.AddWithValue("year", dt.ToString("yyyy"));
                        //command.ExecuteNonQuery();

                        String custS = getcustomertable(SenderLName);
                        command.Parameters.Clear();
                        command.CommandText = "kpadminlogsglobal.save_customers";
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.AddWithValue("tblcustomer", custS);
                        command.Parameters.AddWithValue("kptnno", KPTNNo);
                        command.Parameters.AddWithValue("controlno", ControlNo);
                        command.Parameters.AddWithValue("transdate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("fname", SenderFName);
                        command.Parameters.AddWithValue("lname", SenderLName);
                        command.Parameters.AddWithValue("mname", SenderMName);
                        command.Parameters.AddWithValue("sobranch", SOBranch);
                        command.Parameters.AddWithValue("pobranch", POBranchName);
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("remotebranch", RemoteBranch);
                        command.Parameters.AddWithValue("cancelledbranch", String.Empty);
                        command.Parameters.AddWithValue("status", 1);
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreator", syscreator);
                        command.Parameters.AddWithValue("customertype", "S");
                        command.Parameters.AddWithValue("amount", Principal);
                        command.ExecuteNonQuery();

                        String custR = getcustomertable(ReceiverLName);
                        command.Parameters.Clear();
                        command.CommandText = "kpadminlogsglobal.save_customers";
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.AddWithValue("tblcustomer", custR);
                        command.Parameters.AddWithValue("kptnno", KPTNNo);
                        command.Parameters.AddWithValue("controlno", ControlNo);
                        command.Parameters.AddWithValue("transdate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("fname", ReceiverFName);
                        command.Parameters.AddWithValue("lname", ReceiverLName);
                        command.Parameters.AddWithValue("mname", ReceiverMName);
                        command.Parameters.AddWithValue("sobranch", SOBranch);
                        command.Parameters.AddWithValue("pobranch", POBranchName);
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("remotebranch", RemoteBranch);
                        command.Parameters.AddWithValue("cancelledbranch", String.Empty);
                        command.Parameters.AddWithValue("status", 1);
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreator", syscreator);
                        command.Parameters.AddWithValue("customertype", "R");
                        command.Parameters.AddWithValue("amount", Principal);
                        command.ExecuteNonQuery();


                        command.Transaction = trans;
                        command.Parameters.Clear();
                        command.CommandText = "kpadminlogsglobal.savelog53";
                        command.CommandType = CommandType.StoredProcedure;

                        command.Parameters.AddWithValue("kptnno", KPTNNo);
                        command.Parameters.AddWithValue("action", "PAYOUT");
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("txndate", dt);
                        command.Parameters.AddWithValue("stationcode", stationcode);
                        command.Parameters.AddWithValue("stationno", Station);
                        command.Parameters.AddWithValue("zonecode", ZoneCode);
                        command.Parameters.AddWithValue("branchcode", BranchCode);
                        //command.Parameters.AddWithValue("branchname", POBranchName);
                        command.Parameters.AddWithValue("operatorid", OperatorID);
                        command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                        command.Parameters.AddWithValue("remotereason", Reason);
                        command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                        command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                        command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                        command.Parameters.AddWithValue("remotezonecode", remotezone);
                        command.Parameters.AddWithValue("type", "N");
                        command.ExecuteNonQuery();

                        trans.Commit();
                        conn.Close();
                        kplog.Info(KPTNNo + " - Successfully Payout");
                        return new PayoutResponse { respcode = 1, message = getRespMessage(1), DateClaimed = dt };
                    }
                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(KPTNNo + " - " + ex.ToString());
                    Int32 respcode = 0;
                    //String message;
                    //throw new Exception(ex.ErrorCode.ToString());
                    if (ex.Number == 1062)
                    {
                        respcode = 3;
                        kplog.Fatal(KPTNNo + " - " + getRespMessage(3));
                    }
                    //if (ex.Message.Contains("Duplicate"))
                    //{
                    //    respcode = 3;
                    //}
                    trans.Rollback();
                    dbconGlobal.CloseConnection();
                    return new PayoutResponse { respcode = respcode, message = getRespMessage(respcode) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
                }
            }
        }
        catch (Exception ex)
        {
            //trans.Rollback();
            kplog.Fatal(KPTNNo + " - " + ex.ToString());
            dbconGlobal.CloseConnection();
            return new PayoutResponse { respcode = 0, message = getRespMessage(0) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
        }


    }

    [WebMethod(BufferResponse = false)]
    public SearchResponse rePrintGlobal(String Username, String Password, String kptn, Int32 type, Double version, String stationcode)
    {
        try
        {
            if (!authenticate(Username, Password))
            {
                return new SearchResponse { respcode = 7, message = getRespMessage(7) };
            }
            if (kptn != "")
            {
                if (kptn.Substring(0, 3) == "MLK")
                {
                    return (SearchResponse)rePrintGlobalKiosk(Username, Password, kptn, type, version, stationcode);
                }
                if (kptn.Substring(0, 3) == "MCG")
                {
                    if (type == 0)
                    {
                        return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                    }
                    try
                    {
                        CloudService.SearchResponse resp = new CloudService.SearchResponse();
                        CloudService.MLhuillier client = new CloudService.MLhuillier();

                        resp = client.rePrintGlobal(Username, Password, kptn, type, version, stationcode);
                        var senderinfo = new SenderInfo();
                        var receiverinfo = new ReceiverInfo();
                        var payoutinfo = new PayoutInfo();
                        if (resp.respcode == 1)
                        {
                            senderinfo = new SenderInfo
                            {
                                BranchID = resp.SenderInfo.BranchID,
                                ContactNo = resp.SenderInfo.ContactNo,
                                Country = resp.SenderInfo.Country,
                                FirstName = resp.SenderInfo.FirstName,
                                Gender = resp.SenderInfo.Gender,
                                IsSMS = resp.SenderInfo.IsSMS,
                                LastName = resp.SenderInfo.LastName,
                                MiddleName = resp.SenderInfo.MiddleName,
                                ProvinceCity = resp.SenderInfo.ProvinceCity,
                                SenderMLCardNo = resp.SenderInfo.SenderMLCardNo,
                                SenderName = resp.SenderInfo.SenderName,
                                Street = resp.SenderInfo.Street
                            };

                            receiverinfo = new ReceiverInfo
                            {
                                BirthDate = resp.ReceiverInfo.BirthDate,
                                ContactNo = resp.ReceiverInfo.ContactNo,
                                Country = resp.ReceiverInfo.Country,
                                FirstName = resp.ReceiverInfo.FirstName,
                                Gender = resp.ReceiverInfo.Gender,
                                LastName = resp.ReceiverInfo.LastName,
                                MiddleName = resp.ReceiverInfo.MiddleName,
                                ProvinceCity = resp.ReceiverInfo.ProvinceCity,
                                ReceiverName = resp.ReceiverInfo.ReceiverName,
                                Street = resp.ReceiverInfo.Street
                            };

                                                        payoutinfo = new PayoutInfo
                            {
                                SendoutControlNo = resp.PayoutInfo.SendoutControlNo,
                                KPTNNo = resp.PayoutInfo.KPTNNo,
                                OperatorID = resp.PayoutInfo.OperatorID,
                                //IsPassword = resp.SendoutInfo.IsPassword,
                                TransPassword = resp.PayoutInfo.TransPassword,
                                //syscreated = resp.SendoutInfo.syscreated,
                                Currency = resp.PayoutInfo.Currency,
                                Principal = resp.PayoutInfo.Principal,
                                SenderIsSMS = resp.PayoutInfo.SenderIsSMS,
                                Relation = resp.PayoutInfo.Relation,
                                Message = resp.PayoutInfo.Message,
                                StationID = resp.PayoutInfo.StationID,
                                SourceOfFund = resp.PayoutInfo.SourceOfFund,
                                IDNo = resp.PayoutInfo.IDNo,
                                IDType = resp.PayoutInfo.IDType,
                                ExpiryDate = resp.PayoutInfo.ExpiryDate,
                                DormantCharge = resp.PayoutInfo.DormantCharge,
                                RemoteOperatorID = resp.PayoutInfo.RemoteOperatorID,
                                RemoteBranch = resp.PayoutInfo.RemoteBranch,
                                ControlNo = resp.PayoutInfo.ControlNo,
                                BranchCode = resp.PayoutInfo.BranchCode,
                                ClaimedDate = resp.PayoutInfo.ClaimedDate,
                                SODate = resp.PayoutInfo.SODate,
                                SOORNo = resp.PayoutInfo.SOORNo,
                                Charge = resp.PayoutInfo.Charge,
                                OtherCharge = resp.PayoutInfo.OtherCharge,
                                Total = resp.PayoutInfo.Total,
                                Purpose = resp.PayoutInfo.Purpose,
                                SOMessage = resp.PayoutInfo.SOMessage,
                                ZoneCode = resp.PayoutInfo.ZoneCode,
                                IsRemote = resp.PayoutInfo.IsRemote,
                                Balance = resp.PayoutInfo.Balance,
                                RemoteZone = resp.PayoutInfo.RemoteZone,
                                PreferredPO = resp.PayoutInfo.PreferredPO,
                                AmountPO = resp.PayoutInfo.AmountPO,
                                Exchangerate = resp.PayoutInfo.Exchangerate
                            };
                        }
                        kplog.Info(kptn + " - Cloud Response: " + resp.message);
                        return new SearchResponse { respcode = resp.respcode, message = resp.message, SenderInfo = senderinfo, ReceiverInfo = receiverinfo, PayoutInfo = payoutinfo };
                    }
                    catch (Exception ex)
                    {
                        kplog.Fatal(kptn + " - Cloud Catch: " + ex.ToString());
                        return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                    }

                }
            }
            if (decodeKPTNGlobal(0, kptn) == "4" || (!istablevalid(decodeKPTNGlobal(0, kptn))))
            {
                return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
            }

            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    return new SearchResponse { respcode = 10, message = getRespMessage(10) };
            //}
            if (type > 1 || 1 < 0)
            {
                return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = "Type must not be greater or less than 1 and 0" };
            }
            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                //DateTime TransDate;
                DateTime ClaimDate;// = DateTime.Now;
                //Boolean isClaimed;
                try
                {
                    conn.Open();
                    //trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (command = conn.CreateCommand())
                    {
                        List<object> a = new List<object>();

                        //SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();
                        //String query = "SELECT SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, kptn4, IDType, IDNo, ExpiryDate, SenderName, ReceiverName FROM " + generateTableName(2) + " as t INNER JOIN ON " + generateTableName(0) + " s ON t.KPTN6 = s.KPTNNo and t.MLKP4TN = s.kptn4 WHERE (MLKP4TN = @kptn OR MLKP4TN = @kptn) and IsClaimed = 0;";
                        SendoutInfo soi;
                        SenderInfo si;
                        ReceiverInfo ri;
                        PayoutInfo poi;
                        if (type == 0)
                        {
                            //String query = "SELECT SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, kptn4, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, RemoteBranch, RemoteOperatorID, ControlNo, BranchCode, Redeem, ORNo FROM " + generateTableName(0, TransDate.ToString("yyyy-MM-dd HH:mm:ss")) + " WHERE (KPTNNo = @kptn OR kptn4 = @kptn);";
                            String query = "SELECT ControlNo, KPTNNo, ORNo, IRNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, IsPassword, TransPassword, Purpose, OLDKPTNNo, IsClaimed, IsCancelled, syscreated, syscreator, sysmodified, sysmodifier, Source, Currency, Principal, Charge, OtherCharge, Redeem, Total, Promo, SenderIsSMS, Relation, Message, IDType, IDNo, ExpiryDate, CancelledDate, BranchCode, ZoneCode, TransDate, CancelledByOperatorID, CancelledByBranchCode, CancelledByZoneCode, CancelledByStationID, CancelReason, CancelDetails, SenderMLCardNo, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderBirthdate, SenderBranchID, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthDate, CancelCharge, ChargeTo,remotezonecode,isclaimed,exchangerate,amountpo,preferredcurrency FROM " + decodeKPTNGlobal(0, kptn) + " WHERE KPTNNo = @kptn;";
                            command.CommandText = query;
                            command.Parameters.AddWithValue("kptn", kptn);
                            MySqlDataReader dataReader = command.ExecuteReader();

                            if (dataReader.HasRows)
                            {
                                dataReader.Read();
                                //if (dataReader["isclaimed"].ToString() == "1")
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 101, message = "Unable to reprint sendout... \nTransaction were already claimed!", ErrorDetail = "Dili na pwde maka-sendout reprint kun na-claimed na!" };
                                //}
                                //if (dataReader["IsCancelled"].ToString() == "1")
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 101, message = "Unable to reprint sendout... \nTransaction were cancelled!", ErrorDetail = "Dili na pwde maka-sendout reprint ky gi-cancel ang transaction!" };
                                //}

                                string sFName = dataReader["SenderFname"].ToString();
                                string sLName = dataReader["SenderLname"].ToString();
                                string sMName = dataReader["SenderMName"].ToString();
                                string sSt = dataReader["SenderStreet"].ToString();
                                string sPCity = dataReader["SenderProvinceCity"].ToString();
                                string sCtry = dataReader["SenderCountry"].ToString();
                                string sG = dataReader["SenderGender"].ToString();
                                string sCNo = dataReader["SenderContactNo"].ToString();
                                Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                                string sBID = dataReader["SenderBranchID"].ToString();
                                //string sCustID = dataReader["CustID"].ToString();
                                string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                                string SenderName = dataReader["SenderName"].ToString();

                                string rFName = dataReader["ReceiverFname"].ToString();
                                string rLName = dataReader["ReceiverLname"].ToString();
                                string rMName = dataReader["ReceiverMName"].ToString();
                                string rSt = dataReader["ReceiverStreet"].ToString();
                                string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                                string rCtry = dataReader["ReceiverCountry"].ToString();
                                string rG = dataReader["ReceiverGender"].ToString();
                                string rCNo = dataReader["ReceiverContactNo"].ToString();
                                string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                                //string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                                string ReceiverName = dataReader["ReceiverName"].ToString();

                                string SendoutControlNo = dataReader["ControlNo"].ToString();
                                string KPTNNo = dataReader["KPTNNo"].ToString();
                                //string kptn4 = dataReader["kptn4"].ToString();
                                string OperatorID = dataReader["OperatorID"].ToString();
                                Boolean IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                                string TransPassword = dataReader["TransPassword"].ToString();
                                DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"].ToString());
                                string Currency = dataReader["Currency"].ToString();
                                Decimal Principal = (Decimal)dataReader["Principal"];
                                //string SenderID = dataReader["CustID"].ToString();
                                Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string Relation = dataReader["Relation"].ToString();
                                string Message = dataReader["Message"].ToString();
                                string StationID = dataReader["StationID"].ToString();
                                string SourceOfFund = dataReader["Source"].ToString();
                                string IDType = dataReader["IDType"].ToString();
                                string IDNo = dataReader["IDNo"].ToString();
                                string ExpiryDate = dataReader["ExpiryDate"].ToString();
                                //RemoteBranch, RemoteOperatorID, IDType, IDNo, ExpiryDate,ControlNo
                                string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                                string ControlNo = dataReader["ControlNo"].ToString();
                                string BranchCode = dataReader["BranchCode"].ToString();
                                Decimal Redeem = (Decimal)dataReader["Redeem"];
                                string ORNo = dataReader["ORNo"].ToString();
                                Decimal Total = (Decimal)dataReader["Total"];
                                Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                                Decimal Charge = (Decimal)dataReader["Charge"];
                                string Purpose = dataReader["Purpose"].ToString();
                                Int32 ZoneCode = Convert.ToInt32(dataReader["ZoneCode"]);
                                Boolean IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                                Decimal CancelCharge = (dataReader["CancelCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["CancelCharge"];
                                Boolean x = Convert.ToBoolean(dataReader["IsCancelled"]);
                                Boolean IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                                String reason = dataReader["Reason"].ToString();
                                String cancelReason = dataReader["CancelReason"].ToString();
                                Int32 remotezone = Convert.ToInt32(dataReader["remotezonecode"]);

                                string preferredcurrency = dataReader["preferredcurrency"].ToString(); ;
                                Decimal amountPO = Convert.ToDecimal(dataReader["amountpo"]);
                                Decimal exchangerate = Convert.ToDecimal(dataReader["exchangerate"]);
                                // BETA for testing
                                //if (x && !cancelReason.Equals("Return to Sender"))
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 8, message = getRespMessage(8), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                //}

                                //if (!IsClaimed)
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                //}

                                //string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                //string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();

                                dataReader.Close();

                                //Decimal DormantCharge = CalculateDormantChargeGlobal(syscreated);
                                Decimal DormantCharge = 0.0M;

                                //command.Transaction = trans;
                                command.Parameters.Clear();
                                command.CommandText = "kpadminlogsglobal.savelog53";
                                command.CommandType = CommandType.StoredProcedure;

                                command.Parameters.AddWithValue("kptnno", KPTNNo);
                                command.Parameters.AddWithValue("action", "SO REPRINT");
                                command.Parameters.AddWithValue("isremote", IsRemote);
                                command.Parameters.AddWithValue("txndate", syscreated);
                                command.Parameters.AddWithValue("stationcode", stationcode);
                                command.Parameters.AddWithValue("stationno", StationID);
                                command.Parameters.AddWithValue("zonecode", ZoneCode);
                                command.Parameters.AddWithValue("branchcode", BranchCode);
                                //command.Parameters.AddWithValue("branchname", DBNull.Value);
                                command.Parameters.AddWithValue("operatorid", OperatorID);
                                command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                                command.Parameters.AddWithValue("remotereason", reason);
                                command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                                command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                                command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                                command.Parameters.AddWithValue("remotezonecode", remotezone);
                                command.Parameters.AddWithValue("type", "N");
                                try
                                {
                                    command.ExecuteNonQuery();
                                    //trans.Commit();
                                    conn.Close();
                                }
                                catch (MySqlException ex)
                                {
                                    kplog.Fatal(kptn + " - " + ex.ToString());
                                    //trans.Rollback();
                                    conn.Close();
                                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                                }

                                si = new SenderInfo
                                {
                                    FirstName = sFName,
                                    LastName = sLName,
                                    MiddleName = sMName,
                                    SenderName = SenderName,
                                    Street = sSt,
                                    ProvinceCity = sPCity,
                                    Country = sCtry,
                                    Gender = sG,
                                    ContactNo = sCNo,
                                    IsSMS = sIsSM,
                                    BranchID = sBID,
                                    //CustID = sCustID,
                                    SenderMLCardNo = sMLCardNo
                                };

                                ri = new ReceiverInfo
                                {
                                    FirstName = rFName,
                                    LastName = rLName,
                                    MiddleName = rMName,
                                    ReceiverName = ReceiverName,
                                    Street = rSt,
                                    ProvinceCity = rPCity,
                                    Country = rCtry,
                                    Gender = rG,
                                    ContactNo = rCNo,
                                    BirthDate = rBdate,
                                    //MLCardNo = rMLCardNo
                                };

                                soi = new SendoutInfo
                                {
                                    SendoutControlNo = SendoutControlNo,
                                    KPTNNo = KPTNNo,
                                    OperatorID = OperatorID,
                                    IsPassword = IsPassword,
                                    TransPassword = TransPassword,
                                    syscreated = syscreated,
                                    Currency = Currency,
                                    Principal = Principal,
                                    //SenderID = SenderID,
                                    SenderIsSMS = SenderIsSMS,
                                    Relation = Relation,
                                    Message = Message,
                                    StationID = StationID,
                                    SourceOfFund = SourceOfFund,
                                    //kptn4 = kptn4,
                                    IDNo = IDNo,
                                    IDType = IDType,
                                    ExpiryDate = ExpiryDate,
                                    DormantCharge = DormantCharge,
                                    RemoteOperatorID = RemoteOperatorID,
                                    RemoteBranch = RemoteBranch,
                                    BranchCode = BranchCode,
                                    Redeem = Redeem,
                                    ORNo = ORNo,
                                    Charge = Charge,
                                    OtherCharge = OtherCharge,
                                    Purpose = Purpose,
                                    Total = Total,
                                    ZoneCode = ZoneCode,
                                    IsRemote = IsRemote,
                                    CancelCharge = CancelCharge,
                                    RemoteReason = reason,
                                    RemoteZone = remotezone,
                                    ExchangeRate101 = exchangerate,
                                    AmountPO101 = amountPO,
                                    PreffedCur101 = preferredcurrency
                                };
                                kplog.Info(kptn + " - Reprinting Success");
                                return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                            }
                            else
                            {
                                kplog.Error(kptn + " - " + getRespMessage(4));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                            }
                        }
                        else
                        {
                            using (command = conn.CreateCommand())
                            {
                                String query1 = "SELECT /*date_format(sysmodified,'%m/%d/%Y') as*/ date(sysmodified) as sysmodified FROM " + decodeKPTNGlobal(0, kptn) + " WHERE KPTNNo = @kptn1 and isCancelled = 0;";
                                command.CommandText = query1;
                                command.Parameters.AddWithValue("kptn1", kptn);
                                MySqlDataReader dataReader1 = command.ExecuteReader();

                                if (dataReader1.HasRows)
                                {
                                    dataReader1.Read();
                                    // throw new Exception(dataReader1["sysmodified"].GetType());
                                    // if (!dataReader1["sysmodified"].GetType().ToString().Equals("System.DBNull"))
                                    // if (!(dataReader1["sysmodified"].GetType().ToString().Equals("System.DBNull")) || dataReader1["sysmodified"].ToString() == "0000-00-00 00:00:00")
                                    //if (!(dataReader1["sysmodified"].GetType().ToString().Equals("System.DBNull")|| dataReader1["sysmodified"]))
                                    string dat = dataReader1["sysmodified"].ToString();
                                    if (!(dataReader1["sysmodified"].GetType().ToString().Equals("System.DBNull") || dat == "0/0/0000"))
                                    {
                                        // string mydate = dataReader1["sysmodified"].ToString(); //String.Format("yyyy-MM-dd", dataReader1["sysmodified"]);
                                        // ClaimDate = Convert.ToDateTime(mydate);
                                        // ClaimDate = DateTime.ParseExact(dataReader1["sysmodified"].ToString(), "yyyy-MM-dd HH:mm:ss,fff", System.Globalization.CultureInfo.InvariantCulture);
                                        ClaimDate = Convert.ToDateTime(dataReader1["sysmodified"].ToString());
                                        //TransDate = Convert.ToDateTime(dataReader1["TransDate"]);
                                        dataReader1.Close();
                                    }
                                    else
                                    {
                                        kplog.Error(kptn + " - " + getRespMessage(9));
                                        dataReader1.Close();
                                        conn.Close();
                                        return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                    }
                                }
                                else
                                {
                                    kplog.Error(kptn + " - " + getRespMessage(4));
                                    dataReader1.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                                }
                            }

                            String query = "SELECT if(cancelledtype is null or cancelledtype='','xxx','yyy') as iscancelled, Reason, DormantCharge, Balance, IsRemote, ZoneCode, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SOBranch, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ControlNo, KPTNNo, OperatorID, Currency, Principal, Relation, StationID,  IDType, IDNo, ExpiryDate, SenderName, ReceiverName, RemoteBranch, RemoteOperatorID, ControlNo, BranchCode, ClaimedDate, SODate, SOORNo, (SELECT TransPassword FROM " + decodeKPTNGlobal(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as TransPass, (SELECT Charge FROM " + decodeKPTNGlobal(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Charge, (SELECT OtherCharge FROM " + decodeKPTNGlobal(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as OtherCharge, (SELECT Total FROM " + decodeKPTNGlobal(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Total, (SELECT Purpose FROM " + decodeKPTNGlobal(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Purpose, (SELECT Source FROM " + decodeKPTNGlobal(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Source, (SELECT Message FROM " + decodeKPTNGlobal(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Message, (SELECT IsClaimed FROM " + decodeKPTNGlobal(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as IsClaimed,"
                                + "(SELECT ControlNo FROM " + decodeKPTNGlobal(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as SendoutControl, remotezonecode,preferredPO,amountPO,exchangerate FROM " + generateTableNameGlobal(1, ClaimDate.ToString("yyyy-MM-dd HH:mm:ss")) + " WHERE KPTNNo = @kptn or oldKPTNNo=@kptn ORDER BY ClaimedDate DESC LIMIT 1;";
                            command.CommandText = query;
                            command.Parameters.AddWithValue("kptn", kptn);

                            MySqlDataReader dataReader = command.ExecuteReader();
                            if (dataReader.HasRows)
                            {
                                dataReader.Read();
                                //if (dataReader["iscancelled"].ToString() == "xxx")
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 101, message = "Unable to reprint payout... \nTransaction was cancelled!", ErrorDetail = "Dili na pwde maka-payout reprint ky gi-cancel ang transaction!" };
                                //}

                                string sFName = dataReader["SenderFname"].ToString();
                                string sLName = dataReader["SenderLname"].ToString();
                                string sMName = dataReader["SenderMName"].ToString();
                                string sSt = dataReader["SenderStreet"].ToString();
                                string sPCity = dataReader["SenderProvinceCity"].ToString();
                                string sCtry = dataReader["SenderCountry"].ToString();
                                string sG = dataReader["SenderGender"].ToString();
                                string sCNo = dataReader["SenderContactNo"].ToString();
                                Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                                string sBID = dataReader["SOBranch"].ToString();
                                //string sCustID = dataReader["CustID"].ToString();
                                string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                                string SenderName = dataReader["SenderName"].ToString();
                                string rFName = dataReader["ReceiverFname"].ToString();
                                string rLName = dataReader["ReceiverLname"].ToString();
                                string rMName = dataReader["ReceiverMName"].ToString();
                                string rSt = dataReader["ReceiverStreet"].ToString();
                                string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                                string rCtry = dataReader["ReceiverCountry"].ToString();
                                string rG = dataReader["ReceiverGender"].ToString();
                                string rCNo = dataReader["ReceiverContactNo"].ToString();

                                string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                                //string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                                string ReceiverName = dataReader["ReceiverName"].ToString();

                                string SendoutControlNo = dataReader["SendoutControl"].ToString();
                                string KPTNNo = dataReader["KPTNNo"].ToString();
                                //string kptn4 = null;
                                string OperatorID = dataReader["OperatorID"].ToString();
                                //bool IsPassword = (bool)dataReader["IsPassword"];
                                string TransPassword = dataReader["TransPass"].ToString();
                                //DateTime syscreated = (DateTime)dataReader["TransDate "];
                                string Currency = dataReader["Currency"].ToString();
                                Decimal Principal = (Decimal)dataReader["Principal"];
                                //string SenderID = dataReader["CustID"].ToString();
                                Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string Relation = dataReader["Relation"].ToString();
                                string Message = null;
                                string StationID = dataReader["StationID"].ToString();
                                string SourceOfFund = dataReader["Source"].ToString();
                                string IDType = dataReader["IDType"].ToString();
                                string IDNo = dataReader["IDNo"].ToString();
                                string ExpiryDate = dataReader["ExpiryDate"].ToString();
                                string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                                string ControlNo = dataReader["ControlNo"].ToString();
                                string BranchCode = dataReader["BranchCode"].ToString();

                                string ClaimedDate = Convert.ToDateTime(dataReader["ClaimedDate"]).ToString("yyyy-MM-dd HH:mm:ss");
                                string SODate = Convert.ToDateTime(dataReader["SODate"]).ToString("yyyy-MM-dd HH:mm:ss");
                                string SOORNo = dataReader["SOORNo"].ToString();
                                string reason = dataReader["Reason"].ToString();


                                //Decimal Redeem = (Decimal)dataReader["Redeem"];

                                Decimal Total = (Decimal)dataReader["Total"];

                                Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                                Decimal Charge = (Decimal)dataReader["Charge"];
                                string Purpose = dataReader["Purpose"].ToString();
                                string message = dataReader["Message"].ToString();
                                Int32 ZoneCode = Convert.ToInt32(dataReader["ZoneCode"]);
                                //throw new Exception(dataReader["DormantCharge"].GetType().ToString());
                                Decimal Dormant = (dataReader["DormantCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["DormantCharge"];
                                Decimal Balance = (dataReader["Balance"] == DBNull.Value) ? 0 : (Decimal)dataReader["Balance"]; ;
                                Boolean IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                                //throw new Exception(dataReader["IsClaimed"].ToString());
                                String IsClaimed = dataReader["IsClaimed"].ToString();
                                Int32 remotezone = Convert.ToInt32(dataReader["remotezonecode"]);

                                Decimal amountPO = Convert.ToDecimal(dataReader["amountPO"]);
                                Decimal exchangerate = Convert.ToDecimal(dataReader["exchangerate"]);
                                string preferredPO = dataReader["preferredPO"].ToString();

                                if (!IsClaimed.Equals("1"))
                                {
                                    kplog.Error(kptn + " - " + getRespMessage(9));
                                    dataReader.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                }

                                dataReader.Close();
                                //Decimal DormantCharge = CalculateDormantCharge(syscreated);


                                //trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                                //command.Transaction = trans;
                                command.Parameters.Clear();
                                command.CommandText = "kpadminlogsglobal.savelog53";
                                command.CommandType = CommandType.StoredProcedure;

                                command.Parameters.AddWithValue("kptnno", KPTNNo);
                                command.Parameters.AddWithValue("action", "PO REPRINT");
                                command.Parameters.AddWithValue("isremote", IsRemote);
                                command.Parameters.AddWithValue("txndate", ClaimedDate);
                                command.Parameters.AddWithValue("stationcode", stationcode);
                                command.Parameters.AddWithValue("stationno", StationID);
                                command.Parameters.AddWithValue("zonecode", ZoneCode);
                                command.Parameters.AddWithValue("branchcode", BranchCode);
                                //command.Parameters.AddWithValue("branchname", DBNull.Value);
                                command.Parameters.AddWithValue("operatorid", OperatorID);
                                command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                                command.Parameters.AddWithValue("remotereason", reason);
                                command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                                command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                                command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                                command.Parameters.AddWithValue("remotezonecode", remotezone);
                                command.Parameters.AddWithValue("type", "N");
                                try
                                {
                                    command.ExecuteNonQuery();
                                    //trans.Commit();
                                    conn.Close();
                                }
                                catch (MySqlException ex)
                                {
                                    kplog.Error(kptn + " - " + ex.ToString());
                                    //trans.Rollback();
                                    conn.Close();
                                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                                }
                                si = new SenderInfo
                                {
                                    FirstName = sFName,
                                    LastName = sLName,
                                    MiddleName = sMName,
                                    SenderName = SenderName,
                                    Street = sSt,
                                    ProvinceCity = sPCity,
                                    Country = sCtry,
                                    Gender = sG,
                                    ContactNo = sCNo,
                                    IsSMS = sIsSM,
                                    BranchID = sBID,
                                    //CustID = sCustID,
                                    SenderMLCardNo = sMLCardNo
                                };

                                ri = new ReceiverInfo
                                {
                                    FirstName = rFName,
                                    LastName = rLName,
                                    MiddleName = rMName,
                                    ReceiverName = ReceiverName,
                                    Street = rSt,
                                    ProvinceCity = rPCity,
                                    Country = rCtry,
                                    Gender = rG,
                                    ContactNo = rCNo,
                                    BirthDate = rBdate,
                                    //MLCardNo = rMLCardNo
                                };

                                poi = new PayoutInfo
                                {
                                    SendoutControlNo = SendoutControlNo,
                                    KPTNNo = KPTNNo,
                                    OperatorID = OperatorID,
                                    //IsPassword = IsPassword,
                                    TransPassword = TransPassword,
                                    //syscreated = syscreated,
                                    Currency = Currency,
                                    Principal = Principal,
                                    //SenderID = SenderID,
                                    SenderIsSMS = SenderIsSMS,
                                    Relation = Relation,
                                    Message = Message,
                                    StationID = StationID,
                                    SourceOfFund = SourceOfFund,
                                    //kptn4 = kptn4,
                                    IDNo = IDNo,
                                    IDType = IDType,
                                    ExpiryDate = ExpiryDate,
                                    RemoteBranch = RemoteBranch,
                                    RemoteOperatorID = RemoteOperatorID,
                                    ControlNo = ControlNo,
                                    BranchCode = BranchCode,
                                    ClaimedDate = ClaimedDate,
                                    SODate = SODate,
                                    SOORNo = SOORNo,
                                    Charge = Charge,
                                    OtherCharge = OtherCharge,
                                    Total = Total,
                                    Purpose = Purpose,
                                    SOMessage = message,
                                    ZoneCode = ZoneCode,
                                    IsRemote = IsRemote,
                                    Balance = Balance,
                                    DormantCharge = Dormant,
                                    RemoteZone = remotezone,
                                    PreferredPO = preferredPO,
                                    AmountPO = amountPO,
                                    Exchangerate = exchangerate
                                    //DormantCharge = DormantCharge
                                };

                                kplog.Info(kptn + " - Reprinting Success");
                                return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, PayoutInfo = poi };

                            }
                            else
                            {
                                kplog.Error(kptn + " - " + getRespMessage(4));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                            }
                        }



                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(kptn + " - " + ex.ToString());
                    conn.Close();
                    if (ex.Message.Equals("4"))
                    {
                        kplog.Error(kptn + " - " + getRespMessage(4));
                        return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                    }
                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(kptn + " - " + "Outer exception catched.", ex);
            return new SearchResponse { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
        }
    }

    public SearchResponse rePrintGlobalKiosk(String Username, String Password, String kptn, Int32 type, Double version, String stationcode)
    {
        try
        {
            if (!authenticate(Username, Password))
            {
                return new SearchResponse { respcode = 7, message = getRespMessage(7) };
            }
            if (decodeKPTNGlobalKIOSK(0, kptn) == "4" || (!istablevalid(decodeKPTNGlobalKIOSK(0, kptn))))
            {
                return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
            }
            if (type > 1 || 1 < 0)
            {
                return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = "Type must not be greater or less than 1 and 0" };
            }
            using (MySqlConnection conn = dbconGlobalkiosk.getConnection())
            {
                DateTime ClaimDate;
                try
                {
                    conn.Open();
                    using (command = conn.CreateCommand())
                    {
                        List<object> a = new List<object>();

                        SendoutInfo soi;
                        SenderInfo si;
                        ReceiverInfo ri;
                        PayoutInfo poi;
                        if (type == 0)
                        {
                            String query = "SELECT ControlNo, KPTNNo, ORNo, IRNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, IsPassword, TransPassword, Purpose, OLDKPTNNo, IsClaimed, IsCancelled, syscreated, syscreator, sysmodified, sysmodifier, Source, Currency, Principal, Charge, OtherCharge, Redeem, Total, Promo, SenderIsSMS, Relation, Message, IDType, IDNo, ExpiryDate, CancelledDate, BranchCode, ZoneCode, TransDate, CancelledByOperatorID, CancelledByBranchCode, CancelledByZoneCode, CancelledByStationID, CancelReason, CancelDetails, SenderMLCardNo, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderBirthdate, SenderBranchID, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthDate, CancelCharge, ChargeTo,remotezonecode,isclaimed,exchangerate,amountpo,preferredcurrency FROM " + decodeKPTNGlobalKIOSK(0, kptn) + " WHERE KPTNNo = @kptn;";
                            command.CommandText = query;
                            command.Parameters.AddWithValue("kptn", kptn);
                            MySqlDataReader dataReader = command.ExecuteReader();

                            if (dataReader.HasRows)
                            {
                                dataReader.Read();
                                string sFName = dataReader["SenderFname"].ToString();
                                string sLName = dataReader["SenderLname"].ToString();
                                string sMName = dataReader["SenderMName"].ToString();
                                string sSt = dataReader["SenderStreet"].ToString();
                                string sPCity = dataReader["SenderProvinceCity"].ToString();
                                string sCtry = dataReader["SenderCountry"].ToString();
                                string sG = dataReader["SenderGender"].ToString();
                                string sCNo = dataReader["SenderContactNo"].ToString();
                                Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                                string sBID = dataReader["SenderBranchID"].ToString();
                                string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                                string SenderName = dataReader["SenderName"].ToString();

                                string rFName = dataReader["ReceiverFname"].ToString();
                                string rLName = dataReader["ReceiverLname"].ToString();
                                string rMName = dataReader["ReceiverMName"].ToString();
                                string rSt = dataReader["ReceiverStreet"].ToString();
                                string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                                string rCtry = dataReader["ReceiverCountry"].ToString();
                                string rG = dataReader["ReceiverGender"].ToString();
                                string rCNo = dataReader["ReceiverContactNo"].ToString();
                                string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();
                                string ReceiverName = dataReader["ReceiverName"].ToString();

                                string SendoutControlNo = dataReader["ControlNo"].ToString();
                                string KPTNNo = dataReader["KPTNNo"].ToString();
                                string OperatorID = dataReader["OperatorID"].ToString();
                                Boolean IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                                string TransPassword = dataReader["TransPassword"].ToString();
                                DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"].ToString());
                                string Currency = dataReader["Currency"].ToString();
                                Decimal Principal = (Decimal)dataReader["Principal"];
                                Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string Relation = dataReader["Relation"].ToString();
                                string Message = dataReader["Message"].ToString();
                                string StationID = dataReader["StationID"].ToString();
                                string SourceOfFund = dataReader["Source"].ToString();
                                string IDType = dataReader["IDType"].ToString();
                                string IDNo = dataReader["IDNo"].ToString();
                                string ExpiryDate = dataReader["ExpiryDate"].ToString();
                                string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                                string ControlNo = dataReader["ControlNo"].ToString();
                                string BranchCode = dataReader["BranchCode"].ToString();
                                Decimal Redeem = (Decimal)dataReader["Redeem"];
                                string ORNo = dataReader["ORNo"].ToString();
                                Decimal Total = (Decimal)dataReader["Total"];
                                Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                                Decimal Charge = (Decimal)dataReader["Charge"];
                                string Purpose = dataReader["Purpose"].ToString();
                                Int32 ZoneCode = Convert.ToInt32(dataReader["ZoneCode"]);
                                Boolean IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                                Decimal CancelCharge = (dataReader["CancelCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["CancelCharge"];
                                Boolean x = Convert.ToBoolean(dataReader["IsCancelled"]);
                                Boolean IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                                String reason = dataReader["Reason"].ToString();
                                String cancelReason = dataReader["CancelReason"].ToString();
                                Int32 remotezone = Convert.ToInt32(dataReader["remotezonecode"]);

                                string preferredcurrency = dataReader["preferredcurrency"].ToString(); ;
                                Decimal amountPO = Convert.ToDecimal(dataReader["amountpo"].ToString());
                                Decimal exchangerate = Convert.ToDecimal(dataReader["exchangerate"].ToString());
                                dataReader.Close();

                                Decimal DormantCharge = 0.0M;

                                command.Parameters.Clear();
                                command.CommandText = "kpadminlogsglobal.savelog53";
                                command.CommandType = CommandType.StoredProcedure;

                                command.Parameters.AddWithValue("kptnno", KPTNNo);
                                command.Parameters.AddWithValue("action", "SO REPRINT");
                                command.Parameters.AddWithValue("isremote", IsRemote);
                                command.Parameters.AddWithValue("txndate", syscreated);
                                command.Parameters.AddWithValue("stationcode", stationcode);
                                command.Parameters.AddWithValue("stationno", StationID);
                                command.Parameters.AddWithValue("zonecode", ZoneCode);
                                command.Parameters.AddWithValue("branchcode", BranchCode);
                                command.Parameters.AddWithValue("operatorid", OperatorID);
                                command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                                command.Parameters.AddWithValue("remotereason", reason);
                                command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                                command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                                command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                                command.Parameters.AddWithValue("remotezonecode", remotezone);
                                command.Parameters.AddWithValue("type", "N");
                                try
                                {
                                    command.ExecuteNonQuery();
                                    conn.Close();
                                }
                                catch (MySqlException ex)
                                {
                                    kplog.Fatal(kptn + " - " + ex.ToString());
                                    conn.Close();
                                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                                }

                                si = new SenderInfo
                                {
                                    FirstName = sFName,
                                    LastName = sLName,
                                    MiddleName = sMName,
                                    SenderName = SenderName,
                                    Street = sSt,
                                    ProvinceCity = sPCity,
                                    Country = sCtry,
                                    Gender = sG,
                                    ContactNo = sCNo,
                                    IsSMS = sIsSM,
                                    BranchID = sBID,
                                    SenderMLCardNo = sMLCardNo
                                };

                                ri = new ReceiverInfo
                                {
                                    FirstName = rFName,
                                    LastName = rLName,
                                    MiddleName = rMName,
                                    ReceiverName = ReceiverName,
                                    Street = rSt,
                                    ProvinceCity = rPCity,
                                    Country = rCtry,
                                    Gender = rG,
                                    ContactNo = rCNo,
                                    BirthDate = rBdate
                                };

                                soi = new SendoutInfo
                                {
                                    SendoutControlNo = SendoutControlNo,
                                    KPTNNo = KPTNNo,
                                    OperatorID = OperatorID,
                                    IsPassword = IsPassword,
                                    TransPassword = TransPassword,
                                    syscreated = syscreated,
                                    Currency = Currency,
                                    Principal = Principal,
                                    SenderIsSMS = SenderIsSMS,
                                    Relation = Relation,
                                    Message = Message,
                                    StationID = StationID,
                                    SourceOfFund = SourceOfFund,
                                    IDNo = IDNo,
                                    IDType = IDType,
                                    ExpiryDate = ExpiryDate,
                                    DormantCharge = DormantCharge,
                                    RemoteOperatorID = RemoteOperatorID,
                                    RemoteBranch = RemoteBranch,
                                    BranchCode = BranchCode,
                                    Redeem = Redeem,
                                    ORNo = ORNo,
                                    Charge = Charge,
                                    OtherCharge = OtherCharge,
                                    Purpose = Purpose,
                                    Total = Total,
                                    ZoneCode = ZoneCode,
                                    IsRemote = IsRemote,
                                    CancelCharge = CancelCharge,
                                    RemoteReason = reason,
                                    RemoteZone = remotezone,
                                    ExchangeRate101 = exchangerate,
                                    AmountPO101 = amountPO,
                                    PreffedCur101 = preferredcurrency
                                };
                                kplog.Info(kptn + " - Reprinting Success");
                                return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                            }
                            else
                            {
                                kplog.Error(kptn + " - " + getRespMessage(4));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                            }
                        }
                        else
                        {
                            using (command = conn.CreateCommand())
                            {
                                String query1 = "SELECT /*date_format(sysmodified,'%m/%d/%Y') as*/ date(sysmodified) as sysmodified FROM " + decodeKPTNGlobalKIOSK(0, kptn) + " WHERE KPTNNo = @kptn1 and isCancelled = 0;";
                                command.CommandText = query1;
                                command.Parameters.AddWithValue("kptn1", kptn);
                                MySqlDataReader dataReader1 = command.ExecuteReader();

                                if (dataReader1.HasRows)
                                {
                                    dataReader1.Read();
                                    string dat = dataReader1["sysmodified"].ToString();
                                    if (!(dataReader1["sysmodified"].GetType().ToString().Equals("System.DBNull") || dat == "0/0/0000"))
                                    {
                                        ClaimDate = Convert.ToDateTime(dataReader1["sysmodified"].ToString());
                                        dataReader1.Close();
                                    }
                                    else
                                    {
                                        kplog.Error(kptn + " - " + getRespMessage(9));
                                        dataReader1.Close();
                                        conn.Close();
                                        return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                    }
                                }
                                else
                                {
                                    kplog.Error(kptn + " - " + getRespMessage(4));
                                    dataReader1.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                                }
                            }

                            String query = "SELECT if(cancelledtype is null or cancelledtype='','xxx','yyy') as iscancelled, Reason, DormantCharge, Balance, IsRemote, ZoneCode, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SOBranch, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ControlNo, KPTNNo, OperatorID, Currency, Principal, Relation, StationID,  IDType, IDNo, ExpiryDate, SenderName, ReceiverName, RemoteBranch, RemoteOperatorID, ControlNo, BranchCode, ClaimedDate, SODate, SOORNo, (SELECT TransPassword FROM " + decodeKPTNGlobalKIOSK(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as TransPass, (SELECT Charge FROM " + decodeKPTNGlobalKIOSK(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Charge, (SELECT OtherCharge FROM " + decodeKPTNGlobalKIOSK(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as OtherCharge, (SELECT Total FROM " + decodeKPTNGlobalKIOSK(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Total, (SELECT Purpose FROM " + decodeKPTNGlobalKIOSK(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Purpose, (SELECT Source FROM " + decodeKPTNGlobalKIOSK(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Source, (SELECT Message FROM " + decodeKPTNGlobalKIOSK(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Message, (SELECT IsClaimed FROM " + decodeKPTNGlobalKIOSK(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as IsClaimed,"
                                + "(SELECT ControlNo FROM " + decodeKPTNGlobalKIOSK(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as SendoutControl, remotezonecode,preferredPO,amountPO,exchangerate FROM " + generateTableNameGlobalKiosk(1, ClaimDate.ToString("yyyy-MM-dd HH:mm:ss")) + " WHERE KPTNNo = @kptn or oldKPTNNo=@kptn ORDER BY ClaimedDate DESC LIMIT 1;";
                            command.CommandText = query;
                            command.Parameters.AddWithValue("kptn", kptn);

                            MySqlDataReader dataReader = command.ExecuteReader();
                            if (dataReader.HasRows)
                            {
                                dataReader.Read();
                                string sFName = dataReader["SenderFname"].ToString();
                                string sLName = dataReader["SenderLname"].ToString();
                                string sMName = dataReader["SenderMName"].ToString();
                                string sSt = dataReader["SenderStreet"].ToString();
                                string sPCity = dataReader["SenderProvinceCity"].ToString();
                                string sCtry = dataReader["SenderCountry"].ToString();
                                string sG = dataReader["SenderGender"].ToString();
                                string sCNo = dataReader["SenderContactNo"].ToString();
                                Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                                string sBID = dataReader["SOBranch"].ToString();
                                string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                                string SenderName = dataReader["SenderName"].ToString();
                                string rFName = dataReader["ReceiverFname"].ToString();
                                string rLName = dataReader["ReceiverLname"].ToString();
                                string rMName = dataReader["ReceiverMName"].ToString();
                                string rSt = dataReader["ReceiverStreet"].ToString();
                                string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                                string rCtry = dataReader["ReceiverCountry"].ToString();
                                string rG = dataReader["ReceiverGender"].ToString();
                                string rCNo = dataReader["ReceiverContactNo"].ToString();

                                string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                                string ReceiverName = dataReader["ReceiverName"].ToString();

                                string SendoutControlNo = dataReader["SendoutControl"].ToString();
                                string KPTNNo = dataReader["KPTNNo"].ToString();
                                string OperatorID = dataReader["OperatorID"].ToString();
                                string TransPassword = dataReader["TransPass"].ToString();
                                string Currency = dataReader["Currency"].ToString();
                                Decimal Principal = (Decimal)dataReader["Principal"];
                                Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string Relation = dataReader["Relation"].ToString();
                                string Message = null;
                                string StationID = dataReader["StationID"].ToString();
                                string SourceOfFund = dataReader["Source"].ToString();
                                string IDType = dataReader["IDType"].ToString();
                                string IDNo = dataReader["IDNo"].ToString();
                                string ExpiryDate = dataReader["ExpiryDate"].ToString();
                                string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                                string ControlNo = dataReader["ControlNo"].ToString();
                                string BranchCode = dataReader["BranchCode"].ToString();

                                string ClaimedDate = Convert.ToDateTime(dataReader["ClaimedDate"]).ToString("yyyy-MM-dd HH:mm:ss");
                                string SODate = Convert.ToDateTime(dataReader["SODate"]).ToString("yyyy-MM-dd HH:mm:ss");
                                string SOORNo = dataReader["SOORNo"].ToString();
                                string reason = dataReader["Reason"].ToString();

                                Decimal Total = (Decimal)dataReader["Total"];

                                Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                                Decimal Charge = (Decimal)dataReader["Charge"];
                                string Purpose = dataReader["Purpose"].ToString();
                                string message = dataReader["Message"].ToString();
                                Int32 ZoneCode = Convert.ToInt32(dataReader["ZoneCode"]);
                                Decimal Dormant = (dataReader["DormantCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["DormantCharge"];
                                Decimal Balance = (dataReader["Balance"] == DBNull.Value) ? 0 : (Decimal)dataReader["Balance"]; ;
                                Boolean IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                                String IsClaimed = dataReader["IsClaimed"].ToString();
                                Int32 remotezone = Convert.ToInt32(dataReader["remotezonecode"]);

                                Decimal amountPO = Convert.ToDecimal(dataReader["amountPO"].ToString());
                                Decimal exchangerate = Convert.ToDecimal(dataReader["exchangerate"].ToString());
                                string preferredPO = dataReader["preferredPO"].ToString();

                                if (!IsClaimed.Equals("1"))
                                {
                                    kplog.Error(kptn + " - " + getRespMessage(9));
                                    dataReader.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                }

                                dataReader.Close();
                                command.Parameters.Clear();
                                command.CommandText = "kpadminlogsglobal.savelog53";
                                command.CommandType = CommandType.StoredProcedure;

                                command.Parameters.AddWithValue("kptnno", KPTNNo);
                                command.Parameters.AddWithValue("action", "PO REPRINT");
                                command.Parameters.AddWithValue("isremote", IsRemote);
                                command.Parameters.AddWithValue("txndate", ClaimedDate);
                                command.Parameters.AddWithValue("stationcode", stationcode);
                                command.Parameters.AddWithValue("stationno", StationID);
                                command.Parameters.AddWithValue("zonecode", ZoneCode);
                                command.Parameters.AddWithValue("branchcode", BranchCode);
                                command.Parameters.AddWithValue("operatorid", OperatorID);
                                command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                                command.Parameters.AddWithValue("remotereason", reason);
                                command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                                command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                                command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                                command.Parameters.AddWithValue("remotezonecode", remotezone);
                                command.Parameters.AddWithValue("type", "N");
                                try
                                {
                                    command.ExecuteNonQuery();
                                    conn.Close();
                                }
                                catch (MySqlException ex)
                                {
                                    kplog.Error(kptn + " - " + ex.ToString());
                                    conn.Close();
                                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                                }
                                si = new SenderInfo
                                {
                                    FirstName = sFName,
                                    LastName = sLName,
                                    MiddleName = sMName,
                                    SenderName = SenderName,
                                    Street = sSt,
                                    ProvinceCity = sPCity,
                                    Country = sCtry,
                                    Gender = sG,
                                    ContactNo = sCNo,
                                    IsSMS = sIsSM,
                                    BranchID = sBID,
                                    SenderMLCardNo = sMLCardNo
                                };

                                ri = new ReceiverInfo
                                {
                                    FirstName = rFName,
                                    LastName = rLName,
                                    MiddleName = rMName,
                                    ReceiverName = ReceiverName,
                                    Street = rSt,
                                    ProvinceCity = rPCity,
                                    Country = rCtry,
                                    Gender = rG,
                                    ContactNo = rCNo,
                                    BirthDate = rBdate,
                                };

                                poi = new PayoutInfo
                                {
                                    SendoutControlNo = SendoutControlNo,
                                    KPTNNo = KPTNNo,
                                    OperatorID = OperatorID,
                                    TransPassword = TransPassword,
                                    Currency = Currency,
                                    Principal = Principal,
                                    SenderIsSMS = SenderIsSMS,
                                    Relation = Relation,
                                    Message = Message,
                                    StationID = StationID,
                                    SourceOfFund = SourceOfFund,
                                    IDNo = IDNo,
                                    IDType = IDType,
                                    ExpiryDate = ExpiryDate,
                                    RemoteBranch = RemoteBranch,
                                    RemoteOperatorID = RemoteOperatorID,
                                    ControlNo = ControlNo,
                                    BranchCode = BranchCode,
                                    ClaimedDate = ClaimedDate,
                                    SODate = SODate,
                                    SOORNo = SOORNo,
                                    Charge = Charge,
                                    OtherCharge = OtherCharge,
                                    Total = Total,
                                    Purpose = Purpose,
                                    SOMessage = message,
                                    ZoneCode = ZoneCode,
                                    IsRemote = IsRemote,
                                    Balance = Balance,
                                    DormantCharge = Dormant,
                                    RemoteZone = remotezone,
                                    PreferredPO = preferredPO,
                                    AmountPO = amountPO,
                                    Exchangerate = exchangerate
                                };

                                kplog.Info(kptn + " - Reprinting Success");
                                return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, PayoutInfo = poi };

                            }
                            else
                            {
                                kplog.Error(kptn + " - " + getRespMessage(4));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(kptn + " - " + ex.ToString());
                    conn.Close();
                    if (ex.Message.Equals("4"))
                    {
                        kplog.Error(kptn + " - " + getRespMessage(4));
                        return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                    }
                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(kptn + " - " + "Outer exception catched.", ex);
            return new SearchResponse { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
        }
    }

    [WebMethod(BufferResponse = false)]
    public SearchResponse rePrintGlobalMobile(String Username, String Password, String kptn, Int32 type, Double version, String stationcode)
    {
        try
        {
            if (!authenticate(Username, Password))
            {
                return new SearchResponse { respcode = 7, message = getRespMessage(7) };
            }
            if (decodeKPTNGlobalMobile(0, kptn) == "4" || (!istablevalid(decodeKPTNGlobalMobile(0, kptn))))
            {
                return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
            }

            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    return new SearchResponse { respcode = 10, message = getRespMessage(10) };
            //}
            if (type > 1 || 1 < 0)
            {
                kplog.Info(kptn + " - Type must not be greater or less than 1 and 0");
                return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = "Type must not be greater or less than 1 and 0" };
            }
            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                //DateTime TransDate;
                DateTime ClaimDate;// = DateTime.Now;
                //Boolean isClaimed;
                try
                {
                    conn.Open();
                    //trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (command = conn.CreateCommand())
                    {
                        List<object> a = new List<object>();

                        //SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();
                        //String query = "SELECT SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, kptn4, IDType, IDNo, ExpiryDate, SenderName, ReceiverName FROM " + generateTableName(2) + " as t INNER JOIN ON " + generateTableName(0) + " s ON t.KPTN6 = s.KPTNNo and t.MLKP4TN = s.kptn4 WHERE (MLKP4TN = @kptn OR MLKP4TN = @kptn) and IsClaimed = 0;";
                        SendoutInfo soi;
                        SenderInfo si;
                        ReceiverInfo ri;
                        PayoutInfo poi;
                        if (type == 0)
                        {
                            //String query = "SELECT SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, kptn4, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, RemoteBranch, RemoteOperatorID, ControlNo, BranchCode, Redeem, ORNo FROM " + generateTableName(0, TransDate.ToString("yyyy-MM-dd HH:mm:ss")) + " WHERE (KPTNNo = @kptn OR kptn4 = @kptn);";
                            String query = "SELECT ControlNo, KPTNNo, ORNo, IRNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, IsPassword, TransPassword, Purpose, OLDKPTNNo, IsClaimed, IsCancelled, syscreated, syscreator, sysmodified, sysmodifier, Source, Currency, Principal, Charge, OtherCharge, Redeem, Total, Promo, SenderIsSMS, Relation, Message, IDType, IDNo, ExpiryDate, CancelledDate, BranchCode, ZoneCode, TransDate, CancelledByOperatorID, CancelledByBranchCode, CancelledByZoneCode, CancelledByStationID, CancelReason, CancelDetails, SenderMLCardNo, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderBirthdate, SenderBranchID, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthDate, CancelCharge, ChargeTo,remotezonecode,isclaimed,exchangerate,amountpo,preferredcurrency FROM " + decodeKPTNGlobalMobile(0, kptn) + " WHERE KPTNNo = @kptn;";
                            command.CommandText = query;
                            command.Parameters.AddWithValue("kptn", kptn);
                            MySqlDataReader dataReader = command.ExecuteReader();

                            if (dataReader.HasRows)
                            {
                                dataReader.Read();
                                //if (dataReader["isclaimed"].ToString() == "1")
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 101, message = "Unable to reprint sendout... \nTransaction were already claimed!", ErrorDetail = "Dili na pwde maka-sendout reprint kun na-claimed na!" };
                                //}
                                //if (dataReader["IsCancelled"].ToString() == "1")
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 101, message = "Unable to reprint sendout... \nTransaction were cancelled!", ErrorDetail = "Dili na pwde maka-sendout reprint ky gi-cancel ang transaction!" };
                                //}

                                string sFName = dataReader["SenderFname"].ToString();
                                string sLName = dataReader["SenderLname"].ToString();
                                string sMName = dataReader["SenderMName"].ToString();
                                string sSt = dataReader["SenderStreet"].ToString();
                                string sPCity = dataReader["SenderProvinceCity"].ToString();
                                string sCtry = dataReader["SenderCountry"].ToString();
                                string sG = dataReader["SenderGender"].ToString();
                                string sCNo = dataReader["SenderContactNo"].ToString();
                                Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                                string sBID = dataReader["SenderBranchID"].ToString();
                                //string sCustID = dataReader["CustID"].ToString();
                                string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                                string SenderName = dataReader["SenderName"].ToString();

                                string rFName = dataReader["ReceiverFname"].ToString();
                                string rLName = dataReader["ReceiverLname"].ToString();
                                string rMName = dataReader["ReceiverMName"].ToString();
                                string rSt = dataReader["ReceiverStreet"].ToString();
                                string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                                string rCtry = dataReader["ReceiverCountry"].ToString();
                                string rG = dataReader["ReceiverGender"].ToString();
                                string rCNo = dataReader["ReceiverContactNo"].ToString();
                                string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                                //string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                                string ReceiverName = dataReader["ReceiverName"].ToString();

                                string SendoutControlNo = dataReader["ControlNo"].ToString();
                                string KPTNNo = dataReader["KPTNNo"].ToString();
                                //string kptn4 = dataReader["kptn4"].ToString();
                                string OperatorID = dataReader["OperatorID"].ToString();
                                Boolean IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                                string TransPassword = dataReader["TransPassword"].ToString();
                                DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"].ToString());
                                string Currency = dataReader["Currency"].ToString();
                                Decimal Principal = (Decimal)dataReader["Principal"];
                                //string SenderID = dataReader["CustID"].ToString();
                                Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string Relation = dataReader["Relation"].ToString();
                                string Message = dataReader["Message"].ToString();
                                string StationID = dataReader["StationID"].ToString();
                                string SourceOfFund = dataReader["Source"].ToString();
                                string IDType = dataReader["IDType"].ToString();
                                string IDNo = dataReader["IDNo"].ToString();
                                string ExpiryDate = dataReader["ExpiryDate"].ToString();
                                //RemoteBranch, RemoteOperatorID, IDType, IDNo, ExpiryDate,ControlNo
                                string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                                string ControlNo = dataReader["ControlNo"].ToString();
                                string BranchCode = dataReader["BranchCode"].ToString();
                                Decimal Redeem = (Decimal)dataReader["Redeem"];
                                string ORNo = dataReader["ORNo"].ToString();
                                Decimal Total = (Decimal)dataReader["Total"];
                                Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                                Decimal Charge = (Decimal)dataReader["Charge"];
                                string Purpose = dataReader["Purpose"].ToString();
                                Int32 ZoneCode = Convert.ToInt32(dataReader["ZoneCode"]);
                                Boolean IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                                Decimal CancelCharge = (dataReader["CancelCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["CancelCharge"];
                                Boolean x = Convert.ToBoolean(dataReader["IsCancelled"]);
                                Boolean IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                                String reason = dataReader["Reason"].ToString();
                                String cancelReason = dataReader["CancelReason"].ToString();
                                Int32 remotezone = Convert.ToInt32(dataReader["remotezonecode"]);

                                string preferredcurrency = dataReader["preferredcurrency"].ToString(); ;
                                Decimal amountPO = Convert.ToDecimal(dataReader["amountpo"].ToString());
                                Decimal exchangerate = Convert.ToDecimal(dataReader["exchangerate"].ToString());
                                // BETA for testing
                                //if (x && !cancelReason.Equals("Return to Sender"))
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 8, message = getRespMessage(8), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                //}

                                //if (!IsClaimed)
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                //}

                                //string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                //string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();

                                dataReader.Close();

                                //Decimal DormantCharge = CalculateDormantChargeGlobal(syscreated);
                                Decimal DormantCharge = 0.0M;

                                //command.Transaction = trans;
                                command.Parameters.Clear();
                                command.CommandText = "kpadminlogsglobal.savelog53";
                                command.CommandType = CommandType.StoredProcedure;

                                command.Parameters.AddWithValue("kptnno", KPTNNo);
                                command.Parameters.AddWithValue("action", "SO REPRINT");
                                command.Parameters.AddWithValue("isremote", IsRemote);
                                command.Parameters.AddWithValue("txndate", syscreated);
                                command.Parameters.AddWithValue("stationcode", stationcode);
                                command.Parameters.AddWithValue("stationno", StationID);
                                command.Parameters.AddWithValue("zonecode", ZoneCode);
                                command.Parameters.AddWithValue("branchcode", BranchCode);
                                //command.Parameters.AddWithValue("branchname", DBNull.Value);
                                command.Parameters.AddWithValue("operatorid", OperatorID);
                                command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                                command.Parameters.AddWithValue("remotereason", reason);
                                command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                                command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                                command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                                command.Parameters.AddWithValue("remotezonecode", remotezone);
                                command.Parameters.AddWithValue("type", "N");
                                try
                                {
                                    command.ExecuteNonQuery();
                                    //trans.Commit();
                                    conn.Close();
                                }
                                catch (MySqlException ex)
                                {
                                    kplog.Fatal(kptn + " - " + ex.ToString());
                                    //trans.Rollback();
                                    conn.Close();
                                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                                }

                                si = new SenderInfo
                                {
                                    FirstName = sFName,
                                    LastName = sLName,
                                    MiddleName = sMName,
                                    SenderName = SenderName,
                                    Street = sSt,
                                    ProvinceCity = sPCity,
                                    Country = sCtry,
                                    Gender = sG,
                                    ContactNo = sCNo,
                                    IsSMS = sIsSM,
                                    BranchID = sBID,
                                    //CustID = sCustID,
                                    SenderMLCardNo = sMLCardNo
                                };

                                ri = new ReceiverInfo
                                {
                                    FirstName = rFName,
                                    LastName = rLName,
                                    MiddleName = rMName,
                                    ReceiverName = ReceiverName,
                                    Street = rSt,
                                    ProvinceCity = rPCity,
                                    Country = rCtry,
                                    Gender = rG,
                                    ContactNo = rCNo,
                                    BirthDate = rBdate,
                                    //MLCardNo = rMLCardNo
                                };

                                soi = new SendoutInfo
                                {
                                    SendoutControlNo = SendoutControlNo,
                                    KPTNNo = KPTNNo,
                                    OperatorID = OperatorID,
                                    IsPassword = IsPassword,
                                    TransPassword = TransPassword,
                                    syscreated = syscreated,
                                    Currency = Currency,
                                    Principal = Principal,
                                    //SenderID = SenderID,
                                    SenderIsSMS = SenderIsSMS,
                                    Relation = Relation,
                                    Message = Message,
                                    StationID = StationID,
                                    SourceOfFund = SourceOfFund,
                                    //kptn4 = kptn4,
                                    IDNo = IDNo,
                                    IDType = IDType,
                                    ExpiryDate = ExpiryDate,
                                    DormantCharge = DormantCharge,
                                    RemoteOperatorID = RemoteOperatorID,
                                    RemoteBranch = RemoteBranch,
                                    BranchCode = BranchCode,
                                    Redeem = Redeem,
                                    ORNo = ORNo,
                                    Charge = Charge,
                                    OtherCharge = OtherCharge,
                                    Purpose = Purpose,
                                    Total = Total,
                                    ZoneCode = ZoneCode,
                                    IsRemote = IsRemote,
                                    CancelCharge = CancelCharge,
                                    RemoteReason = reason,
                                    RemoteZone = remotezone,
                                    ExchangeRate101 = exchangerate,
                                    AmountPO101 = amountPO,
                                    PreffedCur101 = preferredcurrency
                                };
                                kplog.Info(kptn + " - Reprinting Success");
                                return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                            }
                            else
                            {
                                kplog.Error(kptn + " - " + getRespMessage(4));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                            }
                        }
                        else
                        {
                            using (command = conn.CreateCommand())
                            {
                                String query1 = "SELECT /*date_format(sysmodified,'%m/%d/%Y') as*/ date(sysmodified) as sysmodified FROM " + decodeKPTNGlobalMobile(0, kptn) + " WHERE KPTNNo = @kptn1 and isCancelled = 0;";
                                command.CommandText = query1;
                                command.Parameters.AddWithValue("kptn1", kptn);
                                MySqlDataReader dataReader1 = command.ExecuteReader();

                                if (dataReader1.HasRows)
                                {
                                    dataReader1.Read();
                                    // throw new Exception(dataReader1["sysmodified"].GetType());
                                    // if (!dataReader1["sysmodified"].GetType().ToString().Equals("System.DBNull"))
                                    // if (!(dataReader1["sysmodified"].GetType().ToString().Equals("System.DBNull")) || dataReader1["sysmodified"].ToString() == "0000-00-00 00:00:00")
                                    //if (!(dataReader1["sysmodified"].GetType().ToString().Equals("System.DBNull")|| dataReader1["sysmodified"]))
                                    string dat = dataReader1["sysmodified"].ToString();
                                    if (!(dataReader1["sysmodified"].GetType().ToString().Equals("System.DBNull") || dat == "0/0/0000"))
                                    {
                                        // string mydate = dataReader1["sysmodified"].ToString(); //String.Format("yyyy-MM-dd", dataReader1["sysmodified"]);
                                        // ClaimDate = Convert.ToDateTime(mydate);
                                        // ClaimDate = DateTime.ParseExact(dataReader1["sysmodified"].ToString(), "yyyy-MM-dd HH:mm:ss,fff", System.Globalization.CultureInfo.InvariantCulture);
                                        ClaimDate = Convert.ToDateTime(dataReader1["sysmodified"].ToString());
                                        //TransDate = Convert.ToDateTime(dataReader1["TransDate"]);
                                        dataReader1.Close();
                                    }
                                    else
                                    {
                                        kplog.Error(kptn + " - " + getRespMessage(9));
                                        dataReader1.Close();
                                        conn.Close();
                                        return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                    }
                                }
                                else
                                {
                                    kplog.Error(kptn + " - " + getRespMessage(4));
                                    dataReader1.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                                }
                            }

                            String query = "SELECT if(cancelledtype is null or cancelledtype='','xxx','yyy') as iscancelled, Reason, DormantCharge, Balance, IsRemote, ZoneCode, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SOBranch, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ControlNo, KPTNNo, OperatorID, Currency, Principal, Relation, StationID,  IDType, IDNo, ExpiryDate, SenderName, ReceiverName, RemoteBranch, RemoteOperatorID, ControlNo, BranchCode, ClaimedDate, SODate, SOORNo, (SELECT TransPassword FROM " + decodeKPTNGlobalMobile(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as TransPass, (SELECT Charge FROM " + decodeKPTNGlobalMobile(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Charge, (SELECT OtherCharge FROM " + decodeKPTNGlobalMobile(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as OtherCharge, (SELECT Total FROM " + decodeKPTNGlobalMobile(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Total, (SELECT Purpose FROM " + decodeKPTNGlobalMobile(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Purpose, (SELECT Source FROM " + decodeKPTNGlobalMobile(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Source, (SELECT Message FROM " + decodeKPTNGlobalMobile(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Message, (SELECT IsClaimed FROM " + decodeKPTNGlobalMobile(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as IsClaimed,"
                                + "(SELECT ControlNo FROM " + decodeKPTNGlobalMobile(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as SendoutControl, remotezonecode,preferredPO,amountPO,exchangerate FROM " + generateTableNameGlobalMobile(1, ClaimDate.ToString("yyyy-MM-dd HH:mm:ss")) + " WHERE KPTNNo = @kptn or oldKPTNNo=@kptn ORDER BY ClaimedDate DESC LIMIT 1;";
                            command.CommandText = query;
                            command.Parameters.AddWithValue("kptn", kptn);

                            MySqlDataReader dataReader = command.ExecuteReader();
                            if (dataReader.HasRows)
                            {
                                dataReader.Read();
                                //if (dataReader["iscancelled"].ToString() == "xxx")
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 101, message = "Unable to reprint payout... \nTransaction was cancelled!", ErrorDetail = "Dili na pwde maka-payout reprint ky gi-cancel ang transaction!" };
                                //}

                                string sFName = dataReader["SenderFname"].ToString();
                                string sLName = dataReader["SenderLname"].ToString();
                                string sMName = dataReader["SenderMName"].ToString();
                                string sSt = dataReader["SenderStreet"].ToString();
                                string sPCity = dataReader["SenderProvinceCity"].ToString();
                                string sCtry = dataReader["SenderCountry"].ToString();
                                string sG = dataReader["SenderGender"].ToString();
                                string sCNo = dataReader["SenderContactNo"].ToString();
                                Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                                string sBID = dataReader["SOBranch"].ToString();
                                //string sCustID = dataReader["CustID"].ToString();
                                string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                                string SenderName = dataReader["SenderName"].ToString();
                                string rFName = dataReader["ReceiverFname"].ToString();
                                string rLName = dataReader["ReceiverLname"].ToString();
                                string rMName = dataReader["ReceiverMName"].ToString();
                                string rSt = dataReader["ReceiverStreet"].ToString();
                                string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                                string rCtry = dataReader["ReceiverCountry"].ToString();
                                string rG = dataReader["ReceiverGender"].ToString();
                                string rCNo = dataReader["ReceiverContactNo"].ToString();

                                string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                                //string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                                string ReceiverName = dataReader["ReceiverName"].ToString();

                                string SendoutControlNo = dataReader["SendoutControl"].ToString();
                                string KPTNNo = dataReader["KPTNNo"].ToString();
                                //string kptn4 = null;
                                string OperatorID = dataReader["OperatorID"].ToString();
                                //bool IsPassword = (bool)dataReader["IsPassword"];
                                string TransPassword = dataReader["TransPass"].ToString();
                                //DateTime syscreated = (DateTime)dataReader["TransDate "];
                                string Currency = dataReader["Currency"].ToString();
                                Decimal Principal = (Decimal)dataReader["Principal"];
                                //string SenderID = dataReader["CustID"].ToString();
                                Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string Relation = dataReader["Relation"].ToString();
                                string Message = null;
                                string StationID = dataReader["StationID"].ToString();
                                string SourceOfFund = dataReader["Source"].ToString();
                                string IDType = dataReader["IDType"].ToString();
                                string IDNo = dataReader["IDNo"].ToString();
                                string ExpiryDate = dataReader["ExpiryDate"].ToString();
                                string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                                string ControlNo = dataReader["ControlNo"].ToString();
                                string BranchCode = dataReader["BranchCode"].ToString();

                                string ClaimedDate = Convert.ToDateTime(dataReader["ClaimedDate"]).ToString("yyyy-MM-dd HH:mm:ss");
                                string SODate = Convert.ToDateTime(dataReader["SODate"]).ToString("yyyy-MM-dd HH:mm:ss");
                                string SOORNo = dataReader["SOORNo"].ToString();
                                string reason = dataReader["Reason"].ToString();


                                //Decimal Redeem = (Decimal)dataReader["Redeem"];

                                Decimal Total = (Decimal)dataReader["Total"];

                                Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                                Decimal Charge = (Decimal)dataReader["Charge"];
                                string Purpose = dataReader["Purpose"].ToString();
                                string message = dataReader["Message"].ToString();
                                Int32 ZoneCode = Convert.ToInt32(dataReader["ZoneCode"]);
                                //throw new Exception(dataReader["DormantCharge"].GetType().ToString());
                                Decimal Dormant = (dataReader["DormantCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["DormantCharge"];
                                Decimal Balance = (dataReader["Balance"] == DBNull.Value) ? 0 : (Decimal)dataReader["Balance"]; ;
                                Boolean IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                                //throw new Exception(dataReader["IsClaimed"].ToString());
                                String IsClaimed = dataReader["IsClaimed"].ToString();
                                Int32 remotezone = Convert.ToInt32(dataReader["remotezonecode"]);

                                Decimal amountPO = Convert.ToDecimal(dataReader["amountPO"].ToString());
                                Decimal exchangerate = Convert.ToDecimal(dataReader["exchangerate"].ToString());
                                string preferredPO = dataReader["preferredPO"].ToString();

                                if (!IsClaimed.Equals("1"))
                                {
                                    kplog.Error(kptn + " - " + getRespMessage(9));
                                    dataReader.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                }

                                dataReader.Close();
                                //Decimal DormantCharge = CalculateDormantCharge(syscreated);


                                //trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                                //command.Transaction = trans;
                                command.Parameters.Clear();
                                command.CommandText = "kpadminlogsglobal.savelog53";
                                command.CommandType = CommandType.StoredProcedure;

                                command.Parameters.AddWithValue("kptnno", KPTNNo);
                                command.Parameters.AddWithValue("action", "PO REPRINT");
                                command.Parameters.AddWithValue("isremote", IsRemote);
                                command.Parameters.AddWithValue("txndate", ClaimedDate);
                                command.Parameters.AddWithValue("stationcode", stationcode);
                                command.Parameters.AddWithValue("stationno", StationID);
                                command.Parameters.AddWithValue("zonecode", ZoneCode);
                                command.Parameters.AddWithValue("branchcode", BranchCode);
                                //command.Parameters.AddWithValue("branchname", DBNull.Value);
                                command.Parameters.AddWithValue("operatorid", OperatorID);
                                command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                                command.Parameters.AddWithValue("remotereason", reason);
                                command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                                command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                                command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                                command.Parameters.AddWithValue("remotezonecode", remotezone);
                                command.Parameters.AddWithValue("type", "N");
                                try
                                {
                                    command.ExecuteNonQuery();
                                    //trans.Commit();
                                    conn.Close();
                                }
                                catch (MySqlException ex)
                                {
                                    kplog.Error(kptn + " - " + ex.ToString());
                                    //trans.Rollback();
                                    conn.Close();
                                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                                }
                                si = new SenderInfo
                                {
                                    FirstName = sFName,
                                    LastName = sLName,
                                    MiddleName = sMName,
                                    SenderName = SenderName,
                                    Street = sSt,
                                    ProvinceCity = sPCity,
                                    Country = sCtry,
                                    Gender = sG,
                                    ContactNo = sCNo,
                                    IsSMS = sIsSM,
                                    BranchID = sBID,
                                    //CustID = sCustID,
                                    SenderMLCardNo = sMLCardNo
                                };

                                ri = new ReceiverInfo
                                {
                                    FirstName = rFName,
                                    LastName = rLName,
                                    MiddleName = rMName,
                                    ReceiverName = ReceiverName,
                                    Street = rSt,
                                    ProvinceCity = rPCity,
                                    Country = rCtry,
                                    Gender = rG,
                                    ContactNo = rCNo,
                                    BirthDate = rBdate,
                                    //MLCardNo = rMLCardNo
                                };

                                poi = new PayoutInfo
                                {
                                    SendoutControlNo = SendoutControlNo,
                                    KPTNNo = KPTNNo,
                                    OperatorID = OperatorID,
                                    //IsPassword = IsPassword,
                                    TransPassword = TransPassword,
                                    //syscreated = syscreated,
                                    Currency = Currency,
                                    Principal = Principal,
                                    //SenderID = SenderID,
                                    SenderIsSMS = SenderIsSMS,
                                    Relation = Relation,
                                    Message = Message,
                                    StationID = StationID,
                                    SourceOfFund = SourceOfFund,
                                    //kptn4 = kptn4,
                                    IDNo = IDNo,
                                    IDType = IDType,
                                    ExpiryDate = ExpiryDate,
                                    RemoteBranch = RemoteBranch,
                                    RemoteOperatorID = RemoteOperatorID,
                                    ControlNo = ControlNo,
                                    BranchCode = BranchCode,
                                    ClaimedDate = ClaimedDate,
                                    SODate = SODate,
                                    SOORNo = SOORNo,
                                    Charge = Charge,
                                    OtherCharge = OtherCharge,
                                    Total = Total,
                                    Purpose = Purpose,
                                    SOMessage = message,
                                    ZoneCode = ZoneCode,
                                    IsRemote = IsRemote,
                                    Balance = Balance,
                                    DormantCharge = Dormant,
                                    RemoteZone = remotezone,
                                    PreferredPO = preferredPO,
                                    AmountPO = amountPO,
                                    Exchangerate = exchangerate
                                    //DormantCharge = DormantCharge
                                };

                                kplog.Info(kptn + " - Reprinting Success");
                                return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, PayoutInfo = poi };

                            }
                            else
                            {
                                kplog.Error(kptn + " - " + getRespMessage(4));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                            }
                        }



                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(kptn + " - " + ex.ToString());
                    conn.Close();
                    if (ex.Message.Equals("4"))
                    {
                        kplog.Error(kptn + " - " + getRespMessage(4));
                        return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                    }
                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(kptn + " - Outer exception catched.", ex);
            return new SearchResponse { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
        }
    }

    [WebMethod]
    public PeepLog saveLogGlobal(String Username, String Password, String kptnno, String action, Boolean isremote, String stationcode, String stationno, int zonecode, String branchcode, String branchname, String operatorid, Double version, String cancelledreason, String remotereason, String remotebranch, String remoteoperator, String oldkptnno)
    {
        try
        {
            if (!authenticate(Username, Password))
            {
                return new PeepLog { respcode = 7, message = getRespMessage(7) };
            }
            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    return new PeepLog { respcode = 10, message = getRespMessage(10) };
            //}
            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                using (command = conn.CreateCommand())
                {
                    conn.Open();
                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    command.Transaction = trans;
                    command = new MySqlCommand("kpadminlogsglobal.savelog53", conn);
                    command.CommandType = CommandType.StoredProcedure;

                    command.Parameters.AddWithValue("kptnno", kptnno);
                    command.Parameters.AddWithValue("action", action);
                    command.Parameters.AddWithValue("isremote", isremote);
                    command.Parameters.AddWithValue("txndate", "now()");
                    command.Parameters.AddWithValue("stationcode", stationcode);
                    command.Parameters.AddWithValue("stationno", stationno);
                    command.Parameters.AddWithValue("zonecode", zonecode);
                    command.Parameters.AddWithValue("branchcode", branchcode);
                    //command.Parameters.AddWithValue("branchname", branchname);
                    command.Parameters.AddWithValue("operatorid", operatorid);
                    command.Parameters.AddWithValue("cancelledreason", cancelledreason);
                    command.Parameters.AddWithValue("remotereason", remotereason);
                    command.Parameters.AddWithValue("remotebranch", remotebranch);
                    command.Parameters.AddWithValue("remoteoperator", remoteoperator);
                    command.Parameters.AddWithValue("remotezonecode", 0);
                    command.Parameters.AddWithValue("oldkptnno", DBNull.Value);

                    command.Parameters.AddWithValue("type", "N");

                    try
                    {
                        command.ExecuteNonQuery();
                        trans.Commit();
                        conn.Close();
                        kplog.Info(kptnno + " - Log Successfully Saved");
                        return new PeepLog { respcode = 1, message = getRespMessage(1) };
                    }
                    catch (MySqlException ex)
                    {
                        kplog.Fatal(kptnno + " - " + ex.ToString());
                        trans.Rollback();
                        conn.Close();
                        return new PeepLog { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                    }
                }
            }
        }
        catch (MySqlException ex)
        {
            kplog.Fatal(kptnno + " - " + ex.ToString());
            dbconGlobal.CloseConnection();
            return new PeepLog { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }
        catch (Exception ex)
        {
            kplog.Fatal(kptnno + " - " + ex.ToString());
            dbconGlobal.CloseConnection();
            return new PeepLog { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }
    }

    [WebMethod]
    public RePrintResponse saveReprintGlobal(String Username, String Password, String KPTNNo, String OperatorID, String reprintBcode, Int32 reprintZcode, String Reason, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new RePrintResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new RePrintResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconGlobal.getConnection())
        {
            try
            {
                conn.Open();
                using (command = conn.CreateCommand())
                {
                    dt = getServerDateGlobal(true);
                    command.CommandText = "Insert into kpglobal.reprint (`KPTNNo`,`ReprintDate`,`OperatorID`,`BranchCode`,`ZoneCode`, `Reason`) values (@KPTNNo,@ReprintDate,@OperatorID,@BranchCode,@ZoneCode,@Reason)";
                    command.Parameters.AddWithValue("KPTNNo", KPTNNo);
                    //command.Parameters.AddWithValue("kptn4", kptn4);
                    command.Parameters.AddWithValue("ReprintDate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                    command.Parameters.AddWithValue("OperatorID", OperatorID);
                    command.Parameters.AddWithValue("BranchCode", reprintBcode);
                    command.Parameters.AddWithValue("ZoneCode", reprintZcode);
                    command.Parameters.AddWithValue("Reason", Reason);
                    command.ExecuteNonQuery();
                    conn.Close();
                    kplog.Info(KPTNNo + " - Successfully Saved to kpglobal.reprint");
                    return new RePrintResponse { respcode = 1, message = getRespMessage(1) };
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(KPTNNo + " - " + ex.ToString());
                conn.Close();
                return new RePrintResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }

    }

    private object saveSendoutGlobal(List<Object> values, String series, int syscreator, String bcode, Int32 zonecode, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderContactNo, int SenderIsSMS, String SenderBirthdate, String SenderBranchID, String ReceiverMLCardNO, String ReceiverFName, String ReceiverLName, String ReceiverMName, String ReceiverStreet, String ReceiverProvinceCity, String ReceiverCountry, String ReceiverGender, String ReceiverContactNo, String ReceiverBirthdate, Int32 type, String ExpiryDate, String stationcode, String kptn, Double vat, Int32 remotezcode, String RemoteBranchCode)
    {

        try
        {
            //String senderid = "";
            dt = getServerDateGlobal(false);
            int sr = ConvertSeries(series);

            //new sheena
            String month = dt.ToString("MM");
            String tblorig = "sendout" + dt.ToString("MM") + dt.ToString("dd");

            String controlno = values[0].ToString();
            String OperatorID = values[1].ToString();
            String station = values[2].ToString();
            String IsRemote = values[3].ToString().Trim();
            String RemoteBranch = values[4].ToString();
            String RemoteOperatorID = values[5].ToString();
            String RemoteReason;

            if (RemoteBranchCode == string.Empty)
                RemoteBranchCode = RemoteBranch;
            //new
            String ispassword = values[7].ToString();
            String transpassword = values[8].ToString();
            String purpose = values[9].ToString();
            String syscreatr = values[10].ToString();
            String source = values[11].ToString();
            String currency = values[12].ToString();
            Double principal = Convert.ToDouble(values[13]);
            Double charge = Convert.ToDouble(values[14]);
            Double othercharge = Convert.ToDouble(values[15]);
            Double redeem = Convert.ToDouble(values[16]);
            Double total = Convert.ToDouble(values[17]);
            String promo = values[18].ToString();
            String relation = values[19].ToString();
            String message = values[20].ToString();
            String idtype = values[21].ToString();
            String idno = values[22].ToString();
            String pocurrency = values[23].ToString();
            String paymenttype = values[24].ToString();
            String bankname = values[25].ToString();
            String cardcheckno = values[26].ToString();
            String cardcheckexpdate = values[27].ToString();
            Double exchangerate = Convert.ToDouble(values[28]);
            Double poamount = Convert.ToDouble(values[29]);

            //
            //additional trapping to avoid duplicate control
            //
            string value101 = string.Empty;
            using (MySqlConnection checkinglang = dbconGlobal.getConnection())
            {
                checkinglang.Open();
                //  Int32 maxontrans = 0;
                try
                {
                    //  MySqlCommand cmdchecking = new MySqlCommand();
                    using (command = checkinglang.CreateCommand())
                    {

                        string checkifcontrolexist = "select controlno from " + generateTableNameGlobal(0, null) + " where controlno=@controlno";
                        command.CommandTimeout = 0;
                        command.CommandText = checkifcontrolexist;
                        command.Parameters.AddWithValue("controlno", controlno);
                        MySqlDataReader controlexistreader = command.ExecuteReader();
                        if (controlexistreader.HasRows)
                        {
                            controlexistreader.Close();

                            //string getcontrolmax = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max from " + generateTableNameGlobal(0, null) + " where if(isremote=1,remotebranch,branchcode) = @branchcode and stationid = @stationid and if(remotezonecode=0 or remotezonecode is null, zonecode,remotezonecode) =@zonecode";
                            string query101 = string.Empty;
                            string branchcode101 = string.Empty;
                            string zonecode101 = string.Empty;
                            string stationnum = string.Empty;
                            if (remotezcode == 0)
                                zonecode101 = zonecode.ToString();
                            else
                                zonecode101 = remotezcode.ToString();

                            if (IsRemote == "1")
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameGlobal(0, null) + " where remotebranch = @branchcode and stationid = @stationid and remotezonecode =@zonecode";
                                branchcode101 = RemoteBranchCode;
                                stationnum = "00";
                            }
                            else
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameGlobal(0, null) + " where branchcode = @branchcode and stationid = @stationid and zonecode=@zonecode";
                                branchcode101 = bcode;
                                stationnum = station;
                            }

                            command.CommandText = query101;
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("branchcode", branchcode101);
                            command.Parameters.AddWithValue("stationid", station);
                            command.Parameters.AddWithValue("zonecode", zonecode101);

                            MySqlDataReader controlmaxreader = command.ExecuteReader();
                            if (controlmaxreader.Read())
                            {
                                sr = Convert.ToInt32(controlmaxreader["max1"].ToString()) + 1;

                                //controlmaxreader.Close();
                            }
                            controlmaxreader.Close();

                            command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("st", stationnum);
                            command.Parameters.AddWithValue("bcode", branchcode101);
                            command.Parameters.AddWithValue("series", sr);
                            command.Parameters.AddWithValue("zcode", zonecode101);
                            command.Parameters.AddWithValue("tp", type);
                            int abc101 = command.ExecuteNonQuery();

                            value101 = "isremote:" + IsRemote + "\nstation:" + station + "\nremotebranchcode:" + RemoteBranchCode + "\nbcode:" + bcode + "\n series:" + sr + "\n remotezonecode" + remotezcode + "\nzonecode:" + zonecode + "\ntype" + type + "\nexecuted: " + abc101;
                            //command.Dispose();
                            checkinglang.Close();
                            dbconGlobal.CloseConnection();
                            kplog.Error(kptn + " - " + controlno + " - Problem saving transaction. Please close the sendout window and try again.");
                            return new SendoutResponse { respcode = 0, message = "Problem saving transaction. Please close the sendout window and try again." };

                        }
                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(kptn + " - " + ex.ToString());
                    checkinglang.Close();
                    dbconGlobal.CloseConnection();
                    return new SendoutResponse { respcode = 0, message = "Problem saving transaction. Please close the sendout window and try again. \n" + ex.ToString() };
                }
                checkinglang.Close();
                dbconGlobal.CloseConnection();
            }
            //
            //end of trapping for duplicate control
            //



            StringBuilder query = new StringBuilder("Insert into " + generateTableNameGlobal(0, null) + "(");
            List<string> li = new List<string>();
            List<string> param = new List<string>();
            String orno;

            //save_sendout proc
            param.Add("ControlNo");
            param.Add("OperatorID");
            param.Add("StationID");
            param.Add("IsRemote");
            param.Add("RemoteBranch");
            param.Add("RemoteOperatorID");
            param.Add("Reason");
            param.Add("IsPassword");
            param.Add("TransPassword");
            param.Add("Purpose");
            param.Add("syscreator");
            param.Add("Source");
            param.Add("Currency");
            param.Add("Principal");
            param.Add("Charge");
            param.Add("OtherCharge");
            param.Add("Redeem");
            param.Add("Total");
            param.Add("Promo");
            param.Add("Relation");
            param.Add("Message");
            param.Add("IDType");
            param.Add("IDNo");
            param.Add("PreferredCurrency");
            param.Add("PaymentType");
            param.Add("BankName");
            param.Add("CardCheckNo");
            param.Add("CardCheckExpDate");
            param.Add("ExchangeRate");
            param.Add("AmountPO");

            param.Add("isClaimed");
            param.Add("IsCancelled");
            param.Add("KPTNNo");
            param.Add("ORNo");
            //param.Add("kptn4");
            param.Add("syscreated");
            param.Add("BranchCode");
            param.Add("ZoneCode");
            param.Add("TransDate");
            param.Add("ExpiryDate");
            param.Add("SenderMLCardNo");
            param.Add("SenderFName");
            param.Add("SenderLName");
            param.Add("SenderMName");
            param.Add("SenderName");
            param.Add("SenderStreet");
            param.Add("SenderProvinceCity");
            param.Add("SenderCountry");
            param.Add("SenderGender");
            param.Add("SenderContactNo");
            param.Add("SenderBirthDate");
            param.Add("SenderBranchID");
            //param.Add("ReceiverMLCardNo");
            param.Add("ReceiverFName");
            param.Add("ReceiverLName");
            param.Add("ReceiverMName");
            param.Add("ReceiverName");
            param.Add("ReceiverStreet");
            param.Add("ReceiverProvinceCity");
            param.Add("ReceiverCountry");
            param.Add("ReceiverGender");
            param.Add("ReceiverContactNo");
            param.Add("ReceiverBirthDate");
            param.Add("SenderIsSMS");
            param.Add("RemoteZoneCode");
            param.Add("vat");
            param.Add("TransType");

            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                conn.Open();

                trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                try
                {
                    //throw new Exception("BOOM");
                    using (command = conn.CreateCommand())
                    {
                        command.CommandText = "SET autocommit=0;";
                        command.ExecuteNonQuery();

                        command.Transaction = trans;


                        for (var f = 0; f < param.Count; f++)
                        {
                            query.Append("`").Append(param[f]).Append("`");
                            if ((f + 1) != param.Count)
                            {
                                query.Append(",");
                            }
                            li.Add(param[f]);

                        }
                        query.Append(") values ( ");

                        for (var f = 0; f < param.Count; f++)
                        {
                            query.Append("@").Append(param[f]);
                            if ((f + 1) != param.Count)
                            {
                                query.Append(", ");
                            }
                            li.Add(param[f]);

                        }
                        query.Append(")");

                        //throw new Exception(query.ToString());
                        //Reader.Close();


                        //return li;
                    }
                    //throw new Exception(query.ToString());
                    using (command = conn.CreateCommand())
                    {
                        //conn.Open();

                        ////String kptn;
                        //String controlno = values[0].ToString();
                        //String OperatorID = values[1].ToString();
                        //String station = values[2].ToString();
                        //String IsRemote = values[3].ToString().Trim();
                        //String RemoteBranch = values[4].ToString();
                        //String RemoteOperatorID = values[5].ToString();
                        //String RemoteReason;
                        ////new
                        //String ispassword = values[7].ToString();
                        //String transpassword = values[8].ToString();
                        //String purpose = values[9].ToString();
                        //String syscreatr = values[10].ToString();
                        //String source = values[11].ToString();
                        //String currency = values[12].ToString();
                        //Double principal = Convert.ToDouble(values[13]);
                        //Double charge = Convert.ToDouble(values[14]);
                        //Double othercharge = Convert.ToDouble(values[15]);
                        //Double redeem = Convert.ToDouble(values[16]);
                        //Double total = Convert.ToDouble(values[17]);
                        //String promo = values[18].ToString();
                        //String relation = values[19].ToString();
                        //String message = values[20].ToString();
                        //String idtype = values[21].ToString();
                        //String idno = values[22].ToString();
                        //String pocurrency = values[23].ToString();
                        //String paymenttype = values[24].ToString();
                        //String bankname = values[25].ToString();
                        //String cardcheckno = values[26].ToString();
                        //String cardcheckexpdate = values[27].ToString();
                        //Double exchangerate = Convert.ToDouble(values[28]);
                        //Double poamount = Convert.ToDouble(values[29]);
                        ////13 14 17

                        if (Convert.ToDouble(values[13]) == 0 || Convert.ToDouble(values[14]) == 0 || Convert.ToDouble(values[17]) == 0)
                        {
                            kplog.Error(kptn + " - " + getRespMessage(15));
                            return new SendoutResponse { respcode = 15, message = getRespMessage(15) };
                        }

                        try
                        {
                            RemoteReason = values[6].ToString();
                        }
                        catch (Exception ex)
                        {
                            kplog.Error(kptn + " - Remote reason set to null - " + ex.ToString());
                            RemoteReason = null;
                        }

                        //Remove to support seccom trappings
                        if (IsRemote.Equals("1"))
                        {
                            //kptn = validateGeneratedKPTN(RemoteBranch, zonecode, String.Empty);
                            orno = generateResiboGlobal(RemoteBranch, zonecode, command);
                        }
                        else
                        {
                            //kptn = validateGeneratedKPTN(bcode, zonecode, String.Empty);
                            orno = generateResiboGlobal(bcode, zonecode, command);
                        }

                        command.CommandText = query.ToString();

                        for (var x = 0; x < values.Count; x++)
                        {


                            //Tinyint
                            if (x == 3 || x == 7)
                            {
                                command.Parameters.AddWithValue(li[x], Convert.ToInt32(values[x]));
                            }
                            //Double
                            else if (x == 13 || x == 14 || x == 15 || x == 16 || x == 17)
                            {
                                command.Parameters.AddWithValue(li[x], Convert.ToDecimal(values[x]));
                            }
                            else if (x == 10)
                            {
                                command.Parameters.AddWithValue(li[x], Convert.ToInt64(values[x]));
                            }
                            else
                            {
                                command.Parameters.AddWithValue(li[x], values[x]);
                            }

                        }
                        //command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("IsClaimed", 0);
                        command.Parameters.AddWithValue("IsCancelled", 0);
                        //command.Parameters.AddWithValue("IsReturned", 0);
                        command.Parameters.AddWithValue("ORNo", orno);
                        //throw new Exception(kptn);
                        command.Parameters.AddWithValue("KPTNNo", kptn);
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        //command.Parameters.AddWithValue("kptn4", kptn4);
                        command.Parameters.AddWithValue("BranchCode", bcode);
                        command.Parameters.AddWithValue("ZoneCode", zonecode);
                        command.Parameters.AddWithValue("TransDate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("ExpiryDate", ExpiryDate);
                        //command.Parameters.AddWithValue("CustID", senderid);
                        command.Parameters.AddWithValue("SenderMLCardNO", SenderMLCardNO);
                        command.Parameters.AddWithValue("SenderFName", SenderFName);
                        command.Parameters.AddWithValue("SenderLName", SenderLName);
                        command.Parameters.AddWithValue("SenderMName", SenderMName);
                        command.Parameters.AddWithValue("SenderName", SenderLName + ", " + SenderFName + " " + SenderMName);
                        command.Parameters.AddWithValue("SenderStreet", SenderStreet);
                        command.Parameters.AddWithValue("SenderProvinceCity", SenderProvinceCity);
                        command.Parameters.AddWithValue("SenderCountry", SenderCountry);
                        command.Parameters.AddWithValue("SenderGender", SenderGender);
                        command.Parameters.AddWithValue("SenderContactNo", SenderContactNo);
                        command.Parameters.AddWithValue("SenderIsSMS", SenderIsSMS);
                        command.Parameters.AddWithValue("SenderBirthdate", SenderBirthdate);
                        command.Parameters.AddWithValue("SenderBranchID", SenderBranchID);
                        //command.Parameters.AddWithValue("ReceiverMLCardNO", ReceiverMLCardNO);
                        command.Parameters.AddWithValue("ReceiverFName", ReceiverFName);
                        command.Parameters.AddWithValue("ReceiverLName", ReceiverLName);
                        command.Parameters.AddWithValue("ReceiverMName", ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverName", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverStreet", ReceiverStreet);
                        command.Parameters.AddWithValue("ReceiverProvinceCity", ReceiverProvinceCity);
                        command.Parameters.AddWithValue("ReceiverCountry", ReceiverCountry);
                        command.Parameters.AddWithValue("ReceiverGender", ReceiverGender);
                        command.Parameters.AddWithValue("ReceiverContactNo", ReceiverContactNo);
                        command.Parameters.AddWithValue("ReceiverBirthdate", ReceiverBirthdate);
                        command.Parameters.AddWithValue("RemoteZoneCode", remotezcode);
                        command.Parameters.AddWithValue("vat", vat);
                        command.Parameters.AddWithValue("TransType", "INTERNATIONAL");



                        try
                        {
                            int xsave = command.ExecuteNonQuery();
                            if (xsave < 1)
                            {
                                trans.Rollback();
                                dbconGlobal.CloseConnection();
                                kplog.Error(kptn + " - " + getRespMessage(12));
                                return new SendoutResponse { respcode = 12, message = getRespMessage(12), ErrorDetail = "Review paramerters." };
                            }
                            else
                            {
                                using (command = conn.CreateCommand())
                                {

                                    dt = getServerDateGlobal(true);

                                    String insert = "Insert into kptransactionsglobal.sendout" + month + " (controlno,kptnno,orno,operatorid," +
                                    "stationid,isremote,remotebranch,remoteoperatorid,reason,ispassword,transpassword,purpose,isclaimed,iscancelled," +
                                    "syscreated,syscreator,source,currency,principal,charge,othercharge,redeem,total,promo,senderissms,relation,message," +
                                    "idtype,idno,expirydate,branchcode,zonecode,transdate,sendermlcardno,senderfname,senderlname,sendermname,sendername," +
                                    "senderstreet,senderprovincecity,sendercountry,sendergender,sendercontactno,senderbirthdate,senderbranchid," +
                                    "receiverfname,receiverlname,receivermname,receivername,receiverstreet,receiverprovincecity,receivercountry," +
                                    "receivergender,receivercontactno,receiverbirthdate,vat,remotezonecode,tableoriginated,`year`,pocurrency,poamount," +
                                    "paymenttype,bankname,cardcheckno,cardcheckexpdate,TransType) values (@controlno,@kptnno,@orno,@operatorid," +
                                    "@stationid,@isremote,@remotebranch,@remoteoperatorid,@reason,@ispassword,@transpassword,@purpose,@isclaimed,@iscancelled," +
                                    "@syscreated,@syscreator,@source,@currency,@principal,@charge,@othercharge,@redeem,@total,@promo,@senderissms,@relation,@message," +
                                    "@idtype,@idno,@expirydate,@branchcode,@zonecode,@transdate,@sendermlcardno,@senderfname,@senderlname,@sendermname,@sendername," +
                                    "@senderstreet,@senderprovincecity,@sendercountry,@sendergender,@sendercontactno,@senderbirthdate,@senderbranchid," +
                                    "@receiverfname,@receiverlname,@receivermname,@receivername,@receiverstreet,@receiverprovincecity,@receivercountry," +
                                    "@receivergender,@receivercontactno,@receiverbirthdate,@vat,@remotezonecode,@tableoriginated,@yr,@pocurrency,@poamount," +
                                    "@paymenttype,@bankname,@cardcheckno,@cardcheckexpdate,@transtype)";
                                    command.CommandText = insert;

                                    command.Parameters.AddWithValue("controlno", controlno);
                                    command.Parameters.AddWithValue("kptnno", kptn);
                                    command.Parameters.AddWithValue("orno", orno);
                                    command.Parameters.AddWithValue("operatorid", OperatorID);
                                    command.Parameters.AddWithValue("stationid", station);
                                    command.Parameters.AddWithValue("isremote", IsRemote);
                                    command.Parameters.AddWithValue("remotebranch", RemoteBranch);
                                    command.Parameters.AddWithValue("remoteoperatorid", RemoteOperatorID);
                                    command.Parameters.AddWithValue("reason", RemoteReason);
                                    command.Parameters.AddWithValue("ispassword", ispassword);
                                    command.Parameters.AddWithValue("transpassword", transpassword);
                                    command.Parameters.AddWithValue("purpose", purpose);
                                    command.Parameters.AddWithValue("isclaimed", 0);
                                    command.Parameters.AddWithValue("iscancelled", 0);
                                    command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                    command.Parameters.AddWithValue("syscreator", syscreator);
                                    command.Parameters.AddWithValue("source", source);
                                    command.Parameters.AddWithValue("currency", currency);
                                    command.Parameters.AddWithValue("principal", principal);
                                    command.Parameters.AddWithValue("charge", charge);
                                    command.Parameters.AddWithValue("othercharge", othercharge);
                                    command.Parameters.AddWithValue("redeem", redeem);
                                    command.Parameters.AddWithValue("total", total);
                                    command.Parameters.AddWithValue("promo", promo);
                                    command.Parameters.AddWithValue("senderissms", SenderIsSMS);
                                    command.Parameters.AddWithValue("relation", relation);
                                    command.Parameters.AddWithValue("message", message);
                                    command.Parameters.AddWithValue("idtype", idtype);
                                    command.Parameters.AddWithValue("idno", idno);
                                    command.Parameters.AddWithValue("expirydate", ExpiryDate);
                                    command.Parameters.AddWithValue("branchcode", bcode);
                                    command.Parameters.AddWithValue("zonecode", zonecode);
                                    command.Parameters.AddWithValue("transdate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                    command.Parameters.AddWithValue("sendermlcardno", SenderMLCardNO);
                                    command.Parameters.AddWithValue("senderfname", SenderFName);
                                    command.Parameters.AddWithValue("senderlname", SenderLName);
                                    command.Parameters.AddWithValue("sendermname", SenderMName);
                                    command.Parameters.AddWithValue("sendername", SenderLName + ", " + SenderFName + " " + SenderMName);
                                    command.Parameters.AddWithValue("senderstreet", SenderStreet);
                                    command.Parameters.AddWithValue("senderprovincecity", SenderProvinceCity);
                                    command.Parameters.AddWithValue("sendercountry", SenderCountry);
                                    command.Parameters.AddWithValue("sendergender", SenderGender);
                                    command.Parameters.AddWithValue("sendercontactno", SenderContactNo);
                                    command.Parameters.AddWithValue("senderbirthdate", SenderBirthdate);
                                    command.Parameters.AddWithValue("senderbranchid", SenderBranchID);
                                    command.Parameters.AddWithValue("receiverfname", ReceiverFName);
                                    command.Parameters.AddWithValue("receiverlname", ReceiverLName);
                                    command.Parameters.AddWithValue("receivermname", ReceiverMName);
                                    command.Parameters.AddWithValue("receivername", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                                    command.Parameters.AddWithValue("receiverstreet", ReceiverStreet);
                                    command.Parameters.AddWithValue("receiverprovincecity", ReceiverProvinceCity);
                                    command.Parameters.AddWithValue("receivercountry", ReceiverCountry);
                                    command.Parameters.AddWithValue("receivergender", ReceiverGender);
                                    command.Parameters.AddWithValue("receivercontactno", ReceiverContactNo);
                                    command.Parameters.AddWithValue("receiverbirthdate", ReceiverBirthdate);
                                    command.Parameters.AddWithValue("chargeto", " ");
                                    command.Parameters.AddWithValue("vat", vat);
                                    command.Parameters.AddWithValue("remotezonecode", remotezcode);
                                    command.Parameters.AddWithValue("tableoriginated", tblorig);
                                    command.Parameters.AddWithValue("yr", dt.ToString("yyyy"));
                                    command.Parameters.AddWithValue("pocurrency", pocurrency);
                                    command.Parameters.AddWithValue("poamount", poamount);
                                    command.Parameters.AddWithValue("exchangerate", exchangerate);
                                    command.Parameters.AddWithValue("paymenttype", paymenttype);
                                    command.Parameters.AddWithValue("bankname", bankname);
                                    command.Parameters.AddWithValue("cardcheckno", cardcheckno);
                                    command.Parameters.AddWithValue("cardcheckexpdate", cardcheckexpdate);
                                    command.Parameters.AddWithValue("transtype", "INTERNATIONAL");
                                    command.ExecuteNonQuery();

                                    //new
                                    //command.Parameters.Clear();
                                    //command.CommandText = "kptransactionsglobal.save_sendout";
                                    //command.CommandType = CommandType.StoredProcedure;
                                    //command.Parameters.AddWithValue("s_month", month);
                                    //command.Parameters.AddWithValue("controlno", controlno);
                                    //command.Parameters.AddWithValue("kptnno", kptn);
                                    //command.Parameters.AddWithValue("orno", orno);
                                    //command.Parameters.AddWithValue("operatorid", OperatorID);
                                    //command.Parameters.AddWithValue("stationid", station);
                                    //command.Parameters.AddWithValue("isremote", IsRemote);
                                    //command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals("") ? "tesy" : RemoteBranch));
                                    //command.Parameters.AddWithValue("remoteoperatorid", RemoteOperatorID);
                                    //command.Parameters.AddWithValue("reason", RemoteReason);
                                    //command.Parameters.AddWithValue("ispassword", ispassword);
                                    //command.Parameters.AddWithValue("transpassword", transpassword);
                                    //command.Parameters.AddWithValue("purpose", purpose);
                                    //command.Parameters.AddWithValue("isclaimed", 0);
                                    //command.Parameters.AddWithValue("iscancelled", 0);
                                    //command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                    //command.Parameters.AddWithValue("syscreator", syscreator);
                                    //command.Parameters.AddWithValue("source", source);
                                    //command.Parameters.AddWithValue("currency", currency);
                                    //command.Parameters.AddWithValue("principal", principal);
                                    //command.Parameters.AddWithValue("charge", charge);
                                    //command.Parameters.AddWithValue("othercharge", othercharge);
                                    //command.Parameters.AddWithValue("redeem", redeem);
                                    //command.Parameters.AddWithValue("total", total);
                                    //command.Parameters.AddWithValue("promo", (promo.Equals(String.Empty) ? "tesy" : promo));
                                    //command.Parameters.AddWithValue("senderissms", SenderIsSMS);
                                    //command.Parameters.AddWithValue("relation", relation);
                                    //command.Parameters.AddWithValue("message", message);
                                    //command.Parameters.AddWithValue("idtype", idtype);
                                    //command.Parameters.AddWithValue("idno", idno);
                                    //command.Parameters.AddWithValue("expirydate", ExpiryDate);
                                    //command.Parameters.AddWithValue("branchcode", bcode);
                                    //command.Parameters.AddWithValue("zonecode", zonecode);
                                    //command.Parameters.AddWithValue("transdate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                    //command.Parameters.AddWithValue("sendermlcardno", SenderMLCardNO);
                                    //command.Parameters.AddWithValue("senderfname", SenderFName);
                                    //command.Parameters.AddWithValue("senderlname", SenderLName);
                                    //command.Parameters.AddWithValue("sendermname", SenderMName);
                                    //command.Parameters.AddWithValue("sendername", SenderLName + ", " + SenderFName + " " + SenderMName);
                                    //command.Parameters.AddWithValue("senderstreet", SenderStreet);
                                    //command.Parameters.AddWithValue("senderprovincecity", SenderProvinceCity);
                                    //command.Parameters.AddWithValue("sendercountry", SenderCountry);
                                    //command.Parameters.AddWithValue("sendergender", SenderGender);
                                    //command.Parameters.AddWithValue("sendercontactno", SenderContactNo);
                                    //command.Parameters.AddWithValue("senderbirthdate", SenderBirthdate);
                                    //command.Parameters.AddWithValue("senderbranchid", SenderBranchID);
                                    //command.Parameters.AddWithValue("receiverfname", ReceiverFName);
                                    //command.Parameters.AddWithValue("receiverlname", ReceiverLName);
                                    //command.Parameters.AddWithValue("receivermname", ReceiverMName);
                                    //command.Parameters.AddWithValue("receivername", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                                    //command.Parameters.AddWithValue("receiverstreet", ReceiverStreet);
                                    //command.Parameters.AddWithValue("receiverprovincecity", ReceiverProvinceCity);
                                    //command.Parameters.AddWithValue("receivercountry", ReceiverCountry);
                                    //command.Parameters.AddWithValue("receivergender", ReceiverGender);
                                    //command.Parameters.AddWithValue("receivercontactno", (ReceiverContactNo.Equals(String.Empty) ? " " : ReceiverContactNo));
                                    //command.Parameters.AddWithValue("receiverbirthdate", ReceiverBirthdate);
                                    //command.Parameters.AddWithValue("chargeto", "tesy");
                                    //command.Parameters.AddWithValue("vat", vat);
                                    //command.Parameters.AddWithValue("remotezonecode", remotezcode);
                                    //    command.Parameters.AddWithValue("tableoriginated", tblorig);
                                    //    command.Parameters.AddWithValue("year", dt.ToString("yyyy"));
                                    //    command.ExecuteNonQuery();
                                }
                            }
                        }
                        catch (MySqlException myyyx)
                        {
                            kplog.Fatal(kptn + " - " + myyyx.ToString());
                            //if (myyyx.Message.Contains("Duplicate"))
                            if (myyyx.Number == 1062)
                            {
                                kplog.Fatal(kptn + " - mysql errcode: 1062", myyyx);
                                command.Parameters.Clear();
                                //sendout_update_control proc
                                if (IsRemote.Equals("1"))
                                {
                                    //throw new Exception("boom");
                                    //int intzcode = Convert.ToInt32(zonecode);
                                    //cr = generateControl(loginuser, loginpass, RemoteBranch, type, OperatorID, intzcode, "00");

                                    command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                                    command.Parameters.AddWithValue("st", "00");
                                    command.Parameters.AddWithValue("bcode", RemoteBranch);
                                    command.Parameters.AddWithValue("series", sr + 1);
                                    command.Parameters.AddWithValue("zcode", remotezcode);
                                    command.Parameters.AddWithValue("tp", type);
                                    int x = command.ExecuteNonQuery();
                                    if (x < 1)
                                    {
                                        kplog.Error(kptn + " - Review Parameters");
                                        trans.Rollback();
                                        dbconGlobal.CloseConnection();

                                        return new SendoutResponse { respcode = 12, message = getRespMessage(12), ErrorDetail = "Review paramerters." };
                                    }
                                }
                                else
                                {
                                    //int intzcode = Convert.ToInt32(zonecode);
                                    //cr = generateControl(loginuser, loginpass, bcode, type, OperatorID, intzcode, station);
                                    command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                                    command.Parameters.AddWithValue("st", station);
                                    command.Parameters.AddWithValue("bcode", bcode);
                                    command.Parameters.AddWithValue("series", sr + 1);
                                    command.Parameters.AddWithValue("zcode", zonecode);
                                    command.Parameters.AddWithValue("tp", type);
                                    command.ExecuteNonQuery();
                                    int x = command.ExecuteNonQuery();
                                    if (x < 1)
                                    {
                                        kplog.Error(kptn + " - Review Parameters");
                                        trans.Rollback();
                                        dbconGlobal.CloseConnection();

                                        return new SendoutResponse { respcode = 12, message = getRespMessage(12), ErrorDetail = "Review parameters." };
                                    }
                                }

                                trans.Commit();

                                conn.Close();

                                return new SendoutResponse { respcode = 13, message = "Problem saving transaction. Please close the sendout window and open again. Thank you.", ErrorDetail = "Review parameters." };
                            }
                            else
                            {

                                if (myyyx.Number == 1213)
                                {
                                    kplog.Fatal(kptn + " - mysql errcode: 1213", myyyx);
                                    trans.Rollback();
                                    dbconGlobal.CloseConnection();

                                    return new SendoutResponse { respcode = 11, message = getRespMessage(11), ErrorDetail = "Problem occured during saving. Please resave the transaction." };
                                }
                                else
                                {
                                    trans.Rollback();
                                    dbconGlobal.CloseConnection();
                                    kplog.Fatal(kptn + " - " + myyyx.ToString());
                                    return new SendoutResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = myyyx.ToString() };
                                }
                            }
                        }

                        //command.CommandText = "Insert into " + generateTableName(2, null) + "(`KPTN6`, `MLKP4TN`, `TransDate`, `IsClaimed`, `IsCancelled`) values (@KPTN6, @MLKP4TN, @TransDate1, @IsClaimed1, @IsCancelled1)";
                        //command.Parameters.AddWithValue("KPTN6", kptn);
                        //command.Parameters.AddWithValue("MLKP4TN", kptn4);
                        //command.Parameters.AddWithValue("TransDate1", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        //command.Parameters.AddWithValue("IsClaimed1", 0);
                        //command.Parameters.AddWithValue("IsCancelled1", 0);
                        //command.ExecuteNonQuery();

                        //ControlResponse cr;

                        //sendout_update_control proc
                        if (IsRemote.Equals("1"))
                        {
                            //throw new Exception("boom");
                            //int intzcode = Convert.ToInt32(zonecode);
                            //cr = generateControl(loginuser, loginpass, RemoteBranch, type, OperatorID, intzcode, "00");

                            command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.AddWithValue("st", "00");
                            command.Parameters.AddWithValue("bcode", RemoteBranch);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", remotezcode);
                            command.Parameters.AddWithValue("tp", type);
                            int x = command.ExecuteNonQuery();
                            if (x < 1)
                            {
                                kplog.Error(kptn + " - Review Parameters");
                                trans.Rollback();
                                dbconGlobal.CloseConnection();

                                return new SendoutResponse { respcode = 12, message = getRespMessage(12), ErrorDetail = "Review paramerters." };
                            }
                        }
                        else
                        {
                            //int intzcode = Convert.ToInt32(zonecode);
                            //cr = generateControl(loginuser, loginpass, bcode, type, OperatorID, intzcode, station);
                            command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.AddWithValue("st", station);
                            command.Parameters.AddWithValue("bcode", bcode);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", zonecode);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                            int x = command.ExecuteNonQuery();
                            if (x < 1)
                            {
                                kplog.Error(kptn + " - Review Parameters");
                                trans.Rollback();
                                dbconGlobal.CloseConnection();

                                return new SendoutResponse { respcode = 12, message = getRespMessage(12), ErrorDetail = "Review parameters." };
                            }
                        }

                        //sendout_update_resibo proc
                        if (IsRemote.Equals("1"))
                        {
                            //kptn = validateGeneratedKPTN(RemoteBranch, zonecode, String.Empty);
                            updateResiboGlobal(RemoteBranch, remotezcode, orno, ref command);
                        }
                        else
                        {
                            //kptn = validateGeneratedKPTN(bcode, zonecode, String.Empty);
                            updateResiboGlobal(bcode, zonecode, orno, ref command);
                        }

                        String custS = getcustomertable(SenderLName);
                        command.Transaction = trans;
                        command.Parameters.Clear();
                        command.CommandText = "kpadminlogsglobal.save_customers";
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.AddWithValue("tblcustomer", custS);
                        command.Parameters.AddWithValue("kptnno", kptn);
                        command.Parameters.AddWithValue("controlno", controlno);
                        command.Parameters.AddWithValue("transdate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("fname", SenderFName);
                        command.Parameters.AddWithValue("lname", SenderLName);
                        command.Parameters.AddWithValue("mname", SenderMName);
                        command.Parameters.AddWithValue("sobranch", SenderBranchID);
                        command.Parameters.AddWithValue("pobranch", "");
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value) ? null : RemoteBranch));
                        command.Parameters.AddWithValue("cancelledbranch", String.Empty);
                        command.Parameters.AddWithValue("status", 0);
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreator", syscreatr);
                        command.Parameters.AddWithValue("amount", total);
                        command.Parameters.AddWithValue("customertype", "S");
                        command.ExecuteNonQuery();

                        String custR = getcustomertable(ReceiverLName);
                        command.Parameters.Clear();
                        command.CommandText = "kpadminlogsglobal.save_customers";
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.AddWithValue("tblcustomer", custR);
                        command.Parameters.AddWithValue("kptnno", kptn);
                        command.Parameters.AddWithValue("controlno", controlno);
                        command.Parameters.AddWithValue("transdate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("fname", ReceiverFName);
                        command.Parameters.AddWithValue("lname", ReceiverLName);
                        command.Parameters.AddWithValue("mname", ReceiverMName);
                        command.Parameters.AddWithValue("sobranch", SenderBranchID);
                        command.Parameters.AddWithValue("pobranch", "");
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value) ? null : RemoteBranch));
                        command.Parameters.AddWithValue("cancelledbranch", String.Empty);
                        command.Parameters.AddWithValue("status", 0);
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreator", syscreatr);
                        command.Parameters.AddWithValue("amount", total);
                        command.Parameters.AddWithValue("customertype", "R");
                        command.ExecuteNonQuery();


                        command.Parameters.Clear();
                        command.CommandText = "kpadminlogsglobal.savelog53";
                        command.CommandType = CommandType.StoredProcedure;

                        command.Parameters.AddWithValue("kptnno", kptn);
                        command.Parameters.AddWithValue("action", "SENDOUT");
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("txndate", dt);
                        command.Parameters.AddWithValue("stationcode", stationcode);
                        command.Parameters.AddWithValue("stationno", station);
                        command.Parameters.AddWithValue("zonecode", zonecode);
                        command.Parameters.AddWithValue("branchcode", bcode);
                        //command.Parameters.AddWithValue("branchname", SenderBranchID);
                        command.Parameters.AddWithValue("operatorid", OperatorID);
                        command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                        command.Parameters.AddWithValue("remotereason", RemoteReason);
                        command.Parameters.AddWithValue("remotebranch", (RemoteBranchCode.Equals(DBNull.Value)) ? null : RemoteBranchCode);
                        command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                        command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                        command.Parameters.AddWithValue("remotezonecode", remotezcode);
                        command.Parameters.AddWithValue("type", "N");
                        command.ExecuteNonQuery();



                        trans.Commit();
                        //custtrans.Commit();

                        conn.Close();
                        kplog.Info(kptn + " - Sendout Successfully Saved");
                        return new SendoutResponse { respcode = 1, message = getRespMessage(1), kptn = kptn, orno = orno, transdate = dt };
                    }
                }
                catch (MySqlException myx)
                {
                    kplog.Fatal(kptn + " - " + myx.ToString());
                    if (myx.Number == 1213)
                    {
                        kplog.Fatal(kptn + " - mysql errcode: 1213");
                        trans.Rollback();
                        dbconGlobal.CloseConnection();

                        return new SendoutResponse { respcode = 11, message = getRespMessage(11), ErrorDetail = "Problem occured during saving. Please resave the transaction." };
                    }
                    else
                    {
                        trans.Rollback();
                        dbconGlobal.CloseConnection();

                        return new SendoutResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = myx.ToString() };
                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(kptn + " - mysql exception catched");
                    trans.Rollback();
                    dbconGlobal.CloseConnection();

                    return new SendoutResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                }
            }

            //using (MySqlConnection conn = dbcon.getConnection())
            //{

            //}
        }
        catch (Exception ex)
        {
            kplog.Fatal(kptn + " - Outer exception catched.", ex);
            //trans.Rollback();
            dbconGlobal.CloseConnection();
            return new SendoutResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }

    }

    [WebMethod(BufferResponse = false)]
    public SendoutResponse sendoutGlobal(String Username, String Password, List<object> values, String series, int syscreator, String branchcode, Int32 zonecode, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderContactNo, int IsSMS, String SenderBirthdate, String SenderBranchID, String ReceiverMLCardNO, String ReceiverFName, String ReceiverLName, String ReceiverMName, String ReceiverStreet, String ReceiverProvinceCity, String ReceiverCountry, String ReceiverGender, String ReceiverContactNo, String ReceiverBirthdate, Int32 type, String ExpiryDate, Double version, String stationcode, String KPTN, double vat, Int32 remotezone, String RemoteBranchCode)
    {
        try
        {
            if (values[2].ToString().Equals("0"))
            {
                kplog.Fatal(KPTN + " - " + getRespMessage(13));
                return new SendoutResponse { respcode = 10, message = getRespMessage(13) };
            }
            if (!authenticate(Username, Password))
            {
                return new SendoutResponse { respcode = 7, message = getRespMessage(7) };
            }

            String operatorid = values[1].ToString();
            String currency = values[12].ToString();
            Decimal principal = Convert.ToDecimal(values[13]);
            Decimal charge = Convert.ToDecimal(values[14]);
            String bcode = branchcode;
            Int32 zcode = zonecode;
            if (values[3].ToString().Equals("1"))
            {
                bcode = RemoteBranchCode;
                zcode = remotezone;
            }
            SendoutResponse check = new SendoutResponse();
            check = checkifallowSO(bcode, zcode, SenderFName + " " + SenderMName + " " + SenderLName, ReceiverFName + " " + ReceiverMName + " " + ReceiverLName, currency, principal, charge, operatorid, KPTN);
            if (check.respcode == 3)
                return new SendoutResponse { respcode = 0, message = check.message };

            return (SendoutResponse)saveSendoutGlobal(values, series, syscreator, branchcode, zonecode, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, IsSMS, SenderBirthdate, SenderBranchID, ReceiverMLCardNO, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, type, ExpiryDate, stationcode, KPTN, vat, remotezone, RemoteBranchCode);

        }
        catch (Exception ex)
        {
            kplog.Fatal(KPTN + " - Outer Exception Catch", ex);
            return new SendoutResponse { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString() };
        }
    }

    [WebMethod]
    public String serverDateGlobal(String Username, String Password, Double version, String stationcode)
    {
        try
        {

            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    throw new Exception("Version does not match!");
            //}
            if (!authenticate(Username, Password))
            {
                String warningmessage = "Invalid credentials";
                throw new Exception(warningmessage);
            }

            DateTime date = getServerDateGlobal(false);

            return date.ToString("yyyy-MM-dd HH:mm:ss");
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }

    [WebMethod]
    public CustomerUpdateResponse updateCustomerGlobal(String Username, String Password, String CustID, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderBirthdate, String SenderBranchID, String IDType, String IDNo, String ExpiryDate, String ModifiedBy, String PhoneNo, String MobileNo, String Email, String CardNo, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new CustomerUpdateResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new CustomerUpdateResponse { respcode = 10, message = getRespMessage(10) };
        //}
        try
        {
            //dt = getServerDateGlobal(false);
            dt = getServerDateDomesticCustomer();
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return new CustomerUpdateResponse { respcode = 0, message = ex.ToString() };
        }
        using (MySqlConnection custconn = custconDomestic.getConnection())
        {
            try
            {
                custconn.Open();

                //using (custcommand = custconn.CreateCommand())
                //{

                //String query = "UPDATE kpcustomersglobal.customers a SET a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate , a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
                //custcommand.CommandText = query;
                ////custcommand.Parameters.AddWithValue("CardNo", CardNo);
                //custcommand.Parameters.AddWithValue("FirstName", SenderFName);
                //custcommand.Parameters.AddWithValue("LastName", SenderLName);
                //custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
                //custcommand.Parameters.AddWithValue("Street", SenderStreet);
                //custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
                //custcommand.Parameters.AddWithValue("Country", SenderCountry);
                //custcommand.Parameters.AddWithValue("Gender", SenderGender);
                ////custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
                //custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
                ////custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
                //custcommand.Parameters.AddWithValue("IDType", IDType);
                //custcommand.Parameters.AddWithValue("IDNo", IDNo);
                //custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
                //custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                //custcommand.Parameters.AddWithValue("CustID", CustID);
                //custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
                //custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
                //custcommand.Parameters.AddWithValue("Mobile", MobileNo);
                //custcommand.Parameters.AddWithValue("Email", Email);
                //custcommand.ExecuteNonQuery();

                using (custcommand = custconn.CreateCommand())
                {
                    if (CustID != String.Empty)
                    {
                        string custidindb101 = "";
                        string checkifexist = "select custid from kpcustomers.customers where firstname=@firstname and lastname=@lastname and middlename=@middlename and date(birthdate) = date(@senderbdate)";
                        custcommand.CommandText = checkifexist;
                        custcommand.Parameters.AddWithValue("firstname", SenderFName);
                        custcommand.Parameters.AddWithValue("lastname", SenderLName);
                        custcommand.Parameters.AddWithValue("middlename", SenderMName);
                        custcommand.Parameters.AddWithValue("senderbdate", SenderBirthdate);
                        MySqlDataReader readerchecker = custcommand.ExecuteReader();
                        if (readerchecker.HasRows)
                        {
                            readerchecker.Read();
                            //custidindb101 = Convert.ToInt64(readerchecker["custid"].ToString());
                            custidindb101 = readerchecker["custid"].ToString();
                            readerchecker.Close();
                            if (custidindb101 != CustID)
                            {
                                custconn.Close();
                                custconDomestic.CloseConnection();
                                return new CustomerUpdateResponse { respcode = 0, message = "Customer name already exist!" };
                            }
                        }
                        readerchecker.Close();

                        if (!CardNo.Equals(String.Empty) || CardNo != DBNull.Value.ToString())
                        {
                            custcommand.CommandText = "select custid from kpcustomers.customercard where cardno=@cardno";
                            custcommand.Parameters.AddWithValue("cardno", CardNo);

                            using (MySqlDataReader dataReader = custcommand.ExecuteReader())
                            {
                                if (dataReader.Read())
                                {
                                    dataReader.Close();

                                    custcommand.CommandText = "select CustID from kpcustomers.customers where cardno=@cardno";
                                    custcommand.Parameters.Clear();
                                    custcommand.Parameters.AddWithValue("cardno", CardNo);
                                    using (MySqlDataReader dataReader1 = custcommand.ExecuteReader())
                                    {
                                        string custidindb = string.Empty;
                                        if (dataReader1.Read())
                                        {
                                            custidindb = dataReader1["CustID"].ToString();// dataReader1["CustID"].ToString();
                                            dataReader1.Close();
                                        }
                                        dataReader1.Close();
                                        if (custidindb == CustID)
                                        {//update details

                                            String query = "UPDATE kpcustomers.customers a SET a.cardno=@cardno,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate , a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
                                            custcommand.CommandText = query;
                                            custcommand.Parameters.Clear();
                                            custcommand.Parameters.AddWithValue("CustID", CustID);
                                            custcommand.Parameters.AddWithValue("CardNo", CardNo);
                                            custcommand.Parameters.AddWithValue("FirstName", SenderFName);
                                            custcommand.Parameters.AddWithValue("LastName", SenderLName);
                                            custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
                                            custcommand.Parameters.AddWithValue("Street", SenderStreet);
                                            custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
                                            custcommand.Parameters.AddWithValue("Country", SenderCountry);
                                            custcommand.Parameters.AddWithValue("Gender", SenderGender);
                                            //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
                                            custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
                                            //custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
                                            custcommand.Parameters.AddWithValue("IDType", IDType);
                                            custcommand.Parameters.AddWithValue("IDNo", IDNo);
                                            custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
                                            custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                            //custcommand.Parameters.AddWithValue("CustID", CustID);
                                            custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
                                            custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
                                            custcommand.Parameters.AddWithValue("Mobile", MobileNo);
                                            custcommand.Parameters.AddWithValue("Email", Email);
                                            custcommand.ExecuteNonQuery();
                                        }
                                        else
                                        {//customer card is owned by other customer
                                            dataReader1.Close();
                                            custconn.Close();
                                            custconDomestic.CloseConnection();
                                            return new CustomerUpdateResponse { respcode = 0, message = "Card No. was already owned by another customer" };
                                        }
                                    }
                                }
                                else
                                {//insert card
                                    dataReader.Close();
                                    String queryCard = "INSERT INTO kpcustomers.customercard (`CardNo`) values (@CardNo1);";
                                    custcommand.CommandText = queryCard;
                                    custcommand.Parameters.Clear();
                                    custcommand.Parameters.AddWithValue("CardNo1", CardNo);
                                    custcommand.ExecuteNonQuery();


                                    String query = "UPDATE kpcustomers.customers a SET a.cardno=@cardno,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate , a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
                                    custcommand.CommandText = query;
                                    custcommand.Parameters.Clear();
                                    custcommand.Parameters.AddWithValue("CustID", CustID);
                                    custcommand.Parameters.AddWithValue("CardNo", CardNo);
                                    custcommand.Parameters.AddWithValue("FirstName", SenderFName);
                                    custcommand.Parameters.AddWithValue("LastName", SenderLName);
                                    custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
                                    custcommand.Parameters.AddWithValue("Street", SenderStreet);
                                    custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
                                    custcommand.Parameters.AddWithValue("Country", SenderCountry);
                                    custcommand.Parameters.AddWithValue("Gender", SenderGender);
                                    //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
                                    custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
                                    //custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
                                    custcommand.Parameters.AddWithValue("IDType", IDType);
                                    custcommand.Parameters.AddWithValue("IDNo", IDNo);
                                    custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
                                    custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                    //custcommand.Parameters.AddWithValue("CustID", CustID);
                                    custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
                                    custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
                                    custcommand.Parameters.AddWithValue("Mobile", MobileNo);
                                    custcommand.Parameters.AddWithValue("Email", Email);
                                    custcommand.ExecuteNonQuery();
                                }
                            }
                        }
                        else
                        {//if wala cardno gi-specify e-add ra ang customer e-update ra ang details sa customer
                            String query = "UPDATE kpcustomers.customers a SET a.cardno=@cardno, a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate , a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
                            custcommand.CommandText = query;
                            custcommand.Parameters.Clear();
                            custcommand.Parameters.AddWithValue("CustID", CustID);
                            custcommand.Parameters.AddWithValue("CardNo", CardNo);
                            custcommand.Parameters.AddWithValue("FirstName", SenderFName);
                            custcommand.Parameters.AddWithValue("LastName", SenderLName);
                            custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
                            custcommand.Parameters.AddWithValue("Street", SenderStreet);
                            custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
                            custcommand.Parameters.AddWithValue("Country", SenderCountry);
                            custcommand.Parameters.AddWithValue("Gender", SenderGender);
                            //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
                            custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
                            //custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
                            custcommand.Parameters.AddWithValue("IDType", IDType);
                            custcommand.Parameters.AddWithValue("IDNo", IDNo);
                            custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
                            custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                            //custcommand.Parameters.AddWithValue("CustID", CustID);
                            custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
                            custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
                            custcommand.Parameters.AddWithValue("Mobile", MobileNo);
                            custcommand.Parameters.AddWithValue("Email", Email);
                            custcommand.ExecuteNonQuery();

                        }
                    }
                    custconn.Close();
                    custconDomestic.CloseConnection();
                    kplog.Info(CustID + " - Successfully Updated");
                    return new CustomerUpdateResponse { respcode = 1, message = getRespMessage(1) };
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal("Duplicate", ex);
                custconn.Close();
                custconDomestic.CloseConnection();
                int respcode = 0;
                if (ex.Message.StartsWith("Duplicate"))
                {
                    respcode = 6;
                }
                return new CustomerUpdateResponse { respcode = respcode, message = getRespMessage(respcode), ErrorDetail = ex.ToString() };
            }
        }
    }

    private Boolean updateResiboGlobal(string branchcode, Int32 zonecode, String resibo, ref MySqlCommand command)
    {
        try
        {
            MySqlCommand cmdReader;
            using (cmdReader = dbconGlobal.getConnection().CreateCommand())
            {

                dt = getServerDateGlobal(true);

                Int32 series = Convert.ToInt32(resibo.Substring(3, resibo.Length - 3));

                //if (isSameYear2(dt))
                //{
                command.Parameters.Clear();
                //sendout_update_resibo proc(IN branchcode VARCHAR(3), IN zonecode INT(3), IN resibo INT(6),IN issameyr TINYINT(1))
                //issameyr=1;
                command.CommandText = "update kpformsglobal.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                command.Parameters.AddWithValue("bcode2", branchcode);
                command.Parameters.AddWithValue("zcode2", zonecode);
                command.Parameters.AddWithValue("series", series);
                command.ExecuteNonQuery();
                command.Parameters.Clear();
                return true;
                //}
                //else
                //{
                //    command.Parameters.Clear();
                //    //sendout_update_resibo proc(IN branchcode VARCHAR(3), IN zonecode INT(3), IN resibo INT(6),IN issameyr TINYINT(1))
                //    //issameyr=0;
                //    command.CommandText = "update kpformsglobal.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                //    command.Parameters.AddWithValue("bcode2", branchcode);
                //    command.Parameters.AddWithValue("zcode2", zonecode);
                //    command.Parameters.AddWithValue("series", 1);
                //    command.ExecuteNonQuery();
                //    command.Parameters.Clear();
                //    //return dt.ToString("yy") + "-" + series.ToString().PadLeft(6, '0');
                //    return true;
                //}


            }
        }
        catch (MySqlException myx)
        {
            kplog.Fatal(myx.ToString());
            throw new Exception(myx.ToString());
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }

    }

    [WebMethod]
    public ValidateTransactionResponse validateTransactionGlobal(String Username, String Password, decimal Principal, string FirstName, string LastName, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new ValidateTransactionResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ValidateTransactionResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconGlobal.getConnection())
        {
            try
            {
                using (command = conn.CreateCommand())
                {
                    conn.Open();

                    //command.CommandText = "SELECT c.CustId FROM kpdomestic.sendout s INNER JOIN kpcustomersglobal.customers c ON s.SenderID = c.CustID  WHERE TIMEDIFF(DATE_FORMAT(NOW(), '%h:%i:%s'),DATE_FORMAT(s.TransDate, '%h:%i:%s')) <= '00:05:00' AND c.FirstName = @FirstName AND c.LastName = @LastName AND s.Principal = @amount;";
                    command.CommandText = "SELECT id FROM kpglobal.sendout WHERE TIMEDIFF(DATE_FORMAT(NOW(), '%h:%i:%s'),DATE_FORMAT(TransDate, '%h:%i:%s')) <= '00:05:00' AND SenderFName = @FirstName AND SenderLName = @LastName AND Principal = @amount;";
                    command.Parameters.AddWithValue("amount", Principal);
                    command.Parameters.AddWithValue("FirstName", FirstName);
                    command.Parameters.AddWithValue("LastName", LastName);
                    MySqlDataReader Reader = command.ExecuteReader();
                    //throw new Exception(Reader.HasRows.ToString());

                    if (Reader.Read())
                    {
                        Reader.Close();
                        conn.Close();

                        return new ValidateTransactionResponse { respcode = 1, message = "SUCCESS" };
                    }
                    else
                    {
                        kplog.Error("Transaction validation failed.");
                        //throw new Exception(Reader["CustId"].ToString());
                        Reader.Close();
                        conn.Close();

                        return new ValidateTransactionResponse { respcode = 0, message = "FAILED" };
                    }


                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                conn.Close();
                return new ValidateTransactionResponse { respcode = 0, message = ex.ToString() };
            }
        }

    }

























    // // // // // 
    // // // // // END OF GLOBAL METHODS

    [WebMethod]
    public sysAdTester sysAdTestMe()
    {
        try
        {
            using (MySqlConnection con = dbconDomestic.getConnection())
            {
                try
                {
                    custconDomestic.getConnection().Open();
                    custconDomestic.getConnection().Close();
                    con.Open();
                    con.Close();
                    kplog.Info("Connected");
                    return new sysAdTester { respcode = 1, message = getRespMessage(1), numberOfDBs = 2, DBConnection = "Connected", ConnectionStringTransaction = con.ConnectionString, ConnectionStringCustomerGlobal = "server=" + custconGlobal.getConnection().DataSource + ";database=" + custconGlobal.getConnection().Database, Version = currentVersion };
                }
                catch (MySqlException mex)
                {
                    con.Close();
                    kplog.Fatal(mex.ToString(), mex);
                    return new sysAdTester { respcode = 0, message = getRespMessage(0), DBConnection = "Not Connected", ConnectionStringTransaction = con.ConnectionString, errorDetail = mex.ToString() };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.Message, ex);
            return new sysAdTester { respcode = 0, message = getRespMessage(0), DBConnection = "Not Connected", errorDetail = ex.ToString() };
        }
    }


    [WebMethod]
    public AllowedIDPerZone getIDsDomestic(String Username, String Password, Int32 zonecode)
    {
        if (!authenticate(Username, Password))
        {
            return new AllowedIDPerZone { respcode = 7, message = getRespMessage(7) };
        }

        try
        {
            using (MySqlConnection con = dbconDomestic.getConnection())
            {
                try
                {
                    con.Open();
                    List<string> listofids = new List<string>();
                    int x = 0;
                    using (command = con.CreateCommand())
                    {
                        command.CommandText = "select idtype from kpforms.sysallowedidtype where zonecode = @zcode";
                        command.Parameters.AddWithValue("zcode", zonecode);
                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            if (reader.HasRows)
                            {
                                while (reader.Read())
                                {
                                    listofids.Add(reader[x].ToString());
                                    x = x++;
                                }
                                reader.Close();
                                con.Close();
                                return new AllowedIDPerZone { respcode = 1, message = getRespMessage(1), IDs = listofids };

                            }
                            else
                            {
                                kplog.Error("No IDs found in your zone.");
                                reader.Close();
                                con.Close();
                                return new AllowedIDPerZone { respcode = 0, message = "No IDs found in your zone." };

                            }
                        }
                    }
                }
                catch (MySqlException mex)
                {

                    kplog.Fatal(mex.ToString());
                    con.Close();
                    return new AllowedIDPerZone { respcode = 0, message = mex.Message, ErrorDetail = mex.ToString() };
                }
            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return new AllowedIDPerZone { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString() };
        }

    }

    [WebMethod]
    public Int32 getKYCStatus(String Username, String Password, Double version, String stationcode)
    {

        try
        {
            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    throw new Exception("Version does not match!");
            //}

            if (!authenticate(Username, Password))
            {
                throw new Exception("Invalid credentials");
            }
            return isUseKYCDomestic;
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }

    [WebMethod]
    public Decimal getMaxAmountDomestic(String Username, String Password, Int16 chargetype, String bcode, Int16 zcode, String promoname, Double version, String stationcode)
    {
        try
        {
            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    throw new Exception("Version does not match!");
            //}
            using (MySqlConnection con = dbconDomestic.getConnection())
            {
                try
                {
                    con.Open();
                    if (chargetype == 0)
                    {
                        using (command = con.CreateCommand())
                        {
                            command.CommandText = "select MAX(c.MaxAmount) as maximum from kpforms.charges c inner join kpforms.headercharges hc on hc.currID = c.Type where hc.cEffective = 1;";
                            using (MySqlDataReader dataReader = command.ExecuteReader())
                            {
                                dataReader.Read();
                                Decimal maximum = Convert.ToDecimal(dataReader["maximum"]);
                                dataReader.Close();
                                con.Close();

                                return maximum;
                            }
                        }
                    }
                    else if (chargetype == 1)
                    {
                        using (command = con.CreateCommand())
                        {
                            command.CommandText = "select MAX(c.MaxAmount) as maximum from kpforms.ratesperbranchcharges c inner join kpforms.ratesperbranchheader hc on hc.currID = c.Type where hc.cEffective = 1 and hc.branchcode = @bcode and hc.zonecode = @zcode;";
                            command.Parameters.AddWithValue("bcode", bcode);
                            command.Parameters.AddWithValue("zcode", zcode);
                            using (MySqlDataReader dataReader = command.ExecuteReader())
                            {
                                dataReader.Read();
                                Decimal maximum = Convert.ToDecimal(dataReader["maximum"]);
                                dataReader.Close();
                                con.Close();

                                return maximum;
                            }
                        }
                    }
                    else
                    {
                        using (command = con.CreateCommand())
                        {
                            command.CommandText = "select MAX(c.MaxAmount) as maximum from kpforms.promoratescharges c inner join kpforms.promoratesheader hc on hc.currID = c.Type where hc.promoname = @promoname;";
                            command.Parameters.AddWithValue("promoname", promoname);

                            using (MySqlDataReader dataReader = command.ExecuteReader())
                            {
                                dataReader.Read();
                                Decimal maximum = Convert.ToDecimal(dataReader["maximum"]);
                                dataReader.Close();
                                con.Close();

                                return maximum;
                            }
                        }
                    }
                }
                catch (MySqlException mex)
                {
                    kplog.Fatal(mex.ToString());
                    throw new Exception(mex.ToString());
                    //return 0;
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
            //return 0;
        }
    }


    [WebMethod]
    public String serverDateDomestic(String Username, String Password, Double version, String stationcode)
    {
        try
        {

            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    throw new Exception("Version does not match!");
            //}
            if (!authenticate(Username, Password))
            {
                String warningmessage = "Invalid credentials";
                throw new Exception(warningmessage);
            }

            DateTime date = getServerDateDomestic(false);

            return date.ToString("yyyy-MM-dd HH:mm:ss");
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }



    [WebMethod]
    public kptnResponse getKptnDomestic(String Username, String Password, String BranchCode, Int32 ZoneCode, Double version, String stationcode)
    {
        try
        {
            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    return new kptnResponse { respcode = 10, message = getRespMessage(10) };
            //}
            if (!authenticate(Username, Password))
            {
                return new kptnResponse { respcode = 7, message = getRespMessage(7) };
            }
            return new kptnResponse { respcode = 1, message = getRespMessage(1), kptn = generateKPTNDomestic(BranchCode, ZoneCode) };
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return new kptnResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }
    }


    [WebMethod]
    public String getPhoneno(String Username, String Password, String CustID, Double version, String stationcode)
    {

        try
        {

            if (!authenticate(Username, Password))
            {
                throw new Exception("Invalid credentials");
            }
            using (MySqlConnection custconn = custconDomestic.getConnection())
            {
                try
                {
                    custconn.Open();
                    using (custcommand = custconn.CreateCommand())
                    {
                        //int counter = 0;
                        String query = "Select PhoneNo from kpcustomers.customers where CustID = @CustID  AND Phoneno IS NOT NULL AND phoneno !=''";
                        custcommand.CommandText = query;
                        custcommand.CommandType = CommandType.Text;
                        custcommand.Parameters.AddWithValue("CustID", CustID);
                        using (MySqlDataReader ReaderCount = custcommand.ExecuteReader())
                        {
                            String phoneno;
                            if (ReaderCount.Read())
                            {
                                phoneno = ReaderCount["PhoneNo"].ToString();
                                custconn.Close();
                                ReaderCount.Close();
                                return phoneno;
                            }
                            else
                            {
                                custconn.Close();
                                ReaderCount.Close();
                                return String.Empty;
                            }
                        }
                    }

                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(ex.ToString());
                    custconn.Close();
                    throw new Exception(ex.ToString());
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return String.Empty;
            throw new Exception(ex.ToString());

        }

    }

    ////old update customer in client
    //[WebMethod]
    //public CustomerUpdateResponse updateCustomer(String Username, String Password, String CustID, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderBirthdate, String SenderBranchID, String IDType, String IDNo, String ExpiryDate, String ModifiedBy, String PhoneNo, String MobileNo, String Email, String CardNo, Double version, String stationcode, Byte[] kycfront, Byte[] kycback, Byte[] id1, Byte[] id2, Byte[] id3,Byte[] image)
    //{
    //    if (!authenticate(Username, Password))
    //    {
    //        return new CustomerUpdateResponse { respcode = 7, message = getRespMessage(7) };
    //    }
    //    string firstname = SenderFName.Substring(0, 1);
    //    //Byte[] kycfront = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] kycback = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id1 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id2 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id3 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //if (!compareVersions(getVersion(stationcode), version))
    //    //{
    //    //    return new CustomerUpdateResponse { respcode = 10, message = getRespMessage(10) };
    //    //}
    //    try
    //    {
    //        dt = getServerDateDomestic(false);
    //    }
    //    catch (Exception ex)
    //    {
    //        kplog.Info("Exeption catch");
    //        return new CustomerUpdateResponse { respcode = 0, message = ex.ToString() };
    //    }
    //    using (MySqlConnection custconn = custconDomestic.getConnection())
    //    {
    //        try
    //        {
    //            custconn.Open();

    //                using (custcommand = custconn.CreateCommand())
    //                {
    //                    string checkname = "select custid from kpcustomers.customers where firstname=@firstname and lastname=@lastname and middlename=@middlename and date(birthdate)=date(@senderbdate)";
    //                    custcommand.CommandText = checkname;
    //                    custcommand.Parameters.Clear();
    //                    custcommand.Parameters.AddWithValue("firstname", SenderFName);
    //                    custcommand.Parameters.AddWithValue("lastname", SenderLName);
    //                    custcommand.Parameters.AddWithValue("middlename", SenderMName);
    //                    custcommand.Parameters.AddWithValue("senderbdate", SenderBirthdate);


    //                    MySqlDataReader readnameexist = custcommand.ExecuteReader();
    //                    if (readnameexist.Read())
    //                    {
    //                        string custidinquery = readnameexist["custid"].ToString();
    //                        readnameexist.Close();
    //                        //custconn.Close();
    //                        if (custidinquery != CustID)
    //                        {
    //                            custconn.Close();
    //                            return new CustomerUpdateResponse { respcode = 0, message =  "Customer Name already exist!" };
    //                        }
    //                    }
    //                    readnameexist.Close();

    //                    //string checkcard = "select cardno, custid from kpcustomers.customers where cardno='" + CardNo + "';";
    //                    //custcommand.CommandText = checkcard;
    //                    //custcommand.Parameters.Clear();
    //                    //MySqlDataReader drx = custcommand.ExecuteReader();
    //                    //if (drx.HasRows)
    //                    //{
    //                    //    drx.Read();
    //                    //    String card = drx["cardno"].ToString();
    //                    //    String custid = drx["custid"].ToString();
    //                    //    String lname = drx["lastname"].ToString();
    //                    //    drx.Close();
    //                    //    if (!(custid.Equals(CustID)))
    //                    //    {
    //                    //        custconn.Close();
    //                    //        return new CustomerUpdateResponse { respcode = 0, message = "Card Number already exist!" };
    //                    //    }
    //                    //}
    //                    //drx.Close();
    //                    Boolean error = false;
    //                    if (CustID != String.Empty)
    //                    {
    //                        custcommand.CommandText = "Select c.CardNo from kpcustomers.customercard c inner join kpcustomers.customers cu on c.cardno = cu.cardno where cu.custid = @custid";
    //                        custcommand.Parameters.Clear();
    //                        custcommand.Parameters.AddWithValue("custid", CustID);
    //                        using (MySqlDataReader dataReader = custcommand.ExecuteReader())
    //                        {
    //                            if (!dataReader.Read())
    //                            {
    //                                dataReader.Close();
    //                                if (!CardNo.Equals(String.Empty) || CardNo != DBNull.Value.ToString())
    //                                {
    //                                    custcommand.Parameters.Clear();
    //                                    custcommand.CommandText = "Select CardNo,custid from kpcustomers.customercard where CardNO = @cardno";
    //                                    custcommand.Parameters.AddWithValue("cardno", CardNo);
    //                                    using (MySqlDataReader checkifcardexist = custcommand.ExecuteReader())
    //                                    {
    //                                        string custidindb;
    //                                        if (checkifcardexist.HasRows)
    //                                        {
    //                                            checkifcardexist.Read();
    //                                            custidindb = checkifcardexist["custid"].ToString();
    //                                            checkifcardexist.Close();

    //                                            if (custidindb != CustID)
    //                                            {
    //                                                custconn.Close();
    //                                                return new CustomerUpdateResponse { respcode = 0, message = "Card No. was already owned by another customer" };
    //                                            }
    //                                          }
    //                                        checkifcardexist.Close();
    //                                    }

    //                                    String queryCard = "INSERT INTO kpcustomers.customercard (`CardNo`,custid) values (@CardNo1,@custid);";
    //                                    custcommand.Parameters.Clear();
    //                                    custcommand.CommandText = queryCard;
    //                                    custcommand.Parameters.AddWithValue("CardNo1", CardNo);
    //                                    custcommand.Parameters.AddWithValue("custid", CustID);
    //                                    custcommand.ExecuteNonQuery();
    //                                }

    //                                    custcommand.Parameters.Clear();
    //                                    String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
    //                                    custcommand.CommandText = query;
    //                                    custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                                    custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                                    custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                                    custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                                    custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                                    custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                                    custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                                    custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                                    //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                                    custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                                    custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                                    custcommand.Parameters.AddWithValue("IDType", IDType);
    //                                    custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                                    custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                                    custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                                    custcommand.Parameters.AddWithValue("CustID", CustID);
    //                                    custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                                    custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                                    custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                                    custcommand.Parameters.AddWithValue("Email", Email);
    //                                    custcommand.ExecuteNonQuery();

    //                                    try
    //                                    {
    //                                        string checkifcustidexistinmages = "SELECT custid FROM customerscanimages.customer" + firstname + " WHERE custid=@customerid;";
    //                                        custcommand.CommandText = checkifcustidexistinmages;
    //                                        custcommand.Parameters.Clear();
    //                                        custcommand.Parameters.AddWithValue("customerid", CustID);
    //                                        MySqlDataReader reader = custcommand.ExecuteReader();
    //                                        if (!reader.HasRows)
    //                                        {
    //                                            reader.Close();
    //                                            string insertimage = "INSERT INTO customerscanimages.customer" + firstname + " (custid,kycfront,kycback,id1,id2,id3,syscreated,imagefree1,syscreator) VALUES (@custid,@kycfront,@kycback,@id1,@id2,@id3,now(),@image,@syscreator);";
    //                                            custcommand.CommandText = insertimage;
    //                                            custcommand.Parameters.Clear();
    //                                            custcommand.Parameters.AddWithValue("custid", CustID);
    //                                            custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                            custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                            custcommand.Parameters.AddWithValue("id1", id1);
    //                                            custcommand.Parameters.AddWithValue("id2", id2);
    //                                            custcommand.Parameters.AddWithValue("id3", id3);
    //                                            custcommand.Parameters.AddWithValue("image", image);
    //                                            custcommand.Parameters.AddWithValue("syscreator", ModifiedBy);
    //                                            custcommand.ExecuteNonQuery();
    //                                        }
    //                                        else
    //                                        {
    //                                            reader.Close();
    //                                            string insertimage = "UPDATE customerscanimages.customer" + firstname + " SET kycfront=@kycfront,kycback=@kycback,id1=@id1,id2=@id2,id3=@id3,imagefree1=@image,sysmodified=now(),sysmodifier=@sysmodifier where custid=@custid1;";
    //                                            custcommand.CommandText = insertimage;
    //                                            custcommand.Parameters.Clear();
    //                                            custcommand.Parameters.AddWithValue("custid1", CustID);
    //                                            custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                            custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                            custcommand.Parameters.AddWithValue("id1", id1);
    //                                            custcommand.Parameters.AddWithValue("id2", id2);
    //                                            custcommand.Parameters.AddWithValue("id3", id3);
    //                                            custcommand.Parameters.AddWithValue("image", image);
    //                                            custcommand.Parameters.AddWithValue("sysmodifier", ModifiedBy);
    //                                            custcommand.ExecuteNonQuery();
    //                                        }
    //                                        reader.Close();
    //                                    }
    //                                    catch (MySqlException we)
    //                                    {
    //                                        error = true;
    //                                    }
    //                                    //string insertimage = "UPDATE kpcustomers.customerimages SET kycfront=@kycfront,kycback=@kycback,id1=@id1,id2=@id2,id3=@id3,sysmodified=now(),sysmodifier=@sysmodifier where custid=@custid1;";
    //                                    //custcommand.Parameters.Clear();
    //                                    //custcommand.CommandText = insertimage;
    //                                    //custcommand.Parameters.AddWithValue("custid1", CustID);
    //                                    //custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                    //custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                    //custcommand.Parameters.AddWithValue("id1", id1);
    //                                    //custcommand.Parameters.AddWithValue("id2", id2);
    //                                    //custcommand.Parameters.AddWithValue("id3", id3);
    //                                    //custcommand.Parameters.AddWithValue("sysmodifier", ModifiedBy);
    //                                    //custcommand.ExecuteNonQuery();
    //                            }
    //                            else
    //                            {

    //                                dataReader.Close();
    //                                if (CardNo.Equals(String.Empty) || CardNo == DBNull.Value.ToString())
    //                                {
    //                                    custcommand.Parameters.Clear();
    //                                    String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified =now(), a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
    //                                    custcommand.CommandText = query;
    //                                    custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                                    custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                                    custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                                    custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                                    custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                                    custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                                    custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                                    custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                                    //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                                    custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                                    custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                                    custcommand.Parameters.AddWithValue("IDType", IDType);
    //                                    custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                                    custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                                    //custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                                    custcommand.Parameters.AddWithValue("CustID", CustID);
    //                                    custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                                    custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                                    custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                                    custcommand.Parameters.AddWithValue("Email", Email);
    //                                    custcommand.ExecuteNonQuery();

    //                                    try
    //                                    {
    //                                        string checkifcustidexistinmages = "SELECT custid FROM customerscanimages.customer" + firstname + " WHERE custid=@customerid;";
    //                                        custcommand.CommandText = checkifcustidexistinmages;
    //                                        custcommand.Parameters.AddWithValue("customerid", CustID);
    //                                        MySqlDataReader reader1 = custcommand.ExecuteReader();
    //                                        if (!reader1.HasRows)
    //                                        {
    //                                            reader1.Close();
    //                                            string insertimage = "INSERT INTO customerscanimages.customer" + firstname + " (custid,kycfront,kycback,id1,id2,id3,syscreated,imagefree1,syscreator) VALUES (@custid,@kycfront,@kycback,@id1,@id2,@id3,now(),@image,@syscreator);";
    //                                            custcommand.CommandText = insertimage;
    //                                            custcommand.Parameters.Clear();
    //                                            custcommand.Parameters.AddWithValue("custid", CustID);
    //                                            custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                            custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                            custcommand.Parameters.AddWithValue("id1", id1);
    //                                            custcommand.Parameters.AddWithValue("id2", id2);
    //                                            custcommand.Parameters.AddWithValue("id3", id3);
    //                                            custcommand.Parameters.AddWithValue("image", image);
    //                                            custcommand.Parameters.AddWithValue("syscreator", ModifiedBy);
    //                                            custcommand.ExecuteNonQuery();
    //                                        }
    //                                        else
    //                                        {
    //                                            reader1.Close();
    //                                            string insertimage = "UPDATE customerscanimages.customer" + firstname + " SET kycfront=@kycfront,kycback=@kycback,id1=@id1,id2=@id2,id3=@id3,imagefree1=@image,sysmodified=now(),sysmodifier=@sysmodifier where custid=@custid1;";
    //                                            custcommand.CommandText = insertimage;
    //                                            custcommand.Parameters.Clear();
    //                                            custcommand.Parameters.AddWithValue("custid1", CustID);
    //                                            custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                            custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                            custcommand.Parameters.AddWithValue("id1", id1);
    //                                            custcommand.Parameters.AddWithValue("id2", id2);
    //                                            custcommand.Parameters.AddWithValue("id3", id3);
    //                                            custcommand.Parameters.AddWithValue("image", image);
    //                                            custcommand.Parameters.AddWithValue("sysmodifier", ModifiedBy);
    //                                            custcommand.ExecuteNonQuery();
    //                                        }
    //                                        reader1.Close();
    //                                    }
    //                                    catch (MySqlException wee)
    //                                    {
    //                                        error = true;
    //                                    }
    //                                    //string insertimage = "UPDATE kpcustomers.customerimages SET kycfront=@kycfront,kycback=@kycback,id1=@id1,id2=@id2,id3=@id3,sysmodified=now(),sysmodifier=@sysmodifier where custid=@custid1;";
    //                                    //custcommand.Parameters.Clear();
    //                                    //custcommand.CommandText = insertimage;
    //                                    //custcommand.Parameters.AddWithValue("custid1", CustID);
    //                                    //custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                    //custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                    //custcommand.Parameters.AddWithValue("id1", id1);
    //                                    //custcommand.Parameters.AddWithValue("id2", id2);
    //                                    //custcommand.Parameters.AddWithValue("id3", id3);
    //                                    //custcommand.Parameters.AddWithValue("sysmodifier", ModifiedBy);
    //                                    //custcommand.ExecuteNonQuery();

    //                                    custcommand.Parameters.Clear();
    //                                    String queryCard = "UPDATE kpcustomers.customercard SET custid=null where custid=@custid";
    //                                    custcommand.CommandText = queryCard;
    //                                    custcommand.Parameters.AddWithValue("custid", CustID);
    //                                }
    //                                else
    //                                {
    //                                    custcommand.Parameters.Clear();
    //                                    custcommand.CommandText = "Select CardNo,custid from kpcustomers.customercard where CardNO = @cardno";
    //                                    custcommand.Parameters.AddWithValue("cardno", CardNo);
    //                                    using (MySqlDataReader cardDataReader = custcommand.ExecuteReader())
    //                                    {
    //                                        string custidindb1 = string.Empty;
    //                                        if (cardDataReader.HasRows)
    //                                        {
    //                                            cardDataReader.Read();
    //                                            custidindb1 = cardDataReader["custid"].ToString();
    //                                            cardDataReader.Close();
    //                                            if (custidindb1 != CustID)
    //                                            {
    //                                                custconn.Close();
    //                                                return new CustomerUpdateResponse { respcode = 0, message = "Card No. was already owned by another customer" };
    //                                            }
    //                                        }

    //                                            cardDataReader.Close();
    //                                            String queryCard = "UPDATE kpcustomers.customercard a SET CardNo = @CardNo where CustID = @CustID;";
    //                                            custcommand.Parameters.Clear();
    //                                            custcommand.CommandText = queryCard;
    //                                            custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                                            custcommand.Parameters.AddWithValue("custid", CustID);
    //                                            custcommand.ExecuteNonQuery();

    //                                            custcommand.Parameters.Clear();
    //                                            String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = now(), a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
    //                                            custcommand.CommandText = query;
    //                                            custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                                            custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                                            custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                                            custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                                            custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                                            custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                                            custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                                            custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                                            //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                                            custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                                            custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                                            custcommand.Parameters.AddWithValue("IDType", IDType);
    //                                            custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                                            custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                                            custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                                            custcommand.Parameters.AddWithValue("CustID", CustID);
    //                                            custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                                            custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                                            custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                                            custcommand.Parameters.AddWithValue("Email", Email);
    //                                            custcommand.ExecuteNonQuery();

    //                                            try
    //                                            {
    //                                                string checkifcustidexistinmages = "SELECT custid FROM customerscanimages.customer" + firstname + " WHERE custid=@customerid;";
    //                                                custcommand.CommandText = checkifcustidexistinmages;
    //                                                custcommand.Parameters.AddWithValue("customerid", CustID);
    //                                                MySqlDataReader reader2 = custcommand.ExecuteReader();
    //                                                if (!reader2.HasRows)
    //                                                {
    //                                                    reader2.Close();
    //                                                    string insertimage = "INSERT INTO customerscanimages.customer" + firstname + " (custid,kycfront,kycback,id1,id2,id3,syscreated,imagefree1,syscreator) VALUES (@custid,@kycfront,@kycback,@id1,@id2,@id3,now(),@image,@syscreator);";
    //                                                    custcommand.CommandText = insertimage;
    //                                                    custcommand.Parameters.Clear();
    //                                                    custcommand.Parameters.AddWithValue("custid", CustID);
    //                                                    custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                                    custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                                    custcommand.Parameters.AddWithValue("id1", id1);
    //                                                    custcommand.Parameters.AddWithValue("id2", id2);
    //                                                    custcommand.Parameters.AddWithValue("id3", id3);
    //                                                    custcommand.Parameters.AddWithValue("image", image);
    //                                                    custcommand.Parameters.AddWithValue("syscreator", ModifiedBy);
    //                                                    custcommand.ExecuteNonQuery();
    //                                                }
    //                                                else
    //                                                {
    //                                                    reader2.Close();
    //                                                    string insertimage = "UPDATE customerscanimages.customer" + firstname + " SET kycfront=@kycfront,kycback=@kycback,id1=@id1,id2=@id2,id3=@id3,imagefree1=@image,sysmodified=now(),sysmodifier=@sysmodifier where custid=@custid1;";
    //                                                    custcommand.CommandText = insertimage;
    //                                                    custcommand.Parameters.Clear();
    //                                                    custcommand.Parameters.AddWithValue("custid1", CustID);
    //                                                    custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                                    custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                                    custcommand.Parameters.AddWithValue("id1", id1);
    //                                                    custcommand.Parameters.AddWithValue("id2", id2);
    //                                                    custcommand.Parameters.AddWithValue("id3", id3);
    //                                                    custcommand.Parameters.AddWithValue("image", image);
    //                                                    custcommand.Parameters.AddWithValue("sysmodifier", ModifiedBy);
    //                                                    custcommand.ExecuteNonQuery();
    //                                                }
    //                                                reader2.Close();
    //                                            }
    //                                            catch (MySqlException weee)
    //                                            {
    //                                                error = true;
    //                                            }
    //                                            //string insertimage = "UPDATE kpcustomers.customerimages SET kycfront=@kycfront,kycback=@kycback,id1=@id1,id2=@id2,id3=@id3,sysmodified=now(),sysmodifier=@sysmodifier where custid=@custid1;";
    //                                            //custcommand.Parameters.Clear();
    //                                            //custcommand.CommandText = insertimage;
    //                                            //custcommand.Parameters.AddWithValue("custid1", CustID);
    //                                            //custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                            //custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                            //custcommand.Parameters.AddWithValue("id1", id1);
    //                                            //custcommand.Parameters.AddWithValue("id2", id2);
    //                                            //custcommand.Parameters.AddWithValue("id3", id3);
    //                                            //custcommand.Parameters.AddWithValue("sysmodifier", ModifiedBy);
    //                                            //custcommand.ExecuteNonQuery();
    //                                    }

    //                                }
    //                                //custcommand.Parameters.Clear();
    //                                //custcommand.CommandText = "Select CardNo,custid from kpcustomers.customercard where CardNO = @cardno";
    //                                //custcommand.Parameters.AddWithValue("cardno", CardNo);
    //                                ////custcommand.Parameters.AddWithValue("custid", CustID);
    //                                //using (MySqlDataReader cardDataReader = custcommand.ExecuteReader())
    //                                //{
    //                                //    //Check if card number belongs to the same customer
    //                                //    string custidindb;
    //                                //    if (cardDataReader.HasRows)
    //                                //    {
    //                                //        cardDataReader.Read();
    //                                //        custidindb = cardDataReader["custid"].ToString();
    //                                //        cardDataReader.Close();

    //                                //        if (custidindb == CustID)
    //                                //        {
    //                                //            String queryCard = "UPDATE kpcustomers.customercard cc INNER JOIN kpcustomers.customers c ON cc.cardno=c.cardno SET cc.CardNo = @CardNo1 WHERE c.custid = @CustID1;";
    //                                //            custcommand.CommandText = queryCard;
    //                                //            custcommand.Parameters.Clear();
    //                                //            custcommand.Parameters.AddWithValue("CardNo1", CardNo);
    //                                //            custcommand.Parameters.AddWithValue("CustID1", CustID);
    //                                //            custcommand.ExecuteNonQuery();

    //                                //            custcommand.Parameters.Clear();
    //                                //            String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
    //                                //            custcommand.CommandText = query;
    //                                //            custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                                //            custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                                //            custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                                //            custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                                //            custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                                //            custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                                //            custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                                //            custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                                //            //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                                //            custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                                //            custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                                //            custcommand.Parameters.AddWithValue("IDType", IDType);
    //                                //            custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                                //            custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                                //            custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                                //            custcommand.Parameters.AddWithValue("CustID", CustID);
    //                                //            custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                                //            custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                                //            custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                                //            custcommand.Parameters.AddWithValue("Email", Email);
    //                                //            custcommand.ExecuteNonQuery();
    //                                //        }
    //                                //        else
    //                                //        {
    //                                //            custconn.Close();
    //                                //            return new CustomerUpdateResponse { respcode = 0, message = "Card No. was already owned by another customer" };
    //                                //            //String queryCard = "UPDATE kpcustomers.customercard cc INNER JOIN kpcustomers.customers c ON cc.cardno=c.cardno SET cc.CardNo = @CardNo1 WHERE c.custid = @CustID1;";
    //                                //            //custcommand.CommandText = queryCard;
    //                                //            //custcommand.Parameters.AddWithValue("CardNo1", CardNo);
    //                                //            //custcommand.Parameters.AddWithValue("CustID1", CustID);
    //                                //            //custcommand.ExecuteNonQuery();

    //                                //            //custcommand.Parameters.Clear();
    //                                //            //String queryCard1 = "UPDATE kpcustomers.customers SET CardNo = @CardNo1 WHERE CustID = @CustID1;";
    //                                //            //custcommand.CommandText = queryCard1;
    //                                //            //custcommand.Parameters.AddWithValue("CardNo1", CardNo);
    //                                //            //custcommand.Parameters.AddWithValue("CustID1", CustID);
    //                                //            //custcommand.ExecuteNonQuery();
    //                                //        }
    //                                //    }
    //                                //    else
    //                                //    {
    //                                //        cardDataReader.Close();
    //                                //        //String queryCard = "UPDATE kpcustomersglobal.customercard SET CardNo = @CardNo1 WHERE CardNo = @CustID1;";
    //                                //        String queryCard = "UPDATE kpcustomers.customercard cc INNER JOIN kpcustomers.customers c ON cc.cardno=c.cardno SET cc.CardNo = @CardNo1 WHERE c.custid = @CustID1;";
    //                                //        custcommand.CommandText = queryCard;
    //                                //        custcommand.Parameters.AddWithValue("CardNo1", CardNo);
    //                                //        custcommand.Parameters.AddWithValue("CustID1", CustID);
    //                                //        custcommand.ExecuteNonQuery();

    //                                //        custcommand.Parameters.Clear();
    //                                //        String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
    //                                //        custcommand.CommandText = query;
    //                                //        custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                                //        custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                                //        custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                                //        custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                                //        custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                                //        custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                                //        custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                                //        custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                                //        //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                                //        custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                                //        custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                                //        custcommand.Parameters.AddWithValue("IDType", IDType);
    //                                //        custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                                //        custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                                //        custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                                //        custcommand.Parameters.AddWithValue("CustID", CustID);
    //                                //        custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                                //        custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                                //        custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                                //        custcommand.Parameters.AddWithValue("Email", Email);
    //                                //        custcommand.ExecuteNonQuery();


    //                                //    }
    //                                //}


    //                            }
    //                        }
    //                    }

    //                    custconn.Close();
    //                    if (!error)
    //                    {
    //                        return new CustomerUpdateResponse { respcode = 1, message = getRespMessage(1) };
    //                    }
    //                    return new CustomerUpdateResponse { respcode = 17, message = "Error in updating Photo." };
    //                }
    //            //}
    //        }
    //        catch (Exception ex)
    //        {
    //            kplog.Fatal("Duplicate", ex);
    //            custconn.Close();
    //            int respcode = 0;
    //            if (ex.Message.StartsWith("Duplicate"))
    //            {
    //                respcode = 6;
    //            }
    //            return new CustomerUpdateResponse { respcode = respcode, message = getRespMessage(respcode), ErrorDetail = ex.ToString() };
    //        }
    //    }
    //}

    //[WebMethod]
    //public CustomerUpdateResponse updateCustomer(String Username, String Password, String CustID, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderBirthdate, String SenderBranchID, String IDType, String IDNo, String ExpiryDate, String ModifiedBy, String PhoneNo, String MobileNo, String Email, String CardNo, Double version, String stationcode, String PlaceofBirth, String NatureOfWork, String PermanentAddress, String Nationality, String CompanyOrEmployer, String BusinessOrProfession, String GovtIDType, String GovtIDNo)
    //{
    //    if (!authenticate(Username, Password))
    //    {
    //        return new CustomerUpdateResponse { respcode = 7, message = getRespMessage(7) };
    //    }
    //    string firstname = SenderFName.Substring(0, 1);
    //    //Byte[] kycfront = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] kycback = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id1 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id2 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id3 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //if (!compareVersions(getVersion(stationcode), version))
    //    //{
    //    //    return new CustomerUpdateResponse { respcode = 10, message = getRespMessage(10) };
    //    //}
    //    try
    //    {
    //        dt = getServerDateDomestic(false);
    //    }
    //    catch (Exception ex)
    //    {
    //        kplog.Info("Exeption catch");
    //        return new CustomerUpdateResponse { respcode = 0, message = ex.ToString() };
    //    }
    //    using (MySqlConnection custconn = custconDomestic.getConnection())
    //    {
    //        try
    //        {
    //            custconn.Open();

    //            using (custcommand = custconn.CreateCommand())
    //            {
    //                string checkname = "select custid from kpcustomers.customers where firstname=@firstname and lastname=@lastname and middlename=@middlename and date(birthdate)=date(@senderbdate)";
    //                custcommand.CommandText = checkname;
    //                custcommand.Parameters.Clear();
    //                custcommand.Parameters.AddWithValue("firstname", SenderFName);
    //                custcommand.Parameters.AddWithValue("lastname", SenderLName);
    //                custcommand.Parameters.AddWithValue("middlename", SenderMName);
    //                custcommand.Parameters.AddWithValue("senderbdate", SenderBirthdate);


    //                MySqlDataReader readnameexist = custcommand.ExecuteReader();
    //                if (readnameexist.Read())
    //                {
    //                    string custidinquery = readnameexist["custid"].ToString();
    //                    readnameexist.Close();
    //                    //custconn.Close();
    //                    if (custidinquery != CustID)
    //                    {
    //                        custconn.Close();
    //                        return new CustomerUpdateResponse { respcode = 0, message = "Customer Name already exist!" };
    //                    }
    //                }
    //                readnameexist.Close();

    //                //string checkcard = "select cardno, custid from kpcustomers.customers where cardno='" + CardNo + "';";
    //                //custcommand.CommandText = checkcard;
    //                //custcommand.Parameters.Clear();
    //                //MySqlDataReader drx = custcommand.ExecuteReader();
    //                //if (drx.HasRows)
    //                //{
    //                //    drx.Read();
    //                //    String card = drx["cardno"].ToString();
    //                //    String custid = drx["custid"].ToString();
    //                //    String lname = drx["lastname"].ToString();
    //                //    drx.Close();
    //                //    if (!(custid.Equals(CustID)))
    //                //    {
    //                //        custconn.Close();
    //                //        return new CustomerUpdateResponse { respcode = 0, message = "Card Number already exist!" };
    //                //    }
    //                //}
    //                //drx.Close();

    //                if (CustID != String.Empty)
    //                {
    //                    custcommand.CommandText = "Select c.CardNo from kpcustomers.customercard c inner join kpcustomers.customers cu on c.cardno = cu.cardno where cu.custid = @custid";
    //                    custcommand.Parameters.Clear();
    //                    custcommand.Parameters.AddWithValue("custid", CustID);
    //                    using (MySqlDataReader dataReader = custcommand.ExecuteReader())
    //                    {
    //                        if (!dataReader.Read())
    //                        {
    //                            dataReader.Close();
    //                            if (!CardNo.Equals(String.Empty) || CardNo != DBNull.Value.ToString())
    //                            {
    //                                custcommand.Parameters.Clear();
    //                                custcommand.CommandText = "Select CardNo,custid from kpcustomers.customercard where CardNO = @cardno";
    //                                custcommand.Parameters.AddWithValue("cardno", CardNo);
    //                                using (MySqlDataReader checkifcardexist = custcommand.ExecuteReader())
    //                                {
    //                                    string custidindb;
    //                                    if (checkifcardexist.HasRows)
    //                                    {
    //                                        checkifcardexist.Read();
    //                                        custidindb = checkifcardexist["custid"].ToString();
    //                                        checkifcardexist.Close();

    //                                        if (custidindb != CustID)
    //                                        {
    //                                            custconn.Close();
    //                                            return new CustomerUpdateResponse { respcode = 0, message = "Card No. was already owned by another customer" };
    //                                        }
    //                                    }
    //                                    checkifcardexist.Close();
    //                                }

    //                                String queryCard = "INSERT INTO kpcustomers.customercard (`CardNo`,custid) values (@CardNo1,@custid);";
    //                                custcommand.Parameters.Clear();
    //                                custcommand.CommandText = queryCard;
    //                                custcommand.Parameters.AddWithValue("CardNo1", CardNo);
    //                                custcommand.Parameters.AddWithValue("custid", CustID);
    //                                custcommand.ExecuteNonQuery();
    //                            }

    //                            //////////////custcommand.Parameters.Clear();
    //                            //////////////String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email, a.PlaceofBirth = @PlaceofBirth, a.NatureOfWork = @NatureOfWork, a.PermanentAddress = @PermanentAddress, a.Nationality = @Nationality, a.CompanyOrEmployer = @CompanyOrEmployer, a.BusinessOrProfession = @BusinessOrProfession WHERE a.CustID = @CustID;";
    //                            //////////////custcommand.CommandText = query;
    //                            //////////////custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                            //////////////custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                            //////////////custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                            //////////////custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                            //////////////custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                            //////////////custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                            //////////////custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                            //////////////custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                            ////////////////custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                            //////////////custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                            //////////////custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                            //////////////custcommand.Parameters.AddWithValue("IDType", IDType);
    //                            //////////////custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                            //////////////custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                            //////////////custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                            //////////////custcommand.Parameters.AddWithValue("CustID", CustID);
    //                            //////////////custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                            //////////////custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                            //////////////custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                            //////////////custcommand.Parameters.AddWithValue("Email", Email);
    //                            //////////////custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
    //                            //////////////custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
    //                            //////////////custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
    //                            //////////////custcommand.Parameters.AddWithValue("Nationality", Nationality);
    //                            //////////////custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
    //                            //////////////custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
    //                            //////////////custcommand.ExecuteNonQuery();

    //                            ////, a.PlaceofBirth = @PlaceofBirth, a.NatureOfWork = @NatureOfWork, a.PermanentAddress = @PermanentAddress, a.Nationality = @Nationality, a.CompanyOrEmployer = @CompanyOrEmployer, a.BusinessOrProfession = @BusinessOrProfession

    //                            custcommand.Parameters.Clear();
    //                            String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email, a.GovtIDType=@GovtIDType, a.GovtIDNo=@GovtIDNo WHERE a.CustID = @CustID;";
    //                            custcommand.CommandText = query;
    //                            custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                            custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                            custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                            custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                            custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                            custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                            custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                            custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                            //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                            custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                            custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                            custcommand.Parameters.AddWithValue("IDType", IDType);
    //                            custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                            custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                            custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                            custcommand.Parameters.AddWithValue("CustID", CustID);
    //                            custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                            custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                            custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                            custcommand.Parameters.AddWithValue("Email", Email);
    //                            custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
    //                            custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
    //                            //////custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
    //                            //////custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
    //                            //////custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
    //                            //////custcommand.Parameters.AddWithValue("Nationality", Nationality);
    //                            //////custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
    //                            //////custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
    //                            custcommand.ExecuteNonQuery();

    //                            custcommand.Parameters.Clear();
    //                            string custinfo = "INSERT INTO kpcustomers.CustomerInfo (CustID, PlaceofBirth, NatureOfWork, " +
    //                                "PermanentAddress, Nationality, CompanyOrEmployer, BusinessOrProfession, DTModified, DTModifier) " +
    //                                "VALUES (@CustId, @PlaceofBirth, @NatureOfWork, @PermanentAddress, @Nationality , " +
    //                                "@CompanyOrEmployer, @BusinessOrProfession, now(),@DTModifier) ON DUPLICATE KEY UPDATE " +
    //                                "PlaceofBirth = @PlaceofBirth, NatureOfWork = @NatureOfWork, PermanentAddress = @PermanentAddress, " +
    //                                "Nationality = @Nationality, CompanyOrEmployer = @CompanyOrEmployer, " +
    //                                "BusinessOrProfession = @BusinessOrProfession, DTModified=now(), DTModifier=@DTModifier;";
    //                            custcommand.CommandText = custinfo;
    //                            custcommand.Parameters.AddWithValue("CustId", CustID);
    //                            custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
    //                            custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
    //                            custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
    //                            custcommand.Parameters.AddWithValue("Nationality", Nationality);
    //                            custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
    //                            custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
    //                            custcommand.Parameters.AddWithValue("DTModifier", ModifiedBy);
    //                            custcommand.ExecuteNonQuery();

    //                            //string checkifcustidexistinmages = "SELECT custid FROM customerscanimages.customer" + firstname + " WHERE custid=@customerid;";
    //                            //custcommand.CommandText = checkifcustidexistinmages;
    //                            //custcommand.Parameters.Clear();
    //                            //custcommand.Parameters.AddWithValue("customerid", CustID);
    //                            //MySqlDataReader reader = custcommand.ExecuteReader();
    //                            //if (!reader.HasRows)
    //                            //{
    //                            //    reader.Close();
    //                            //    string insertimage = "INSERT INTO customerscanimages.customer" + firstname + " (custid,kycfront,kycback,id1,id2,id3,syscreated,imagefree1,syscreator) VALUES (@custid,@kycfront,@kycback,@id1,@id2,@id3,now(),@image,@syscreator);";
    //                            //    custcommand.CommandText = insertimage;
    //                            //    custcommand.Parameters.Clear();
    //                            //    custcommand.Parameters.AddWithValue("custid", CustID);
    //                            //    custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                            //    custcommand.Parameters.AddWithValue("kycback", kycback);
    //                            //    custcommand.Parameters.AddWithValue("id1", id1);
    //                            //    custcommand.Parameters.AddWithValue("id2", id2);
    //                            //    custcommand.Parameters.AddWithValue("id3", id3);
    //                            //    custcommand.Parameters.AddWithValue("image", image);
    //                            //    custcommand.Parameters.AddWithValue("syscreator", ModifiedBy);
    //                            //    custcommand.ExecuteNonQuery();
    //                            //}
    //                            //else
    //                            //{
    //                            //    reader.Close();
    //                            //    string insertimage = "UPDATE customerscanimages.customer" + firstname + " SET kycfront=@kycfront,kycback=@kycback,id1=@id1,id2=@id2,id3=@id3,imagefree1=@image,sysmodified=now(),sysmodifier=@sysmodifier where custid=@custid1;";
    //                            //    custcommand.CommandText = insertimage;
    //                            //    custcommand.Parameters.Clear();
    //                            //    custcommand.Parameters.AddWithValue("custid1", CustID);
    //                            //    custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                            //    custcommand.Parameters.AddWithValue("kycback", kycback);
    //                            //    custcommand.Parameters.AddWithValue("id1", id1);
    //                            //    custcommand.Parameters.AddWithValue("id2", id2);
    //                            //    custcommand.Parameters.AddWithValue("id3", id3);
    //                            //    custcommand.Parameters.AddWithValue("image", image);
    //                            //    custcommand.Parameters.AddWithValue("sysmodifier", ModifiedBy);
    //                            //    custcommand.ExecuteNonQuery();
    //                            //}
    //                            //reader.Close();
    //                            //string insertimage = "UPDATE kpcustomers.customerimages SET kycfront=@kycfront,kycback=@kycback,id1=@id1,id2=@id2,id3=@id3,sysmodified=now(),sysmodifier=@sysmodifier where custid=@custid1;";
    //                            //custcommand.Parameters.Clear();
    //                            //custcommand.CommandText = insertimage;
    //                            //custcommand.Parameters.AddWithValue("custid1", CustID);
    //                            //custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                            //custcommand.Parameters.AddWithValue("kycback", kycback);
    //                            //custcommand.Parameters.AddWithValue("id1", id1);
    //                            //custcommand.Parameters.AddWithValue("id2", id2);
    //                            //custcommand.Parameters.AddWithValue("id3", id3);
    //                            //custcommand.Parameters.AddWithValue("sysmodifier", ModifiedBy);
    //                            //custcommand.ExecuteNonQuery();
    //                        }
    //                        else
    //                        {

    //                            dataReader.Close();
    //                            if (CardNo.Equals(String.Empty) || CardNo == DBNull.Value.ToString())
    //                            {
    //                                //////////////////custcommand.Parameters.Clear();
    //                                //////////////////String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified =now(), a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email, a.PlaceofBirth = @PlaceofBirth, a.NatureOfWork = @NatureOfWork, a.PermanentAddress = @PermanentAddress, a.Nationality = @Nationality, a.CompanyOrEmployer = @CompanyOrEmployer, a.BusinessOrProfession = @BusinessOrProfession WHERE a.CustID = @CustID;";
    //                                //////////////////custcommand.CommandText = query;
    //                                //////////////////custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                                //////////////////custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                                //////////////////custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                                //////////////////custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                                //////////////////custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                                //////////////////custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                                //////////////////custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                                //////////////////custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                                ////////////////////custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                                //////////////////custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                                //////////////////custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                                //////////////////custcommand.Parameters.AddWithValue("IDType", IDType);
    //                                //////////////////custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                                //////////////////custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                                ////////////////////custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                                //////////////////custcommand.Parameters.AddWithValue("CustID", CustID);
    //                                //////////////////custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                                //////////////////custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                                //////////////////custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                                //////////////////custcommand.Parameters.AddWithValue("Email", Email);
    //                                //////////////////custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
    //                                //////////////////custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
    //                                //////////////////custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
    //                                //////////////////custcommand.Parameters.AddWithValue("Nationality", Nationality);
    //                                //////////////////custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
    //                                //////////////////custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
    //                                //////////////////custcommand.ExecuteNonQuery();

    //                                ////, a.PlaceofBirth = @PlaceofBirth, a.NatureOfWork = @NatureOfWork, a.PermanentAddress = @PermanentAddress, a.Nationality = @Nationality, a.CompanyOrEmployer = @CompanyOrEmployer, a.BusinessOrProfession = @BusinessOrProfession

    //                                custcommand.Parameters.Clear();
    //                                String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email, a.GovtIDType=@GovtIDType, a.GovtIDNo=@GovtIDNo WHERE a.CustID = @CustID;";
    //                                custcommand.CommandText = query;
    //                                custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                                custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                                custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                                custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                                custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                                custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                                custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                                custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                                //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                                custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                                custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                                custcommand.Parameters.AddWithValue("IDType", IDType);
    //                                custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                                custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                                custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                                custcommand.Parameters.AddWithValue("CustID", CustID);
    //                                custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                                custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                                custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                                custcommand.Parameters.AddWithValue("Email", Email);
    //                                custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
    //                                custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
    //                                //////custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
    //                                //////custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
    //                                //////custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
    //                                //////custcommand.Parameters.AddWithValue("Nationality", Nationality);
    //                                //////custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
    //                                //////custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
    //                                custcommand.ExecuteNonQuery();

    //                                custcommand.Parameters.Clear();
    //                                string custinfo = "INSERT INTO kpcustomers.CustomerInfo (CustID, PlaceofBirth, NatureOfWork, " +
    //                                    "PermanentAddress, Nationality, CompanyOrEmployer, BusinessOrProfession, DTModified, DTModifier) " +
    //                                    "VALUES (@CustId, @PlaceofBirth, @NatureOfWork, @PermanentAddress, @Nationality , " +
    //                                    "@CompanyOrEmployer, @BusinessOrProfession, now(),@DTModifier) ON DUPLICATE KEY UPDATE " +
    //                                    "PlaceofBirth = @PlaceofBirth, NatureOfWork = @NatureOfWork, PermanentAddress = @PermanentAddress, " +
    //                                    "Nationality = @Nationality, CompanyOrEmployer = @CompanyOrEmployer, " +
    //                                    "BusinessOrProfession = @BusinessOrProfession, DTModified=now(), DTModifier=@DTModifier;";
    //                                custcommand.CommandText = custinfo;
    //                                custcommand.Parameters.AddWithValue("CustId", CustID);
    //                                custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
    //                                custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
    //                                custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
    //                                custcommand.Parameters.AddWithValue("Nationality", Nationality);
    //                                custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
    //                                custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
    //                                custcommand.Parameters.AddWithValue("DTModifier", ModifiedBy);
    //                                custcommand.ExecuteNonQuery();

    //                                //string insertimage = "UPDATE kpcustomers.customerimages SET kycfront=@kycfront,kycback=@kycback,id1=@id1,id2=@id2,id3=@id3,sysmodified=now(),sysmodifier=@sysmodifier where custid=@custid1;";
    //                                //custcommand.Parameters.Clear();
    //                                //custcommand.CommandText = insertimage;
    //                                //custcommand.Parameters.AddWithValue("custid1", CustID);
    //                                //custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                //custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                //custcommand.Parameters.AddWithValue("id1", id1);
    //                                //custcommand.Parameters.AddWithValue("id2", id2);
    //                                //custcommand.Parameters.AddWithValue("id3", id3);
    //                                //custcommand.Parameters.AddWithValue("sysmodifier", ModifiedBy);
    //                                //custcommand.ExecuteNonQuery();

    //                                custcommand.Parameters.Clear();
    //                                String queryCard = "UPDATE kpcustomers.customercard SET custid=null where custid=@custid";
    //                                custcommand.CommandText = queryCard;
    //                                custcommand.Parameters.AddWithValue("custid", CustID);
    //                            }
    //                            else
    //                            {
    //                                custcommand.Parameters.Clear();
    //                                custcommand.CommandText = "Select CardNo,custid from kpcustomers.customercard where CardNO = @cardno";
    //                                custcommand.Parameters.AddWithValue("cardno", CardNo);
    //                                using (MySqlDataReader cardDataReader = custcommand.ExecuteReader())
    //                                {
    //                                    string custidindb1 = string.Empty;
    //                                    if (cardDataReader.HasRows)
    //                                    {
    //                                        cardDataReader.Read();
    //                                        custidindb1 = cardDataReader["custid"].ToString();
    //                                        cardDataReader.Close();
    //                                        if (custidindb1 != CustID)
    //                                        {
    //                                            custconn.Close();
    //                                            return new CustomerUpdateResponse { respcode = 0, message = "Card No. was already owned by another customer" };
    //                                        }
    //                                    }

    //                                    cardDataReader.Close();
    //                                    String queryCard = "UPDATE kpcustomers.customercard a SET CardNo = @CardNo where CustID = @CustID;";
    //                                    custcommand.Parameters.Clear();
    //                                    custcommand.CommandText = queryCard;
    //                                    custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                                    custcommand.Parameters.AddWithValue("custid", CustID);
    //                                    custcommand.ExecuteNonQuery();

    //                                    //////////////custcommand.Parameters.Clear();
    //                                    //////////////String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = now(), a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email, a.PlaceofBirth = @PlaceofBirth, a.NatureOfWork = @NatureOfWork, a.PermanentAddress = @PermanentAddress, a.Nationality = @Nationality, a.CompanyOrEmployer = @CompanyOrEmployer, a.BusinessOrProfession = @BusinessOrProfession WHERE a.CustID = @CustID;";
    //                                    //////////////custcommand.CommandText = query;
    //                                    //////////////custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                                    //////////////custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                                    //////////////custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                                    //////////////custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                                    //////////////custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                                    //////////////custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                                    //////////////custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                                    //////////////custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                                    ////////////////custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                                    //////////////custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                                    //////////////custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                                    //////////////custcommand.Parameters.AddWithValue("IDType", IDType);
    //                                    //////////////custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                                    //////////////custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                                    //////////////custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                                    //////////////custcommand.Parameters.AddWithValue("CustID", CustID);
    //                                    //////////////custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                                    //////////////custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                                    //////////////custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                                    //////////////custcommand.Parameters.AddWithValue("Email", Email);
    //                                    //////////////custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
    //                                    //////////////custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
    //                                    //////////////custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
    //                                    //////////////custcommand.Parameters.AddWithValue("Nationality", Nationality);
    //                                    //////////////custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
    //                                    //////////////custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
    //                                    //////////////custcommand.ExecuteNonQuery();

    //                                    ////, a.PlaceofBirth = @PlaceofBirth, a.NatureOfWork = @NatureOfWork, a.PermanentAddress = @PermanentAddress, a.Nationality = @Nationality, a.CompanyOrEmployer = @CompanyOrEmployer, a.BusinessOrProfession = @BusinessOrProfession

    //                                    custcommand.Parameters.Clear();
    //                                    String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email, a.GovtIDType=@GovtIDType, a.GovtIDNo=@GovtIDNo WHERE a.CustID = @CustID;";
    //                                    custcommand.CommandText = query;
    //                                    custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                                    custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                                    custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                                    custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                                    custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                                    custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                                    custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                                    custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                                    //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                                    custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                                    custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                                    custcommand.Parameters.AddWithValue("IDType", IDType);
    //                                    custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                                    custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                                    custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                                    custcommand.Parameters.AddWithValue("CustID", CustID);
    //                                    custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                                    custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                                    custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                                    custcommand.Parameters.AddWithValue("Email", Email);
    //                                    custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
    //                                    custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
    //                                    //////custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
    //                                    //////custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
    //                                    //////custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
    //                                    //////custcommand.Parameters.AddWithValue("Nationality", Nationality);
    //                                    //////custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
    //                                    //////custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
    //                                    custcommand.ExecuteNonQuery();

    //                                    custcommand.Parameters.Clear();
    //                                    string custinfo = "INSERT INTO kpcustomers.CustomerInfo (CustID, PlaceofBirth, NatureOfWork, " +
    //                                        "PermanentAddress, Nationality, CompanyOrEmployer, BusinessOrProfession, DTModified, DTModifier) " +
    //                                        "VALUES (@CustId, @PlaceofBirth, @NatureOfWork, @PermanentAddress, @Nationality , " +
    //                                        "@CompanyOrEmployer, @BusinessOrProfession, now(),@DTModifier) ON DUPLICATE KEY UPDATE " +
    //                                        "PlaceofBirth = @PlaceofBirth, NatureOfWork = @NatureOfWork, PermanentAddress = @PermanentAddress, " +
    //                                        "Nationality = @Nationality, CompanyOrEmployer = @CompanyOrEmployer, " +
    //                                        "BusinessOrProfession = @BusinessOrProfession, DTModified=now(), DTModifier=@DTModifier;";
    //                                    custcommand.CommandText = custinfo;
    //                                    custcommand.Parameters.AddWithValue("CustId", CustID);
    //                                    custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
    //                                    custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
    //                                    custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
    //                                    custcommand.Parameters.AddWithValue("Nationality", Nationality);
    //                                    custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
    //                                    custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
    //                                    custcommand.Parameters.AddWithValue("DTModifier", ModifiedBy);
    //                                    custcommand.ExecuteNonQuery();

    //                                    //string checkifcustidexistinmages = "SELECT custid FROM customerscanimages.customer" + firstname + " WHERE custid=@customerid;";
    //                                    //custcommand.CommandText = checkifcustidexistinmages;
    //                                    //custcommand.Parameters.AddWithValue("customerid", CustID);
    //                                    //MySqlDataReader reader2 = custcommand.ExecuteReader();
    //                                    //if (!reader2.HasRows)
    //                                    //{
    //                                    //    reader2.Close();
    //                                    //    string insertimage = "INSERT INTO customerscanimages.customer" + firstname + " (custid,kycfront,kycback,id1,id2,id3,syscreated,imagefree1,syscreator) VALUES (@custid,@kycfront,@kycback,@id1,@id2,@id3,now(),@image,@syscreator);";
    //                                    //    custcommand.CommandText = insertimage;
    //                                    //    custcommand.Parameters.Clear();
    //                                    //    custcommand.Parameters.AddWithValue("custid", CustID);
    //                                    //    custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                    //    custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                    //    custcommand.Parameters.AddWithValue("id1", id1);
    //                                    //    custcommand.Parameters.AddWithValue("id2", id2);
    //                                    //    custcommand.Parameters.AddWithValue("id3", id3);
    //                                    //    custcommand.Parameters.AddWithValue("image", image);
    //                                    //    custcommand.Parameters.AddWithValue("syscreator", ModifiedBy);
    //                                    //    custcommand.ExecuteNonQuery();
    //                                    //}
    //                                    //else
    //                                    //{
    //                                    //    reader2.Close();
    //                                    //    string insertimage = "UPDATE customerscanimages.customer" + firstname + " SET kycfront=@kycfront,kycback=@kycback,id1=@id1,id2=@id2,id3=@id3,imagefree1=@image,sysmodified=now(),sysmodifier=@sysmodifier where custid=@custid1;";
    //                                    //    custcommand.CommandText = insertimage;
    //                                    //    custcommand.Parameters.Clear();
    //                                    //    custcommand.Parameters.AddWithValue("custid1", CustID);
    //                                    //    custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                    //    custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                    //    custcommand.Parameters.AddWithValue("id1", id1);
    //                                    //    custcommand.Parameters.AddWithValue("id2", id2);
    //                                    //    custcommand.Parameters.AddWithValue("id3", id3);
    //                                    //    custcommand.Parameters.AddWithValue("image", image);
    //                                    //    custcommand.Parameters.AddWithValue("sysmodifier", ModifiedBy);
    //                                    //    custcommand.ExecuteNonQuery();
    //                                    //}
    //                                    //reader2.Close();
    //                                    //string insertimage = "UPDATE kpcustomers.customerimages SET kycfront=@kycfront,kycback=@kycback,id1=@id1,id2=@id2,id3=@id3,sysmodified=now(),sysmodifier=@sysmodifier where custid=@custid1;";
    //                                    //custcommand.Parameters.Clear();
    //                                    //custcommand.CommandText = insertimage;
    //                                    //custcommand.Parameters.AddWithValue("custid1", CustID);
    //                                    //custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                                    //custcommand.Parameters.AddWithValue("kycback", kycback);
    //                                    //custcommand.Parameters.AddWithValue("id1", id1);
    //                                    //custcommand.Parameters.AddWithValue("id2", id2);
    //                                    //custcommand.Parameters.AddWithValue("id3", id3);
    //                                    //custcommand.Parameters.AddWithValue("sysmodifier", ModifiedBy);
    //                                    //custcommand.ExecuteNonQuery();
    //                                }

    //                            }
    //                            //custcommand.Parameters.Clear();
    //                            //custcommand.CommandText = "Select CardNo,custid from kpcustomers.customercard where CardNO = @cardno";
    //                            //custcommand.Parameters.AddWithValue("cardno", CardNo);
    //                            ////custcommand.Parameters.AddWithValue("custid", CustID);
    //                            //using (MySqlDataReader cardDataReader = custcommand.ExecuteReader())
    //                            //{
    //                            //    //Check if card number belongs to the same customer
    //                            //    string custidindb;
    //                            //    if (cardDataReader.HasRows)
    //                            //    {
    //                            //        cardDataReader.Read();
    //                            //        custidindb = cardDataReader["custid"].ToString();
    //                            //        cardDataReader.Close();

    //                            //        if (custidindb == CustID)
    //                            //        {
    //                            //            String queryCard = "UPDATE kpcustomers.customercard cc INNER JOIN kpcustomers.customers c ON cc.cardno=c.cardno SET cc.CardNo = @CardNo1 WHERE c.custid = @CustID1;";
    //                            //            custcommand.CommandText = queryCard;
    //                            //            custcommand.Parameters.Clear();
    //                            //            custcommand.Parameters.AddWithValue("CardNo1", CardNo);
    //                            //            custcommand.Parameters.AddWithValue("CustID1", CustID);
    //                            //            custcommand.ExecuteNonQuery();

    //                            //            custcommand.Parameters.Clear();
    //                            //            String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
    //                            //            custcommand.CommandText = query;
    //                            //            custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                            //            custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                            //            custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                            //            custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                            //            custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                            //            custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                            //            custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                            //            custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                            //            //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                            //            custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                            //            custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                            //            custcommand.Parameters.AddWithValue("IDType", IDType);
    //                            //            custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                            //            custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                            //            custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                            //            custcommand.Parameters.AddWithValue("CustID", CustID);
    //                            //            custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                            //            custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                            //            custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                            //            custcommand.Parameters.AddWithValue("Email", Email);
    //                            //            custcommand.ExecuteNonQuery();
    //                            //        }
    //                            //        else
    //                            //        {
    //                            //            custconn.Close();
    //                            //            return new CustomerUpdateResponse { respcode = 0, message = "Card No. was already owned by another customer" };
    //                            //            //String queryCard = "UPDATE kpcustomers.customercard cc INNER JOIN kpcustomers.customers c ON cc.cardno=c.cardno SET cc.CardNo = @CardNo1 WHERE c.custid = @CustID1;";
    //                            //            //custcommand.CommandText = queryCard;
    //                            //            //custcommand.Parameters.AddWithValue("CardNo1", CardNo);
    //                            //            //custcommand.Parameters.AddWithValue("CustID1", CustID);
    //                            //            //custcommand.ExecuteNonQuery();

    //                            //            //custcommand.Parameters.Clear();
    //                            //            //String queryCard1 = "UPDATE kpcustomers.customers SET CardNo = @CardNo1 WHERE CustID = @CustID1;";
    //                            //            //custcommand.CommandText = queryCard1;
    //                            //            //custcommand.Parameters.AddWithValue("CardNo1", CardNo);
    //                            //            //custcommand.Parameters.AddWithValue("CustID1", CustID);
    //                            //            //custcommand.ExecuteNonQuery();
    //                            //        }
    //                            //    }
    //                            //    else
    //                            //    {
    //                            //        cardDataReader.Close();
    //                            //        //String queryCard = "UPDATE kpcustomersglobal.customercard SET CardNo = @CardNo1 WHERE CardNo = @CustID1;";
    //                            //        String queryCard = "UPDATE kpcustomers.customercard cc INNER JOIN kpcustomers.customers c ON cc.cardno=c.cardno SET cc.CardNo = @CardNo1 WHERE c.custid = @CustID1;";
    //                            //        custcommand.CommandText = queryCard;
    //                            //        custcommand.Parameters.AddWithValue("CardNo1", CardNo);
    //                            //        custcommand.Parameters.AddWithValue("CustID1", CustID);
    //                            //        custcommand.ExecuteNonQuery();

    //                            //        custcommand.Parameters.Clear();
    //                            //        String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
    //                            //        custcommand.CommandText = query;
    //                            //        custcommand.Parameters.AddWithValue("CardNo", CardNo);
    //                            //        custcommand.Parameters.AddWithValue("FirstName", SenderFName);
    //                            //        custcommand.Parameters.AddWithValue("LastName", SenderLName);
    //                            //        custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
    //                            //        custcommand.Parameters.AddWithValue("Street", SenderStreet);
    //                            //        custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
    //                            //        custcommand.Parameters.AddWithValue("Country", SenderCountry);
    //                            //        custcommand.Parameters.AddWithValue("Gender", SenderGender);
    //                            //        //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
    //                            //        custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
    //                            //        custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
    //                            //        custcommand.Parameters.AddWithValue("IDType", IDType);
    //                            //        custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                            //        custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                            //        custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                            //        custcommand.Parameters.AddWithValue("CustID", CustID);
    //                            //        custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
    //                            //        custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                            //        custcommand.Parameters.AddWithValue("Mobile", MobileNo);
    //                            //        custcommand.Parameters.AddWithValue("Email", Email);
    //                            //        custcommand.ExecuteNonQuery();


    //                            //    }
    //                            //}


    //                        }
    //                    }
    //                }

    //                custconn.Close();

    //                return new CustomerUpdateResponse { respcode = 1, message = getRespMessage(1) };
    //            }
    //            //}
    //        }
    //        catch (Exception ex)
    //        {
    //            kplog.Fatal("Duplicate", ex);
    //            custconn.Close();
    //            int respcode = 0;
    //            if (ex.Message.StartsWith("Duplicate"))
    //            {
    //                respcode = 6;
    //            }
    //            return new CustomerUpdateResponse { respcode = respcode, message = getRespMessage(respcode), ErrorDetail = ex.ToString() };
    //        }
    //    }
    //}

    [WebMethod]
    public CustomerUpdateResponse updateCustomer(String Username, String Password, String CustID, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderBirthdate, String SenderBranchID, String IDType, String IDNo, String ExpiryDate, String ModifiedBy, String PhoneNo, String MobileNo, String Email, String CardNo, Double version, String stationcode, String PlaceofBirth, String NatureOfWork, String PermanentAddress, String Nationality, String CompanyOrEmployer, String BusinessOrProfession, String GovtIDType, String GovtIDNo, Boolean isCashCard)
    {
        kplog.Info(CustID + "|" + SenderFName + "|" + SenderLName + "|" + SenderMName + "|" + SenderStreet + "|" + SenderProvinceCity + "|" + SenderCountry + "|" + SenderGender + "|" + SenderBirthdate + "|" + SenderBranchID + "|" + IDType + "|" + IDNo + "|" + ExpiryDate + "|" + ModifiedBy + "|" + PhoneNo + "|" + MobileNo + "|" + Email + "|" + CardNo + "|" + version + "|" + stationcode + "|" + PlaceofBirth + "|" + NatureOfWork + "|" + PermanentAddress + "|" + Nationality + "|" + CompanyOrEmployer + "|" + BusinessOrProfession + "|" + GovtIDType + "|" + GovtIDNo + "|" + isCashCard);
        Boolean hasGovtID;
        Boolean issuccessinupdatemlcard = false;
        String mlcardmsgresp = "";
        if (!authenticate(Username, Password))
        {
            return new CustomerUpdateResponse { respcode = 7, message = getRespMessage(7) };
        }
        string firstname = SenderFName.Substring(0, 1);
        //Byte[] kycfront = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
        //Byte[] kycback = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
        //Byte[] id1 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
        //Byte[] id2 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
        //Byte[] id3 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new CustomerUpdateResponse { respcode = 10, message = getRespMessage(10) };
        //}
        try
        {
            dt = getServerDateDomesticCustomer();
        }
        catch (Exception ex)
        {
            kplog.Info("Exeption catch");
            return new CustomerUpdateResponse { respcode = 0, message = ex.ToString() };
        }
        try
        {
            MLRewards.MLRewardsRedeem rewards;
            MLRewards.UpdateNewMLCardResponse updatemlcardresp;

            using (rewards = new MLRewards.MLRewardsRedeem())
            {
                rewards.Url = redemurl;
                updatemlcardresp = new MLRewards.UpdateNewMLCardResponse();
                try
                {
                    updatemlcardresp = rewards.UpdateMLCard(CardNo, SenderFName, SenderMName, SenderLName, SenderBirthdate);
                    updatemlcardresponse resp = new updatemlcardresponse
                    {
                        mlcardno = updatemlcardresp.MLCard_,
                        customerid = updatemlcardresp.CustomerID_,
                        customername = updatemlcardresp.CustomerName_
                    };
                    if (updatemlcardresp.respcode == 0)
                        issuccessinupdatemlcard = true;
                    if (updatemlcardresp.respcode == 8 || updatemlcardresp.respcode == 7)
                        mlcardmsgresp = updatemlcardresp.respmsg;

                    kplog.Info(CardNo + " - respcode: " + updatemlcardresp.respcode + " | respmsg: " + updatemlcardresp.respmsg + " | respmlcardno: " + updatemlcardresp.MLCard_ + " | respcustid: " + updatemlcardresp.CustomerID_ + " | respcustname: " + updatemlcardresp.CustomerName_);
                    //return new mlrewardresponse { respcode = updatemlcardresp.respcode, respmsg = updatemlcardresp.respmsg, updatecardnoresp = resp };
                }
                catch (Exception ex)
                {
                    kplog.Fatal(CardNo + " - UpdateMLCard response: " + updatemlcardresp.respmsg + " - exception: " + ex.ToString());
                    //return new mlrewardresponse { respcode = 2, respmsg = ex.ToString() };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(CardNo + " - Problem connecting to MLRewards - exception: " + ex.ToString());
        }

        using (MySqlConnection custconn = custconDomestic.getConnection())
        {
            try
            {
                custconn.Open();

                using (custcommand = custconn.CreateCommand())
                {
                    string checkname = "select custid from kpcustomers.customers where firstname=@firstname and lastname=@lastname and middlename=@middlename and date(birthdate)=date(@senderbdate)";
                    custcommand.CommandText = checkname;
                    custcommand.Parameters.Clear();
                    custcommand.Parameters.AddWithValue("firstname", SenderFName);
                    custcommand.Parameters.AddWithValue("lastname", SenderLName);
                    custcommand.Parameters.AddWithValue("middlename", SenderMName);
                    custcommand.Parameters.AddWithValue("senderbdate", SenderBirthdate);


                    MySqlDataReader readnameexist = custcommand.ExecuteReader();
                    if (readnameexist.Read())
                    {
                        string custidinquery = readnameexist["custid"].ToString();
                        readnameexist.Close();
                        //custconn.Close();
                        if (custidinquery != CustID)
                        {
                            custconn.Close();
                            return new CustomerUpdateResponse { respcode = 0, message = "Customer Name already exist!" };
                        }
                    }
                    readnameexist.Close();
                    int Icustomercard1 = 0, Ucustomers1 = 0, Ucustomersgovt1 = 0, Icustomerinfo1 = 0;
                    int Ucustomers2 = 0, Ucustomersgovt2 = 0, Icustomerinfo2 = 0, Ucustomercard2 = 0;
                    int Ucustomercard3 = 0, Ucustomers3 = 0, Ucustomersgovt3 = 0, Icustomerinfo3 = 0;
                    if (CustID != String.Empty)
                    {
                        custcommand.CommandText = "select * from kpcustomers.customerGovtID where custid=@custid";
                        custcommand.Parameters.Clear();
                        custcommand.Parameters.AddWithValue("custid", CustID);

                        MySqlDataReader rdrCustID = custcommand.ExecuteReader();
                        if (rdrCustID.HasRows)
                        {
                            hasGovtID = true;
                        }
                        else
                        {
                            hasGovtID = false;
                        }
                        rdrCustID.Close();

                        custcommand.CommandText = "Select c.CardNo from kpcustomers.customercard c inner join kpcustomers.customers cu on c.cardno = cu.cardno where cu.custid = @custid";
                        custcommand.Parameters.Clear();
                        custcommand.Parameters.AddWithValue("custid", CustID);
                        using (MySqlDataReader dataReader = custcommand.ExecuteReader())
                        {
                            if (!dataReader.Read())
                            {
                                dataReader.Close();
                                if (!CardNo.Equals(String.Empty) || CardNo != DBNull.Value.ToString())
                                {
                                    custcommand.Parameters.Clear();
                                    custcommand.CommandText = "Select CardNo,custid from kpcustomers.customercard where CardNO = @cardno";
                                    custcommand.Parameters.AddWithValue("cardno", CardNo);
                                    using (MySqlDataReader checkifcardexist = custcommand.ExecuteReader())
                                    {
                                        string custidindb;
                                        if (checkifcardexist.HasRows)
                                        {
                                            checkifcardexist.Read();
                                            custidindb = checkifcardexist["custid"].ToString();
                                            checkifcardexist.Close();

                                            if (custidindb != CustID)
                                            {
                                                custconn.Close();
                                                return new CustomerUpdateResponse { respcode = 0, message = "Card No. was already owned by another customer" };
                                            }
                                        }
                                        checkifcardexist.Close();
                                    }

                                    String queryCard = "INSERT INTO kpcustomers.customercard (`CardNo`,custid) values (@CardNo1,@custid);";
                                    custcommand.Parameters.Clear();
                                    custcommand.CommandText = queryCard;
                                    custcommand.Parameters.AddWithValue("CardNo1", CardNo);
                                    custcommand.Parameters.AddWithValue("custid", CustID);
                                    Icustomercard1 = custcommand.ExecuteNonQuery();
                                }
                                ////, a.PlaceofBirth = @PlaceofBirth, a.NatureOfWork = @NatureOfWork, a.PermanentAddress = @PermanentAddress, a.Nationality = @Nationality, a.CompanyOrEmployer = @CompanyOrEmployer, a.BusinessOrProfession = @BusinessOrProfession

                                custcommand.Parameters.Clear();
                                String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
                                custcommand.CommandText = query;
                                custcommand.Parameters.AddWithValue("CardNo", CardNo);
                                custcommand.Parameters.AddWithValue("FirstName", SenderFName);
                                custcommand.Parameters.AddWithValue("LastName", SenderLName);
                                custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
                                custcommand.Parameters.AddWithValue("Street", SenderStreet);
                                custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
                                custcommand.Parameters.AddWithValue("Country", SenderCountry);
                                custcommand.Parameters.AddWithValue("Gender", SenderGender);
                                //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
                                custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
                                custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
                                custcommand.Parameters.AddWithValue("IDType", IDType);
                                custcommand.Parameters.AddWithValue("IDNo", IDNo);
                                custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
                                custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                custcommand.Parameters.AddWithValue("CustID", CustID);
                                custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
                                custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
                                custcommand.Parameters.AddWithValue("Mobile", MobileNo);
                                custcommand.Parameters.AddWithValue("Email", Email);
                                Ucustomers1 = custcommand.ExecuteNonQuery();

                                if (hasGovtID)
                                {
                                    string custGovtID = "update kpcustomers.customerGovtID set GovtIDType=@GovtIDType, GovtIDNo=@GovtIDNo where custid=@custid";
                                    custcommand.CommandText = custGovtID;
                                    custcommand.Parameters.Clear();
                                    custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
                                    custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
                                    custcommand.Parameters.AddWithValue("custid", CustID);
                                    Ucustomersgovt1 = custcommand.ExecuteNonQuery();
                                }
                                else
                                {
                                    string custGovtID = "insert into kpcustomers.customerGovtID (custid,GovtIDType,GovtIDNo) values(@custid,@GovtIDType,@GovtIDNo)";
                                    custcommand.CommandText = custGovtID;
                                    custcommand.Parameters.Clear();
                                    custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
                                    custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
                                    custcommand.Parameters.AddWithValue("custid", CustID);
                                    Ucustomersgovt1 = custcommand.ExecuteNonQuery();
                                }

                                custcommand.Parameters.Clear();
                                string custinfo = "INSERT INTO kpcustomers.CustomerInfo (CustID, PlaceofBirth, NatureOfWork, " +
                                    "PermanentAddress, Nationality, CompanyOrEmployer, BusinessOrProfession, DTModified, DTModifier) " +
                                    "VALUES (@CustId, @PlaceofBirth, @NatureOfWork, @PermanentAddress, @Nationality , " +
                                    "@CompanyOrEmployer, @BusinessOrProfession, now(),@DTModifier) ON DUPLICATE KEY UPDATE " +
                                    "PlaceofBirth = @PlaceofBirth, NatureOfWork = @NatureOfWork, PermanentAddress = @PermanentAddress, " +
                                    "Nationality = @Nationality, CompanyOrEmployer = @CompanyOrEmployer, " +
                                    "BusinessOrProfession = @BusinessOrProfession, DTModified=now(), DTModifier=@DTModifier;";
                                custcommand.CommandText = custinfo;
                                custcommand.Parameters.AddWithValue("CustId", CustID);
                                custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
                                custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
                                custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
                                custcommand.Parameters.AddWithValue("Nationality", Nationality);
                                custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
                                custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
                                custcommand.Parameters.AddWithValue("DTModifier", ModifiedBy);
                                Icustomerinfo1 = custcommand.ExecuteNonQuery();
                            }
                            else
                            {

                                dataReader.Close();
                                if (CardNo.Equals(String.Empty) || CardNo == DBNull.Value.ToString())
                                {
                                    ////, a.PlaceofBirth = @PlaceofBirth, a.NatureOfWork = @NatureOfWork, a.PermanentAddress = @PermanentAddress, a.Nationality = @Nationality, a.CompanyOrEmployer = @CompanyOrEmployer, a.BusinessOrProfession = @BusinessOrProfession

                                    custcommand.Parameters.Clear();
                                    String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
                                    custcommand.CommandText = query;
                                    custcommand.Parameters.AddWithValue("CardNo", CardNo);
                                    custcommand.Parameters.AddWithValue("FirstName", SenderFName);
                                    custcommand.Parameters.AddWithValue("LastName", SenderLName);
                                    custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
                                    custcommand.Parameters.AddWithValue("Street", SenderStreet);
                                    custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
                                    custcommand.Parameters.AddWithValue("Country", SenderCountry);
                                    custcommand.Parameters.AddWithValue("Gender", SenderGender);
                                    //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
                                    custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
                                    custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
                                    custcommand.Parameters.AddWithValue("IDType", IDType);
                                    custcommand.Parameters.AddWithValue("IDNo", IDNo);
                                    custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
                                    custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                    custcommand.Parameters.AddWithValue("CustID", CustID);
                                    custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
                                    custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
                                    custcommand.Parameters.AddWithValue("Mobile", MobileNo);
                                    custcommand.Parameters.AddWithValue("Email", Email);
                                    Ucustomers2 = custcommand.ExecuteNonQuery();

                                    if (hasGovtID)
                                    {
                                        string custGovtID = "update kpcustomers.customerGovtID set GovtIDType=@GovtIDType, GovtIDNo=@GovtIDNo where custid=@custid";
                                        custcommand.CommandText = custGovtID;
                                        custcommand.Parameters.Clear();
                                        custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
                                        custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
                                        custcommand.Parameters.AddWithValue("custid", CustID);
                                        Ucustomersgovt2 = custcommand.ExecuteNonQuery();
                                    }
                                    else
                                    {
                                        string custGovtID = "insert into kpcustomers.customerGovtID (custid,GovtIDType,GovtIDNo) values(@custid,@GovtIDType,@GovtIDNo)";
                                        custcommand.CommandText = custGovtID;
                                        custcommand.Parameters.Clear();
                                        custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
                                        custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
                                        custcommand.Parameters.AddWithValue("custid", CustID);
                                        Ucustomersgovt2 = custcommand.ExecuteNonQuery();
                                    }

                                    custcommand.Parameters.Clear();
                                    string custinfo = "INSERT INTO kpcustomers.CustomerInfo (CustID, PlaceofBirth, NatureOfWork, " +
                                        "PermanentAddress, Nationality, CompanyOrEmployer, BusinessOrProfession, DTModified, DTModifier) " +
                                        "VALUES (@CustId, @PlaceofBirth, @NatureOfWork, @PermanentAddress, @Nationality , " +
                                        "@CompanyOrEmployer, @BusinessOrProfession, now(),@DTModifier) ON DUPLICATE KEY UPDATE " +
                                        "PlaceofBirth = @PlaceofBirth, NatureOfWork = @NatureOfWork, PermanentAddress = @PermanentAddress, " +
                                        "Nationality = @Nationality, CompanyOrEmployer = @CompanyOrEmployer, " +
                                        "BusinessOrProfession = @BusinessOrProfession, DTModified=now(), DTModifier=@DTModifier;";
                                    custcommand.CommandText = custinfo;
                                    custcommand.Parameters.AddWithValue("CustId", CustID);
                                    custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
                                    custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
                                    custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
                                    custcommand.Parameters.AddWithValue("Nationality", Nationality);
                                    custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
                                    custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
                                    custcommand.Parameters.AddWithValue("DTModifier", ModifiedBy);
                                    Icustomerinfo2 = custcommand.ExecuteNonQuery();

                                    custcommand.Parameters.Clear();
                                    String queryCard = "UPDATE kpcustomers.customercard SET custid=null where custid=@custid";
                                    custcommand.CommandText = queryCard;
                                    custcommand.Parameters.AddWithValue("custid", CustID);
                                    Ucustomercard2 = custcommand.ExecuteNonQuery();
                                }
                                else
                                {
                                    custcommand.Parameters.Clear();
                                    custcommand.CommandText = "Select CardNo,custid from kpcustomers.customercard where CardNO = @cardno";
                                    custcommand.Parameters.AddWithValue("cardno", CardNo);
                                    using (MySqlDataReader cardDataReader = custcommand.ExecuteReader())
                                    {
                                        string custidindb1 = string.Empty;
                                        if (cardDataReader.HasRows)
                                        {
                                            cardDataReader.Read();
                                            custidindb1 = cardDataReader["custid"].ToString();
                                            cardDataReader.Close();
                                            if (custidindb1 != CustID)
                                            {
                                                custconn.Close();
                                                return new CustomerUpdateResponse { respcode = 0, message = "Card No. was already owned by another customer" };
                                            }
                                        }

                                        cardDataReader.Close();
                                        String queryCard = "UPDATE kpcustomers.customercard a SET CardNo = @CardNo where CustID = @CustID;";
                                        custcommand.Parameters.Clear();
                                        custcommand.CommandText = queryCard;
                                        custcommand.Parameters.AddWithValue("CardNo", CardNo);
                                        custcommand.Parameters.AddWithValue("custid", CustID);
                                        Ucustomercard3 = custcommand.ExecuteNonQuery();

                                        ////, a.PlaceofBirth = @PlaceofBirth, a.NatureOfWork = @NatureOfWork, a.PermanentAddress = @PermanentAddress, a.Nationality = @Nationality, a.CompanyOrEmployer = @CompanyOrEmployer, a.BusinessOrProfession = @BusinessOrProfession

                                        custcommand.Parameters.Clear();
                                        String query = "UPDATE kpcustomers.customers a SET a.CardNo = @CardNo,a.FirstName = @FirstName , a.LastName = @LastName , a.MiddleName = @MiddleName , a.Street = @Street , a.ProvinceCity = @ProvinceCity , a.Country = @Country , a.Gender = @Gender , a.Birthdate = @Birthdate, a.IDType = @IDType , a.IDNo = @IDNo , a.ExpiryDate = @ExpiryDate , a.DTModified = @DTModified, a.ModifiedBy = @ModifiedBy, a.PhoneNo = @PhoneNo, a.Mobile = @Mobile, a.Email = @Email WHERE a.CustID = @CustID;";
                                        custcommand.CommandText = query;
                                        custcommand.Parameters.AddWithValue("CardNo", CardNo);
                                        custcommand.Parameters.AddWithValue("FirstName", SenderFName);
                                        custcommand.Parameters.AddWithValue("LastName", SenderLName);
                                        custcommand.Parameters.AddWithValue("MiddleName", SenderMName);
                                        custcommand.Parameters.AddWithValue("Street", SenderStreet);
                                        custcommand.Parameters.AddWithValue("ProvinceCity", SenderProvinceCity);
                                        custcommand.Parameters.AddWithValue("Country", SenderCountry);
                                        custcommand.Parameters.AddWithValue("Gender", SenderGender);
                                        //custcommand.Parameters.AddWithValue("ContactNo", SenderContactNo);
                                        custcommand.Parameters.AddWithValue("Birthdate", SenderBirthdate);
                                        custcommand.Parameters.AddWithValue("BranchID", SenderBranchID);
                                        custcommand.Parameters.AddWithValue("IDType", IDType);
                                        custcommand.Parameters.AddWithValue("IDNo", IDNo);
                                        custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
                                        custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                        custcommand.Parameters.AddWithValue("CustID", CustID);
                                        custcommand.Parameters.AddWithValue("ModifiedBy", ModifiedBy);
                                        custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
                                        custcommand.Parameters.AddWithValue("Mobile", MobileNo);
                                        custcommand.Parameters.AddWithValue("Email", Email);
                                        Ucustomers3 = custcommand.ExecuteNonQuery();

                                        if (hasGovtID)
                                        {
                                            string custGovtID = "update kpcustomers.customerGovtID set GovtIDType=@GovtIDType, GovtIDNo=@GovtIDNo where custid=@custid";
                                            custcommand.CommandText = custGovtID;
                                            custcommand.Parameters.Clear();
                                            custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
                                            custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
                                            custcommand.Parameters.AddWithValue("custid", CustID);
                                            Ucustomersgovt3 = custcommand.ExecuteNonQuery();
                                        }
                                        else
                                        {
                                            string custGovtID = "insert into kpcustomers.customerGovtID (custid,GovtIDType,GovtIDNo) values(@custid,@GovtIDType,@GovtIDNo)";
                                            custcommand.CommandText = custGovtID;
                                            custcommand.Parameters.Clear();
                                            custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
                                            custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
                                            custcommand.Parameters.AddWithValue("custid", CustID);
                                            Ucustomersgovt3 = custcommand.ExecuteNonQuery();
                                        }

                                        custcommand.Parameters.Clear();
                                        string custinfo = "INSERT INTO kpcustomers.CustomerInfo (CustID, PlaceofBirth, NatureOfWork, " +
                                            "PermanentAddress, Nationality, CompanyOrEmployer, BusinessOrProfession, DTModified, DTModifier) " +
                                            "VALUES (@CustId, @PlaceofBirth, @NatureOfWork, @PermanentAddress, @Nationality , " +
                                            "@CompanyOrEmployer, @BusinessOrProfession, now(),@DTModifier) ON DUPLICATE KEY UPDATE " +
                                            "PlaceofBirth = @PlaceofBirth, NatureOfWork = @NatureOfWork, PermanentAddress = @PermanentAddress, " +
                                            "Nationality = @Nationality, CompanyOrEmployer = @CompanyOrEmployer, " +
                                            "BusinessOrProfession = @BusinessOrProfession, DTModified=now(), DTModifier=@DTModifier;";
                                        custcommand.CommandText = custinfo;
                                        custcommand.Parameters.AddWithValue("CustId", CustID);
                                        custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
                                        custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
                                        custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
                                        custcommand.Parameters.AddWithValue("Nationality", Nationality);
                                        custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
                                        custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
                                        custcommand.Parameters.AddWithValue("DTModifier", ModifiedBy);
                                        Icustomerinfo3 = custcommand.ExecuteNonQuery();
                                    }
                                }
                            }
                        }
                        custconn.Close();
                        kplog.Info(CustID + " - Customer Successfully Updated - 1Exec:" + Icustomercard1 + "|" + Ucustomers1 + "|" + Ucustomersgovt1 + "|" + Icustomerinfo1 + " - 2Exec:" + Ucustomers2 + "|" + Ucustomersgovt2 + "|" + Icustomerinfo2 + "|" + Ucustomercard2 + " - 3Exec:" + Ucustomercard3 + "|" + Ucustomers3 + "|" + Ucustomersgovt3 + "|" + Icustomerinfo3);
                    }
                    //return new CustomerUpdateResponse { respcode = 1, message = getRespMessage(1), isupdatesuccess = issuccessinupdatemlcard };
                }
                //}
            }
            catch (Exception ex)
            {
                kplog.Fatal("Duplicate", ex);
                custconn.Close();
                int respcode = 0;
                if (ex.Message.StartsWith("Duplicate"))
                {
                    respcode = 6;
                }
                return new CustomerUpdateResponse { respcode = respcode, message = getRespMessage(respcode), ErrorDetail = ex.ToString(), isupdatesuccess = issuccessinupdatemlcard, mlcardmsgresp = mlcardmsgresp };
            }
        }
        int rspcode = 1;
        if (isCashCard)
        {
            String updatecashcard = update_Cashcard(CustID, SenderFName, SenderMName, SenderLName, SenderBirthdate, SenderGender);
            if (updatecashcard == "Failed")
                rspcode = 18;
        }
        return new CustomerUpdateResponse { respcode = 1, message = getRespMessage(rspcode), isupdatesuccess = issuccessinupdatemlcard, mlcardmsgresp = mlcardmsgresp };
    }

    [WebMethod(BufferResponse = false)]
    public CustomerResultResponse mlcardSearch(String Username, String Password, String mlcard, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new CustomerResultResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new CustomerResultResponse { respcode = 10, message = getRespMessage(10) };
        //}
        try
        {
            using (MySqlConnection custconn = custconDomestic.getConnection())
            {
                try
                {
                    custconn.Open();
                    using (custcommand = custconn.CreateCommand())
                    {
                        //int counter = 0;
                        //String query = "SELECT c.FirstName, c.LastName, c.MiddleName, c.Street, c.ProvinceCity, c.Birthdate, c.Country,c.ExpiryDate, c.Gender,c.IDNo,c.IDType,c.CustID, c.PhoneNo, c.Mobile,c.Email ,cc.CardNo,cc.CardNo FROM kpcustomersglobal.customers c INNER JOIN kpcustomersglobal.customercard cc ON c.CustID = cc.CustID WHERE cc.CardNo = @mlcard LIMIT 1;";
                        String query = "SELECT c.FirstName, c.LastName, c.MiddleName, c.Street, c.ProvinceCity, c.Birthdate, c.Country,c.ExpiryDate, c.Gender,c.IDNo,c.IDType,c.CustID, c.PhoneNo, c.Mobile,c.Email ,c.CardNo,d.placeofbirth,d.natureofwork,d.permanentaddress,d.nationality,d.companyoremployer,d.businessorprofession, e.GovtIDType, e.GovtIDNo FROM kpcustomers.customers c left join kpcustomers.CustomerInfo d on c.custid=d.custid left join kpcustomers.customerGovtID e on d.custid=e.custid WHERE SUBSTRING(REVERSE(c.custid),1,1) !='D' and c.CardNo  = @mlcard LIMIT 1;";
                        custcommand.CommandText = query;
                        custcommand.Parameters.AddWithValue("mlcard", mlcard);

                        //CustArrayResponse b = new CustArrayResponse();
                        using (MySqlDataReader ReaderCount = custcommand.ExecuteReader())
                        {
                            if (ReaderCount.Read())
                            {
                                CustomerSearchResponse csr = new CustomerSearchResponse { FirstName = ReaderCount["FirstName"].ToString(), LastName = ReaderCount["LastName"].ToString(), MiddleName = ReaderCount["MiddleName"].ToString(), Street = ReaderCount["Street"].ToString(), ProvinceCity = ReaderCount["ProvinceCity"].ToString(), MLCardNo = ReaderCount["CardNo"].ToString(), BirthDate = Convert.ToDateTime(ReaderCount["Birthdate"].ToString()).ToString("yyyy-MM-dd"), ContactNo = ReaderCount["Mobile"].ToString(), Country = ReaderCount["Country"].ToString(), ExpiryDate = (ReaderCount["ExpiryDate"].Equals(DBNull.Value)) ? ReaderCount["ExpiryDate"].ToString() : Convert.ToDateTime(ReaderCount["ExpiryDate"]).ToString("yyyy-MM-dd"), Gender = ReaderCount["Gender"].ToString(), IDNo = ReaderCount["IDNo"].ToString(), IDType = ReaderCount["IDType"].ToString(), CustID = ReaderCount["CustID"].ToString(), PlaceofBirth = ReaderCount["placeofbirth"].ToString(), NatureOfWork = ReaderCount["natureofwork"].ToString(), PermanentAddress = ReaderCount["permanentaddress"].ToString(), Nationality = ReaderCount["nationality"].ToString(), CompanyOrEmployer = ReaderCount["companyoremployer"].ToString(), BusinessOrProfession = ReaderCount["businessorprofession"].ToString(), GovtIDType = ReaderCount["GovtIDType"].ToString(), GovtIDNo = ReaderCount["GovtIDNo"].ToString() };
                                ReaderCount.Close();
                                custconn.Close();
                                kplog.Info(mlcard + " - Search Success");
                                return new CustomerResultResponse { respcode = 1, message = getRespMessage(1), CustomerData = csr };
                            }
                            else
                            {
                                kplog.Error(mlcard + " - " + getRespMessage(5));
                                ReaderCount.Close();
                                custconn.Close();
                                return new CustomerResultResponse { respcode = 5, message = getRespMessage(5) };
                            }
                        }
                    }

                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(mlcard + " - " + ex.ToString());
                    custconn.Close();
                    return new CustomerResultResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), Data = null };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(mlcard + " - " + ex.ToString());
            custconGlobal.CloseConnection();
            return new CustomerResultResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), Data = null };
        }

    }

    //[WebMethod]
    //public ImageResponse getCustomerImage(String username, String password, String firstname, String lastname)
    //{
    //    if (!authenticate(username, password))
    //    {
    //        return new ImageResponse { respcode = 7, respmsg = getRespMessage(7) };
    //    }

    //    using (MySqlConnection conn = custconDomestic.getConnection())
    //    {
    //        try
    //        {
    //            using (MySqlConnection connImg = custconDomestic.getConnection())
    //            {
    //                connImg.Open();
    //                using (MySqlCommand imgcommand = connImg.CreateCommand())
    //                {
    //                    string getimage = "SELECT i.kycfront,i.kycback,i.id1,i.id2,i.id3 FROM kpcustomers.customerimages i INNER JOIN kpcustomers.customers c ON i.custid=c.custid WHERE c.FirstName=@fname AND c.LastName=@lname";
    //                    imgcommand.CommandText = getimage;
    //                    imgcommand.Parameters.AddWithValue("fname", firstname);
    //                    imgcommand.Parameters.AddWithValue("lname", lastname);
    //                    MySqlDataReader reader1 = imgcommand.ExecuteReader();
    //                    if (!reader1.HasRows)
    //                    {
    //                        reader1.Close();
    //                        conn.Close();
    //                        custconDomestic.CloseConnection();
    //                        return new ImageResponse { respcode = 0, respmsg = "No image." };
    //                    }
    //                    reader1.Read();
    //                    List<byte[]> variable = new List<byte[]>();
    //                    variable.Add(reader1["kycfront"] as byte[]);
    //                    variable.Add(reader1["kycback"] as byte[]);
    //                    variable.Add(reader1["id1"] as byte[]);
    //                    variable.Add(reader1["id2"] as byte[]);
    //                    variable.Add(reader1["id3"] as byte[]);

    //                    reader1.Close();
    //                    connImg.Close();
    //                    custconDomestic.CloseConnection();
    //                    return new ImageResponse { respcode = 1, respmsg = "Success", lst = variable };
    //                }
    //            }
    //        }
    //        catch (Exception ex)
    //        {
    //            conn.Close();
    //            custconDomestic.CloseConnection();
    //            return new ImageResponse { respcode = 0, respmsg = ex.ToString() };
    //        }
    //    }
    //}



    //[WebMethod(BufferResponse = false)]
    //public String getpurposeoftxn(String Username, String Password, String Firstname, String LastName, String MiddleName)
    //{
    //    String purpose = "";
    //    String message = "";
    //    if (!authenticate(Username, Password))
    //    {
    //        return message = getRespMessage(7);
    //    }

    //    using (MySqlConnection conn = dbconDomestic.getConnection())
    //    {
    //        try
    //        {
    //            conn.Open();
    //            using (command = conn.CreateCommand())
    //            {
    //                String gettransdate = "select transdate as transdate from kptransactions.sendout a where a.SenderFName = @Firstname and  a.senderlname = @LastName and a.SenderMName=@MiddleName order by a.TransDate desc limit 1;";
    //                command.CommandText = gettransdate;
    //                command.Parameters.Clear();
    //                command.Parameters.AddWithValue("Firstname", Firstname);
    //                command.Parameters.AddWithValue("LastName", LastName);
    //                command.Parameters.AddWithValue("MiddleName", MiddleName);
    //                using (MySqlDataReader readertrans = command.ExecuteReader())
    //                {
    //                    readertrans.Read();
    //                    DateTime txndate = Convert.ToDateTime(readertrans["transdate"]);
    //                    string transdate = txndate.ToString("MM") + txndate.ToString("dd");
    //                    if (readertrans.HasRows)
    //                    {
    //                        readertrans.Close();
    //                        String getpurpose = "select distinct b.purpose as purpose From kptransactions.sendout a inner join kpdomestic.sendout" + transdate + " b on a.KPTNNo = b.KPTNNo and a.TransDate=b.TransDate inner join kpcustomers.customers c on c.FirstName=a.SenderFName and c.LastName=a.SenderLName and c.MiddleName=a.Sendermname where a.SenderFName = @Firstname and  a.senderlname = @LastName and a.SenderMName=@MiddleName order by a.TransDate desc limit 1;";
    //                        command.CommandText = getpurpose;
    //                        command.Parameters.Clear();
    //                        command.Parameters.AddWithValue("Firstname", Firstname);
    //                        command.Parameters.AddWithValue("LastName", LastName);
    //                        command.Parameters.AddWithValue("MiddleName", MiddleName);
    //                        MySqlDataReader readerpurpose = command.ExecuteReader();

    //                        while (readerpurpose.Read())
    //                        {
    //                            purpose = readerpurpose["purpose"].ToString();
    //                        }

    //                        readerpurpose.Close();

    //                    }
    //                    readertrans.Close();

    //                }
    //            }
    //            return purpose;
    //            dbconDomestic.CloseConnection();

    //        }
    //        catch (Exception ex)
    //        {
    //            kplog.Fatal(ex.ToString());
    //            dbconDomestic.CloseConnection();

    //        }
    //    }

    //    return purpose;
    //}

    private Boolean verifyname(String fname, String mname, String lname)
    {
        try
        {
            using (MySqlConnection conn = custconDomestic.getConnection())
            {
                conn.Open();
                command = conn.CreateCommand();
                String query = "select custid from kpcustomer.customers where FirstName=@fname and MiddleName=@mname and LastName=@lname";
                command.CommandText = query;
                command.Parameters.AddWithValue("fname", fname);
                command.Parameters.AddWithValue("mname", mname);
                command.Parameters.AddWithValue("lname", lname);
                MySqlDataReader dr = command.ExecuteReader();
                if (dr.Read())
                {
                    dr.Close();
                    conn.Close();
                    custconDomestic.CloseConnection();
                    return true;
                }
                dr.Close();
                conn.Close();
                custconDomestic.CloseConnection();
                return false;
            }
        }
        catch (Exception ex)
        {
            custconDomestic.CloseConnection();
            return false;
        }
    }

    [WebMethod(BufferResponse = false)]
    public String getpurposeoftxn(String Username, String Password, String Firstname, String LastName, String MiddleName)
    {
        String purpose = "";
        String message = "";
        if (!authenticate(Username, Password))
        {
            return message = getRespMessage(7);
        }
        Boolean incustomer = verifyname(Firstname, MiddleName, LastName);
        using (MySqlConnection conn = dbconDomestic.getConnection())
        {
            try
            {
                conn.Open();
                using (command = conn.CreateCommand())
                {
                    String gettransdate = "select transdate as transdate from kptransactions.sendout a where a.SenderFName = @Firstname and  a.senderlname = @LastName and a.SenderMName=@MiddleName order by a.TransDate desc limit 1;";
                    command.CommandText = gettransdate;
                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("Firstname", Firstname);
                    command.Parameters.AddWithValue("LastName", LastName);
                    command.Parameters.AddWithValue("MiddleName", MiddleName);
                    using (MySqlDataReader readertrans = command.ExecuteReader())
                    {
                        if (readertrans.HasRows)
                        {
                            readertrans.Read();
                            DateTime txndate = Convert.ToDateTime(readertrans["transdate"]);
                            string transdate = txndate.ToString("MM") + txndate.ToString("dd");
                            readertrans.Close();
                            //String getpurpose = "select distinct b.purpose as purpose From kptransactions.sendout a inner join kpdomestic.sendout" + transdate + " b on a.KPTNNo = b.KPTNNo and a.TransDate=b.TransDate inner join kpcustomers.customers c on c.FirstName=a.SenderFName and c.LastName=a.SenderLName and c.MiddleName=a.Sendermname where a.SenderFName = @Firstname and  a.senderlname = @LastName and a.SenderMName=@MiddleName order by a.TransDate desc limit 1;";
                            //String getpurpose = "select distinct b.purpose as purpose From kptransactions.sendout a inner join kpdomestic.sendout" + transdate + " b on a.KPTNNo = b.KPTNNo and a.TransDate=b.TransDate inner join kpcustomers.customers c on c.FirstName=a.SenderFName and c.LastName=a.SenderLName and c.MiddleName=a.Sendermname where a.SenderFName = @Firstname and  a.senderlname = @LastName and a.SenderMName=@MiddleName order by a.TransDate;";
                            if (incustomer)
                            {
                                String getpurpose = "select distinct b.purpose as purpose From kptransactions.sendout a inner join kpdomestic.sendout" + transdate + " b on a.KPTNNo = b.KPTNNo and a.TransDate=b.TransDate where a.SenderFName = @Firstname and  a.senderlname = @LastName and a.SenderMName=@MiddleName order by a.TransDate;";
                                command.CommandText = getpurpose;
                                command.Parameters.Clear();
                                command.Parameters.AddWithValue("Firstname", Firstname);
                                command.Parameters.AddWithValue("LastName", LastName);
                                command.Parameters.AddWithValue("MiddleName", MiddleName);
                                MySqlDataReader readerpurpose = command.ExecuteReader();

                                List<String> purposes = new List<String>();
                                if (readerpurpose.HasRows)
                                {
                                    while (readerpurpose.Read())
                                    {
                                        purposes.Add(readerpurpose["purpose"].ToString());
                                    }

                                    for (int x = 0; x < purposes.Count; x++)
                                    {
                                        String purposeoftransaction = purposes.ElementAt(x);
                                        if (purposeoftransaction.Contains("OTHERS") ||
                                            purposeoftransaction.Contains("ALLOWANCE OF LIVING ALLOWANCE") ||
                                            purposeoftransaction.Contains("BUSINESS FUNDING") ||
                                            purposeoftransaction.Contains("GIFT") ||
                                            purposeoftransaction.Contains("HOSPITAL BILLS") ||
                                            purposeoftransaction.Contains("INSURANCE PREMIUM") ||
                                            purposeoftransaction.Contains("LOAN PROCEEDS") ||
                                            purposeoftransaction.Contains("MEDICINE") ||
                                            purposeoftransaction.Contains("PAYROLL OR SALARIES OF WORKERS") ||
                                            purposeoftransaction.Contains("PURCHASE OF") ||
                                            purposeoftransaction.Contains("RENTALS") ||
                                            purposeoftransaction.Contains("TAX PAYMENTS") ||
                                            purposeoftransaction.Contains("TUITION FEE") ||
                                            purposeoftransaction.Contains("UTILITY BILLS"))
                                        {
                                            purpose = purposeoftransaction;
                                            readerpurpose.Close();
                                            return purpose;
                                        }
                                    }
                                    readerpurpose.Close();
                                }
                                readerpurpose.Close();
                            }
                        }
                        readertrans.Close();
                    }
                }
                dbconDomestic.CloseConnection();
                return purpose;
            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                dbconDomestic.CloseConnection();
            }
        }
        return purpose;
    }


    //[WebMethod(BufferResponse = false)]
    //public CustomerResultResponse customerSearch(String Username, String Password, String Firstname, String LastName, int page, int perPage, Double version, String stationcode)
    //{
    //    if (!authenticate(Username, Password))
    //    {
    //        return new CustomerResultResponse { respcode = 7, message = getRespMessage(7) };
    //    }
    //    //if (!compareVersions(getVersion(stationcode), version))
    //    //{
    //    //    return new CustomerResultResponse { respcode = 10, message = getRespMessage(10) };
    //    //}
    //    using (MySqlConnection custconn = custconDomestic.getConnection())
    //    {
    //        try
    //        {
    //            custconn.Open();
    //            using (custcommand = custconn.CreateCommand())
    //            {
    //                int counter = 0;
    //                int start;
    //                if (page == 1)
    //                {
    //                    start = 0;
    //                }
    //                else
    //                {
    //                    start = (page - 1) * perPage;
    //                }
    //                Double totalcount;
    //                String finalCount;
    //                // String countTotPages = "select COUNT(custid) as total from kpcustomers.customers c where FirstName LIKE CONCAT(@FirstNamex,'%') AND LastName LIKE CONCAT(@LastNamex,'%')";
    //                String countTotPages = "select COUNT(custid) as total from kpcustomers.customers c where FirstName=@FirstNamex AND LastName=@LastNamex";
    //                custcommand.CommandText = countTotPages;

    //                custcommand.Parameters.AddWithValue("FirstNamex", Firstname);
    //                custcommand.Parameters.AddWithValue("LastNamex", LastName);
    //                using (MySqlDataReader ReaderCountTOT = custcommand.ExecuteReader())
    //                {
    //                    ReaderCountTOT.Read();
    //                    var result = Convert.ToDouble(ReaderCountTOT["total"]) % perPage;
    //                    if (result == 0)
    //                    {
    //                        totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage;
    //                    }
    //                    else
    //                    {
    //                        totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage + 1;
    //                    }
    //                    //totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage;
    //                    ReaderCountTOT.Close();
    //                }
    //                finalCount = Math.Truncate(totalcount).ToString();
    //                custcommand.Parameters.Clear();
    //                //String query = "select FirstName,LastName,MiddleName,Street,ProvinceCity,BirthDate,Country,ExpiryDate,Gender,IDNo,IDType,CustID,PhoneNo,Mobile,Email, cardno  from kpcustomers.customers c where FirstName LIKE CONCAT(@FirstNamex,'%') AND LastName LIKE CONCAT(@LastNamex,'%') ORDER BY LastName LIMIT @start,@end";
    //                String query = "select c.FirstName,c.LastName,c.MiddleName,c.Street,c.ProvinceCity,c.BirthDate,c.Country,c.ExpiryDate,c.Gender,c.IDNo,c.IDType,c.CustID,c.PhoneNo,c.Mobile,c.Email, c.cardno, d.PlaceofBirth, d.NatureOfWork, d.PermanentAddress, d.Nationality, d.CompanyOrEmployer, d.BusinessOrProfession, c.GovtIDType, c.GovtIDNo from kpcustomers.customers c left join kpcustomers.CustomerInfo d on c.custid=d.custid where c.FirstName=@FirstNamex AND c.LastName=@LastNamex ORDER BY c.LastName LIMIT @start,@end";
    //                //String query = "SELECT c.FirstName,c.LastName,c.MiddleName,c.Street,c.ProvinceCity,c.BirthDate,c.Country,c.ExpiryDate,c.Gender,c.IDNo,c.IDType,c.CustID,c.PhoneNo,c.Mobile,c.Email, c.cardno,i.kycfront,i.kycback,i.id1,i.id2,i.id3 FROM kpcustomers.customers c LEFT JOIN kpcustomers.customerimages i ON i.custid=c.custid WHERE c.FirstName=@FirstNamex AND c.LastName=@LastNamex ORDER BY LastName LIMIT @start,@end";
    //                custcommand.CommandText = query;
    //                //throw new Exception((start).ToString() + " " + perPage.ToString());
    //                custcommand.Parameters.AddWithValue("FirstNamex", Firstname);
    //                custcommand.Parameters.AddWithValue("LastNamex", LastName);
    //                custcommand.Parameters.AddWithValue("start", start);
    //                custcommand.Parameters.AddWithValue("end", perPage);
    //                //CustArrayResponse b = new CustArrayResponse();

    //                using (MySqlDataReader ReaderCount = custcommand.ExecuteReader())
    //                {
    //                    while (ReaderCount.Read())
    //                    {
    //                        counter++;
    //                    }
    //                    ReaderCount.Close();
    //                }
    //                if (counter == 0)
    //                {
    //                    kplog.Error(getRespMessage(5));
    //                    custconn.Close();
    //                    return new CustomerResultResponse { respcode = 5, message = getRespMessage(5) };
    //                }

    //                using (MySqlDataReader Reader = custcommand.ExecuteReader())
    //                {

    //                    CustArrayResponse[] bb = new CustArrayResponse[counter];
    //                    int x = 0;
    //                    while (Reader.Read())
    //                    {
    //                        //Byte[] back = null;
    //                        //Byte[] front = null;
    //                        //Byte[] id1 = null;
    //                        //Byte[] id2 = null;
    //                        //Byte[] id3 = null;
    //                        //if (Reader["kycback"].GetType().ToString() != "System.DBNull")
    //                        //{
    //                        //    back = (Byte[])(Reader["kycback"]);
    //                        //}
    //                        //if (Reader["kycfront"].GetType().ToString() != "System.DBNull")
    //                        //{
    //                        //    front = (Byte[])(Reader["kycfront"]);
    //                        //}
    //                        //if (Reader["id1"].GetType().ToString() != "System.DBNull")
    //                        //{
    //                        //    id1 = (Byte[])(Reader["id1"]);
    //                        //}
    //                        //if (Reader["id2"].GetType().ToString() != "System.DBNull")
    //                        //{
    //                        //    id2 = (Byte[])(Reader["id2"]);
    //                        //}
    //                        //if (Reader["id3"].GetType().ToString() != "System.DBNull")
    //                        //{
    //                        //    id3 = (Byte[])(Reader["id3"]);
    //                        //}

    //                        //bb[x] = new CustArrayResponse { SearchItem = new CustomerSearchResponse { FirstName = Reader["FirstName"].ToString(), LastName = Reader["LastName"].ToString(), MiddleName = Reader["MiddleName"].ToString(), Street = Reader["Street"].ToString(), ProvinceCity = Reader["ProvinceCity"].ToString(), MLCardNo = Reader["CardNo"].ToString(), BirthDate = (Reader["Birthdate"].Equals(DBNull.Value) || Reader["Birthdate"].Equals("") || Reader["Birthdate"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["Birthdate"]).ToString("yyyy-MM-dd"), Country = Reader["Country"].ToString(), ExpiryDate = (Reader["ExpiryDate"].Equals(DBNull.Value) || Reader["ExpiryDate"].Equals("") || Reader["ExpiryDate"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["ExpiryDate"]).ToString("yyyy-MM-dd"), Gender = Reader["Gender"].ToString(), IDNo = Reader["IDNo"].ToString(), IDType = Reader["IDType"].ToString(), CustID = Reader["CustID"].ToString(), PhoneNo = Reader["PhoneNo"].ToString(), Mobile = Reader["Mobile"].ToString(), Email = Reader["Email"].ToString(), kycfront = front, kycback = back, id1 = id1, id2 = id2, id3 = id3 } };
    //                        bb[x] = new CustArrayResponse { SearchItem = new CustomerSearchResponse { FirstName = Reader["FirstName"].ToString(), LastName = Reader["LastName"].ToString(), MiddleName = Reader["MiddleName"].ToString(), Street = Reader["Street"].ToString(), ProvinceCity = Reader["ProvinceCity"].ToString(), MLCardNo = Reader["CardNo"].ToString(), BirthDate = (Reader["Birthdate"].Equals(DBNull.Value) || Reader["Birthdate"].Equals("") || Reader["Birthdate"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["Birthdate"]).ToString("yyyy-MM-dd"), Country = Reader["Country"].ToString(), ExpiryDate = (Reader["ExpiryDate"].Equals(DBNull.Value) || Reader["ExpiryDate"].Equals("") || Reader["ExpiryDate"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["ExpiryDate"]).ToString("yyyy-MM-dd"), Gender = Reader["Gender"].ToString(), IDNo = Reader["IDNo"].ToString(), IDType = Reader["IDType"].ToString(), CustID = Reader["CustID"].ToString(), PhoneNo = Reader["PhoneNo"].ToString(), Mobile = Reader["Mobile"].ToString(), Email = Reader["Email"].ToString(), PlaceofBirth = Reader["PlaceofBirth"].ToString(), NatureOfWork = Reader["NatureOfWork"].ToString(), PermanentAddress = Reader["PermanentAddress"].ToString(), Nationality = Reader["Nationality"].ToString(), CompanyOrEmployer = Reader["CompanyOrEmployer"].ToString(), BusinessOrProfession = Reader["BusinessOrProfession"].ToString(), GovtIDNo = Reader["GovtIDNo"].ToString(), GovtIDType = Reader["GovtIDType"].ToString() } };
    //                        x = x + 1;
    //                    }
    //                    //throw new Exception(x.ToString());
    //                    Reader.Close();

    //                    custconn.Close();

    //                    return new CustomerResultResponse { respcode = 1, message = getRespMessage(1), Data = bb, nextPage = page + 1, prevPage = page - 1, totalPages = finalCount };
    //                }


    //            }
    //        }
    //        catch (Exception ex)
    //        {
    //            kplog.Fatal(ex.ToString());
    //            custconn.Close();
    //            return new CustomerResultResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), Data = null };
    //        }
    //    }
    //}

    [WebMethod(BufferResponse = false)]
    public CustomerResultResponse customerSearch(String Username, String Password, String Firstname, String LastName, int page, int perPage, Double version, String stationcode, String MiddleName, String branchcode, Int32 zonecode)
    {
        if (!authenticate(Username, Password))
        {
            return new CustomerResultResponse { respcode = 7, message = getRespMessage(7) };
        }

        using (MySqlConnection custconn = custconDomestic.getConnection())
        {
            try
            {
                custconn.Open();
                using (custcommand = custconn.CreateCommand())
                {
                    int counter = 0;
                    int start;
                    if (page == 1)
                    {
                        start = 0;
                    }
                    else
                    {
                        start = (page - 1) * perPage;
                    }
                    Double totalcount;
                    String finalCount;
                    String createdby = "";
                    String modifiedby = "";
                    String countTotPages = "";
                    // String countTotPages = "select COUNT(custid) as total from kpcustomers.customers c where FirstName LIKE CONCAT(@FirstNamex,'%') AND LastName LIKE CONCAT(@LastNamex,'%')";
                    if (MiddleName == string.Empty)
                    {
                        countTotPages = "select COUNT(custid) as total,createdby,modifiedby from kpcustomers.customers c where FirstName=@FirstNamex AND LastName=@LastNamex";
                    }
                    else
                    {
                        countTotPages = "select COUNT(custid) as total,createdby,modifiedby from kpcustomers.customers c where FirstName=@FirstNamex AND LastName=@LastNamex AND MiddleName=@MiddleNamex";
                    }
                    custcommand.CommandText = countTotPages;
                    custcommand.Parameters.AddWithValue("FirstNamex", Firstname);
                    custcommand.Parameters.AddWithValue("LastNamex", LastName);
                    custcommand.Parameters.AddWithValue("MiddleNamex", MiddleName);
                    using (MySqlDataReader ReaderCountTOT = custcommand.ExecuteReader())
                    {
                        ReaderCountTOT.Read();
                        var result = Convert.ToDouble(ReaderCountTOT["total"]) % perPage;
                        if (result == 0)
                        {
                            totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage;
                        }
                        else
                        {
                            totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage + 1;
                        }
                        ////createdby = ReaderCountTOT["createdby"].ToString();
                        ////modifiedby = ReaderCountTOT["modifiedby"].ToString();
                        //totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage;
                        ReaderCountTOT.Close();
                    }
                    finalCount = Math.Truncate(totalcount).ToString();
                    custcommand.Parameters.Clear();

                    String query = "";
                    if (MiddleName == string.Empty)
                    {
                        //String query = "select FirstName,LastName,MiddleName,Street,ProvinceCity,BirthDate,Country,ExpiryDate,Gender,IDNo,IDType,CustID,PhoneNo,Mobile,Email, cardno  from kpcustomers.customers c where FirstName LIKE CONCAT(@FirstNamex,'%') AND LastName LIKE CONCAT(@LastNamex,'%') ORDER BY LastName LIMIT @start,@end";
                        query = "select c.FirstName,c.LastName,c.MiddleName,c.Street,c.ProvinceCity,c.BirthDate,c.Country,c.ExpiryDate,c.Gender,c.IDNo,c.IDType,c.CustID,c.PhoneNo,c.Mobile,c.Email, c.cardno,c.createdby,c.dtcreated,c.modifiedby,c.dtmodified, d.PlaceofBirth, d.NatureOfWork, d.PermanentAddress, d.Nationality, d.CompanyOrEmployer, d.BusinessOrProfession, e.GovtIDType, e.GovtIDNo from kpcustomers.customers c left join kpcustomers.CustomerInfo d on c.custid=d.custid left join kpcustomers.customerGovtID e on d.custid=e.custid where SUBSTRING(REVERSE(c.custid),1,1) !='D' and c.FirstName=@FirstNamex AND c.LastName=@LastNamex ORDER BY c.LastName LIMIT @start,@end";
                        //String query = "SELECT c.FirstName,c.LastName,c.MiddleName,c.Street,c.ProvinceCity,c.BirthDate,c.Country,c.ExpiryDate,c.Gender,c.IDNo,c.IDType,c.CustID,c.PhoneNo,c.Mobile,c.Email, c.cardno,i.kycfront,i.kycback,i.id1,i.id2,i.id3 FROM kpcustomers.customers c LEFT JOIN kpcustomers.customerimages i ON i.custid=c.custid WHERE c.FirstName=@FirstNamex AND c.LastName=@LastNamex ORDER BY LastName LIMIT @start,@end";
                    }
                    else
                    {
                        query = "select c.FirstName,c.LastName,c.MiddleName,c.Street,c.ProvinceCity,c.BirthDate,c.Country,c.ExpiryDate,c.Gender,c.IDNo,c.IDType,c.CustID,c.PhoneNo,c.Mobile,c.Email, c.cardno,c.createdby,c.dtcreated,c.modifiedby,c.dtmodified, d.PlaceofBirth, d.NatureOfWork, d.PermanentAddress, d.Nationality, d.CompanyOrEmployer, d.BusinessOrProfession, e.GovtIDType, e.GovtIDNo from kpcustomers.customers c left join kpcustomers.CustomerInfo d on c.custid=d.custid left join kpcustomers.customerGovtID e on d.custid=e.custid where SUBSTRING(REVERSE(c.custid),1,1) !='D' and c.FirstName=@FirstNamex AND c.LastName=@LastNamex AND c.MiddleName=@MiddleNamex ORDER BY c.LastName LIMIT @start,@end";
                    }
                    custcommand.CommandText = query;
                    custcommand.Parameters.AddWithValue("FirstNamex", Firstname);
                    custcommand.Parameters.AddWithValue("LastNamex", LastName);
                    custcommand.Parameters.AddWithValue("MiddleNamex", MiddleName);
                    custcommand.Parameters.AddWithValue("start", start);
                    custcommand.Parameters.AddWithValue("end", perPage);

                    using (MySqlDataReader ReaderCount = custcommand.ExecuteReader())
                    {
                        while (ReaderCount.Read())
                        {
                            counter++;
                        }
                        ReaderCount.Close();
                    }
                    if (counter == 0)
                    {
                        kplog.Error(getRespMessage(5));
                        custconn.Close();
                        return new CustomerResultResponse { respcode = 5, message = getRespMessage(5) };
                    }

                    using (MySqlDataReader Reader = custcommand.ExecuteReader())
                    {
                        CustArrayResponse[] bb = new CustArrayResponse[counter];
                        int x = 0;
                        while (Reader.Read())
                        {

                            bb[x] = new CustArrayResponse
                            {
                                SearchItem = new CustomerSearchResponse
                                {
                                    FirstName = Reader["FirstName"].ToString(),
                                    LastName = Reader["LastName"].ToString(),
                                    MiddleName = Reader["MiddleName"].ToString(),
                                    Street = Reader["Street"].ToString(),
                                    ProvinceCity = Reader["ProvinceCity"].ToString(),
                                    MLCardNo = Reader["CardNo"].ToString(),
                                    BirthDate = (Reader["Birthdate"].Equals(DBNull.Value) || Reader["Birthdate"].Equals("") || Reader["Birthdate"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["Birthdate"]).ToString("yyyy-MM-dd"),
                                    Country = Reader["Country"].ToString(),
                                    ExpiryDate = (Reader["ExpiryDate"].Equals(DBNull.Value) || Reader["ExpiryDate"].Equals("") || Reader["ExpiryDate"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["ExpiryDate"]).ToString("yyyy-MM-dd"),
                                    Gender = Reader["Gender"].ToString(),
                                    IDNo = Reader["IDNo"].ToString(),
                                    IDType = Reader["IDType"].ToString(),
                                    CustID = Reader["CustID"].ToString(),
                                    PhoneNo = Reader["PhoneNo"].ToString(),
                                    Mobile = Reader["Mobile"].ToString(),
                                    Email = Reader["Email"].ToString(),
                                    PlaceofBirth = Reader["PlaceofBirth"].ToString(),
                                    NatureOfWork = Reader["NatureOfWork"].ToString(),
                                    PermanentAddress = Reader["PermanentAddress"].ToString(),
                                    Nationality = Reader["Nationality"].ToString(),
                                    CompanyOrEmployer = Reader["CompanyOrEmployer"].ToString(),
                                    BusinessOrProfession = Reader["BusinessOrProfession"].ToString(),
                                    GovtIDNo = Reader["GovtIDNo"].ToString(),
                                    GovtIDType = Reader["GovtIDType"].ToString(),
                                    createdby = getFullNameDom(Username, Password, Reader["createdby"].ToString()),

                                    datecreated = (Reader["dtcreated"].Equals(DBNull.Value) || Reader["dtcreated"].Equals("") || Reader["dtcreated"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["dtcreated"]).ToString("yyyy-MM-dd HH:mm:ss"),
                                    modifiedby = getFullNameDom(Username, Password, Reader["modifiedby"].ToString()),

                                    datemodified = (Reader["dtmodified"].Equals(DBNull.Value) || Reader["dtmodified"].Equals("") || Reader["dtmodified"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["dtmodified"]).ToString("yyyy-MM-dd HH:mm:ss")
                                }
                            };
                            x = x + 1;
                        }
                        Reader.Close();
                        custconn.Close();
                        return new CustomerResultResponse { respcode = 1, message = getRespMessage(1), Data = bb, nextPage = page + 1, prevPage = page - 1, totalPages = finalCount };
                    }
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                custconn.Close();
                return new CustomerResultResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), Data = null };
            }
        }
    }


    [WebMethod(BufferResponse = false)]
    public CustomerResultResponse customerSearchPayout(String Username, String Password, String Firstname, String LastName, String mname, int page, int perPage, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new CustomerResultResponse { respcode = 7, message = getRespMessage(7) };
        }

        using (MySqlConnection custconn = custconDomestic.getConnection())
        {
            try
            {
                custconn.Open();
                using (custcommand = custconn.CreateCommand())
                {
                    int counter = 0;
                    int start;
                    if (page == 1)
                    {
                        start = 0;
                    }
                    else
                    {
                        start = (page - 1) * perPage;
                    }
                    Double totalcount;
                    String finalCount;
                    // String countTotPages = "select COUNT(custid) as total from kpcustomers.customers c where FirstName LIKE CONCAT(@FirstNamex,'%') AND LastName LIKE CONCAT(@LastNamex,'%')";
                    //String countTotPages = "select COUNT(custid) as total from kpcustomers.customers c where FirstName=@FirstNamex AND LastName=@LastNamex and MiddleName=@Mname;";
                    String countTotPages = "select COUNT(custid) as total from kpcustomers.customers c where FirstName=@FirstNamex AND LastName=@LastNamex;";
                    custcommand.CommandText = countTotPages;

                    custcommand.Parameters.AddWithValue("FirstNamex", Firstname);
                    custcommand.Parameters.AddWithValue("LastNamex", LastName);
                    custcommand.Parameters.AddWithValue("Mname", mname);
                    using (MySqlDataReader ReaderCountTOT = custcommand.ExecuteReader())
                    {
                        ReaderCountTOT.Read();
                        var result = Convert.ToDouble(ReaderCountTOT["total"]) % perPage;
                        if (result == 0)
                        {
                            totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage;
                        }
                        else
                        {
                            totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage + 1;
                        }
                        //totalcount = Convert.ToDouble(ReaderCountTOT["total"]) / perPage;
                        ReaderCountTOT.Close();
                    }
                    finalCount = Math.Truncate(totalcount).ToString();
                    custcommand.Parameters.Clear();

                    String query = "select c.FirstName,c.LastName,c.MiddleName,c.Street,c.ProvinceCity,c.BirthDate,c.Country,c.ExpiryDate,c.Gender,c.IDNo,c.IDType,c.CustID,c.PhoneNo,c.Mobile,c.Email, c.cardno, d.PlaceofBirth, d.NatureOfWork, d.PermanentAddress, d.Nationality, d.CompanyOrEmployer, d.BusinessOrProfession, e.GovtIDType, e.GovtIDNo from kpcustomers.customers c left join kpcustomers.CustomerInfo d on c.custid=d.custid left join kpcustomers.customerGovtID e on d.custid=e.custid where c.FirstName=@FirstNamex AND c.LastName=@LastNamex ORDER BY c.LastName LIMIT @start,@end";

                    custcommand.CommandText = query;

                    custcommand.Parameters.AddWithValue("FirstNamex", Firstname);
                    custcommand.Parameters.AddWithValue("LastNamex", LastName);
                    custcommand.Parameters.AddWithValue("MName", mname);
                    custcommand.Parameters.AddWithValue("start", start);
                    custcommand.Parameters.AddWithValue("end", perPage);


                    using (MySqlDataReader ReaderCount = custcommand.ExecuteReader())
                    {
                        while (ReaderCount.Read())
                        {
                            counter++;
                        }
                        ReaderCount.Close();
                    }
                    if (counter == 0)
                    {
                        kplog.Error(getRespMessage(5));
                        custconn.Close();
                        return new CustomerResultResponse { respcode = 5, message = getRespMessage(5) };
                    }

                    using (MySqlDataReader Reader = custcommand.ExecuteReader())
                    {

                        CustArrayResponse[] bb = new CustArrayResponse[counter];
                        int x = 0;
                        while (Reader.Read())
                        {

                            bb[x] = new CustArrayResponse { SearchItem = new CustomerSearchResponse { FirstName = Reader["FirstName"].ToString(), LastName = Reader["LastName"].ToString(), MiddleName = Reader["MiddleName"].ToString(), Street = Reader["Street"].ToString(), ProvinceCity = Reader["ProvinceCity"].ToString(), MLCardNo = Reader["CardNo"].ToString(), BirthDate = (Reader["Birthdate"].Equals(DBNull.Value) || Reader["Birthdate"].Equals("") || Reader["Birthdate"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["Birthdate"]).ToString("yyyy-MM-dd"), Country = Reader["Country"].ToString(), ExpiryDate = (Reader["ExpiryDate"].Equals(DBNull.Value) || Reader["ExpiryDate"].Equals("") || Reader["ExpiryDate"].ToString().StartsWith("0/")) ? String.Empty : Convert.ToDateTime(Reader["ExpiryDate"]).ToString("yyyy-MM-dd"), Gender = Reader["Gender"].ToString(), IDNo = Reader["IDNo"].ToString(), IDType = Reader["IDType"].ToString(), CustID = Reader["CustID"].ToString(), PhoneNo = Reader["PhoneNo"].ToString(), Mobile = Reader["Mobile"].ToString(), Email = Reader["Email"].ToString(), PlaceofBirth = Reader["PlaceofBirth"].ToString(), NatureOfWork = Reader["NatureOfWork"].ToString(), PermanentAddress = Reader["PermanentAddress"].ToString(), Nationality = Reader["Nationality"].ToString(), CompanyOrEmployer = Reader["CompanyOrEmployer"].ToString(), BusinessOrProfession = Reader["BusinessOrProfession"].ToString(), GovtIDNo = Reader["GovtIDNo"].ToString(), GovtIDType = Reader["GovtIDType"].ToString() } };
                            x = x + 1;
                        }
                        //throw new Exception(x.ToString());
                        Reader.Close();

                        custconn.Close();

                        return new CustomerResultResponse { respcode = 1, message = getRespMessage(1), Data = bb, nextPage = page + 1, prevPage = page - 1, totalPages = finalCount };
                    }


                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                custconn.Close();
                return new CustomerResultResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), Data = null };
            }
        }
    }


    //[WebMethod]
    //public AddKYCResponse saveImage(String custid,/* Byte[] kycfront, Byte[] kycback, Byte[] id1, Byte[] id2, Byte[] id3, Byte[] image, */String createdBy)
    //{
    //    Byte[] kycfront = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    Byte[] kycback = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    Byte[] id1 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    Byte[] id2 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    Byte[] id3 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    Byte[] image = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    using (MySqlConnection custconn = custconImages.getConnection())
    //    {
    //        try
    //        {
    //            custconn.Open();
    //            using (custcommand = custconn.CreateCommand())
    //            {
    //                string firstname = "";
    //                string getfirstname = "SELECT firstname FROM kpcustomers.customers WHERE custid=@customerid;";
    //                custcommand.CommandText = getfirstname;
    //                custcommand.Parameters.AddWithValue("customerid", custid);
    //                MySqlDataReader reader = custcommand.ExecuteReader();
    //                if (!reader.HasRows)
    //                {
    //                    reader.Close();
    //                    custcommand.Dispose();
    //                    custconn.Close();
    //                    custconDomestic.CloseConnection();
    //                    return new AddKYCResponse { respcode = 0, message = "Customer ID does not exist." };
    //                }
    //                reader.Read();
    //                firstname = reader["firstname"].ToString().Substring(0, 1);
    //                reader.Close();

    //                try
    //                {
    //                    string insertimage = "INSERT INTO customerscanimages.customer" + firstname + " (custid,kycfront,kycback,id1,id2,id3,syscreated,imagefree1,syscreator) VALUES (@custid,@kycfront,@kycback,@id1,@id2,@id3,now(),@image,@syscreator);";
    //                    custcommand.CommandText = insertimage;
    //                    custcommand.Parameters.AddWithValue("custid", custid);
    //                    custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                    custcommand.Parameters.AddWithValue("kycback", kycback);
    //                    custcommand.Parameters.AddWithValue("id1", id1);
    //                    custcommand.Parameters.AddWithValue("id2", id2);
    //                    custcommand.Parameters.AddWithValue("id3", id3);
    //                    custcommand.Parameters.AddWithValue("image", image);
    //                    custcommand.Parameters.AddWithValue("syscreator", createdBy);
    //                    custcommand.ExecuteNonQuery();

    //                    custconn.Close();
    //                    custconDomestic.CloseConnection();
    //                    return new AddKYCResponse { respcode = 1, message = getRespMessage(1) };
    //                }
    //                catch (Exception ex)
    //                {
    //                    custconn.Close();
    //                    custconDomestic.CloseConnection();
    //                    return new AddKYCResponse { respcode = 0, ErrorDetail = ex.ToString() };
    //                }
    //            }
    //        }
    //        catch (MySqlException mex)
    //        {
    //            custconn.Close();
    //            custconImages.CloseConnection();
    //            return new AddKYCResponse { respcode = 17, ErrorDetail = mex.ToString() };
    //        }
    //    }
    //}

    //[WebMethod]
    //public AddKYCResponse addKYC(String Username, String Password, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderBirthdate, String SenderBranchID, String IDType, String IDNo, String ExpiryDate, String PhoneNo, String MobileNo, String Email, String CreatedBy, Double version, String stationcode, String PlaceofBirth, String NatureOfWork, String PermanentAddress, String Nationality, String CompanyOrEmployer, String BusinessOrProfession, String GovtIDType, String GovtIDNo)
    //{
    //    if (!authenticate(Username, Password))
    //    {
    //        return new AddKYCResponse { respcode = 7, message = getRespMessage(7) };
    //    }
    //    //Byte[] kycfront = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] kycback = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id1 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id2 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id3 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    try
    //    {
    //        dt = getServerDateDomestic(false);
    //    }
    //    catch (Exception ex)
    //    {
    //        kplog.Error("Exception catch");
    //        return new AddKYCResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), MLCardNo = null };
    //    }
    //    using (MySqlConnection custconn = custconDomestic.getConnection())
    //    {
    //        try
    //        {
    //            if (SenderProvinceCity.Trim() == string.Empty)
    //                SenderProvinceCity = "";
    //            custconn.Open();

    //            using (custcommand = custconn.CreateCommand())
    //            {
    //                string checkname = "select custid from kpcustomers.customers where firstname=@firstname and lastname=@lastname and middlename=@middlename and date(birthdate) = date(@senderbdate)";
    //                custcommand.CommandText = checkname;
    //                custcommand.Parameters.Clear();
    //                custcommand.Parameters.AddWithValue("firstname", SenderFName);
    //                custcommand.Parameters.AddWithValue("lastname", SenderLName);
    //                custcommand.Parameters.AddWithValue("middlename", SenderMName);
    //                custcommand.Parameters.AddWithValue("senderbdate", SenderBirthdate);

    //                MySqlDataReader readnameexist = custcommand.ExecuteReader();
    //                if (readnameexist.Read())
    //                {
    //                    readnameexist.Close();
    //                    custconn.Close();
    //                    return new AddKYCResponse { respcode = 0, message = "Customer Name already exist!" };
    //                }
    //                readnameexist.Close();
    //                string senderid = generateCustID(custcommand);
    //                string custid = senderid;
    //                string checkduplicate = "select custid from kpcustomers.customers where custid=@senderid";
    //                custcommand.CommandText = checkduplicate;
    //                custcommand.Parameters.Clear();
    //                custcommand.Parameters.AddWithValue("senderid", senderid);

    //                MySqlDataReader readduplicate = custcommand.ExecuteReader();
    //                if (readduplicate.Read())
    //                {
    //                    readduplicate.Close();

    //                    string updateseries = "update kpforms.customerseries set series = (select max(substring(custid,5,length(custid))) as max101 from  kpcustomers.customers where length(custid)=14) + 1";
    //                    custcommand.CommandText = updateseries;

    //                    int y = custcommand.ExecuteNonQuery();
    //                    return new AddKYCResponse { respcode = 0, message = "Connection error occured! Please try again. Thank you!" };
    //                }
    //                readduplicate.Close();
    //                custtrans = custconn.BeginTransaction(IsolationLevel.ReadCommitted);
    //                custcommand.Transaction = custtrans;

    //                if (!SenderMLCardNO.Equals(string.Empty))
    //                {
    //                    //addKYC_insert_cardno proc
    //                    string checkifexist = "select cardno from kpcustomers.customercard where cardno=@cardno";
    //                    custcommand.CommandText = checkifexist;
    //                    custcommand.Parameters.Clear();
    //                    custcommand.Parameters.AddWithValue("cardno", SenderMLCardNO);
    //                    MySqlDataReader readexist = custcommand.ExecuteReader();
    //                    if (readexist.Read())
    //                    {
    //                        readexist.Close();
    //                        custcommand.Dispose();
    //                        custconn.Close();
    //                        custconDomestic.CloseConnection();
    //                        return new AddKYCResponse { respcode = 0, message = "Card No already exist!" };
    //                    }
    //                    readexist.Close();
    //                    String insertMLCard = "INSERT INTO kpcustomers.customercard (CardNo,custid) VALUES (@CardNo,@custid)";
    //                    custcommand.CommandText = insertMLCard;
    //                    custcommand.Parameters.Clear();
    //                    custcommand.Parameters.AddWithValue("CardNo", SenderMLCardNO);
    //                    custcommand.Parameters.AddWithValue("CustID", senderid);
    //                    custcommand.ExecuteNonQuery();
    //                }

    //                String insertCustomer = "INSERT INTO kpcustomers.customers (CustID, FirstName, LastName, MiddleName, Street, ProvinceCity, Country, Gender, Birthdate, IDType, IDNo, DTCreated, ExpiryDate, CreatedBy, PhoneNo, Mobile, Email, cardno, GovtIDType, GovtIDNo) VALUES (@SCustID, @SFirstName, @SLastName, @SMiddleName, @SStreet, @SProvinceCity, @SCountry, @SGender, @SBirthdate, @IDType, @IDNo, @DTCreated, @ExpiryDate,@CreatedBy, @PhoneNo, @MobileNo, @Email, @mlcardno, @GovtIDType, @GovtIDNo);";
    //                custcommand.CommandText = insertCustomer;
    //                custcommand.Parameters.Clear();
    //                custcommand.Parameters.AddWithValue("SCustID", senderid);
    //                //custcommand.Parameters.AddWithValue("SMLCardNo", SenderMLCardNO);
    //                custcommand.Parameters.AddWithValue("SFirstName", SenderFName);
    //                custcommand.Parameters.AddWithValue("SLastName", SenderLName);
    //                custcommand.Parameters.AddWithValue("SMiddleName", SenderMName);
    //                custcommand.Parameters.AddWithValue("SStreet", SenderStreet);
    //                custcommand.Parameters.AddWithValue("SProvinceCity", SenderProvinceCity);
    //                custcommand.Parameters.AddWithValue("SCountry", SenderCountry);
    //                custcommand.Parameters.AddWithValue("SGender", SenderGender);
    //                //custcommand.Parameters.AddWithValue("SContactNo", SenderContactNo);
    //                custcommand.Parameters.AddWithValue("SBirthdate", SenderBirthdate);
    //                //custcommand.Parameters.AddWithValue("SBranchID", SenderBranchID);
    //                custcommand.Parameters.AddWithValue("DTCreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                custcommand.Parameters.AddWithValue("IDType", IDType);
    //                custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                custcommand.Parameters.AddWithValue("MobileNo", MobileNo);
    //                custcommand.Parameters.AddWithValue("Email", Email);
    //                custcommand.Parameters.AddWithValue("CreatedBy", CreatedBy);
    //                custcommand.Parameters.AddWithValue("mlcardno", SenderMLCardNO);
    //                custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
    //                custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
    //                custcommand.ExecuteNonQuery();

    //                /////// to add the customer info
    //                string custinfo = "INSERT INTO kpcustomers.CustomerInfo (CustID, PlaceofBirth, NatureOfWork, " +
    //                    "PermanentAddress, Nationality, CompanyOrEmployer, BusinessOrProfession, DTModified, DTModifier) " +
    //                    "VALUES (@CustId, @PlaceofBirth, @NatureOfWork, @PermanentAddress, @Nationality , " +
    //                    "@CompanyOrEmployer, @BusinessOrProfession, now(),@DTModifier);";
    //                custcommand.CommandText = custinfo;
    //                custcommand.Parameters.Clear();
    //                custcommand.Parameters.AddWithValue("CustId", senderid);
    //                custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
    //                custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
    //                custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
    //                custcommand.Parameters.AddWithValue("Nationality", Nationality);
    //                custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
    //                custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
    //                custcommand.Parameters.AddWithValue("DTModifier", CreatedBy);
    //                custcommand.ExecuteNonQuery();

    //                //string firstname = "";
    //                //string getfirstname = "SELECT firstname FROM kpcustomers.customers WHERE custid=@customerid;";
    //                //custcommand.CommandText = getfirstname;
    //                //custcommand.Parameters.AddWithValue("customerid", custid);
    //                //MySqlDataReader reader = custcommand.ExecuteReader();
    //                //if (!reader.HasRows)
    //                //{
    //                //    reader.Close();
    //                //    custcommand.Dispose();
    //                //    custconn.Close();
    //                //    custconDomestic.CloseConnection();
    //                //    return new AddKYCResponse { respcode = 0, message = "Customer ID does not exist." };
    //                //}
    //                //reader.Read();
    //                //firstname = reader["firstname"].ToString().Substring(0, 1);
    //                //reader.Close();

    //                //string insertimage = "INSERT INTO customerscanimages.customer" + firstname + " (custid,kycfront,kycback,id1,id2,id3,syscreated,imagefree1,syscreator) VALUES (@custid,@kycfront,@kycback,@id1,@id2,@id3,now(),@image,@syscreator);";
    //                //custcommand.CommandText = insertimage;
    //                //custcommand.Parameters.Clear();
    //                //custcommand.Parameters.AddWithValue("custid", custid);
    //                //custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                //custcommand.Parameters.AddWithValue("kycback", kycback);
    //                //custcommand.Parameters.AddWithValue("id1", id1);
    //                //custcommand.Parameters.AddWithValue("id2", id2);
    //                //custcommand.Parameters.AddWithValue("id3", id3);
    //                //custcommand.Parameters.AddWithValue("image", image);
    //                //custcommand.Parameters.AddWithValue("syscreator", CreatedBy);
    //                //custcommand.ExecuteNonQuery();

    //                String updatesender = "update kpforms.customerseries set series = series + 1";
    //                custcommand.CommandText = updatesender;
    //                custcommand.ExecuteNonQuery();

    //                custtrans.Commit();
    //                custconn.Close();
    //                custconDomestic.CloseConnection();
    //                return new AddKYCResponse { respcode = 1, message = getRespMessage(1), MLCustID = senderid };

    //            }
    //        }
    //        catch (Exception mex)
    //        {
    //            kplog.Fatal(mex.ToString());
    //            custtrans.Rollback();
    //            custconn.Close();
    //            int respcode = 0;
    //            if (mex.Message.StartsWith("Duplicate"))
    //            {
    //                respcode = 6;
    //                kplog.Fatal(getRespMessage(respcode), mex);
    //            }
    //            return new AddKYCResponse { respcode = respcode, message = getRespMessage(respcode), ErrorDetail = mex.ToString() };
    //        }
    //    }

    //}

    private Boolean checkcustomerifexist(String cashcardid, String fname, String mname, String lname, String bdate)
    {
        Boolean isfound = false;
        try
        {
            using (MySqlConnection con = custconDomestic.getConnection())
            {
                con.Open();
                using (command = con.CreateCommand())
                {
                    command.CommandText = "select custid from kpcashcard.ccard_accounts where fname=@firstname and lname=@lastname and mname=@middlename and date(bdate) = date(@senderbdate)";
                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("firstname", fname);
                    command.Parameters.AddWithValue("lastname", lname);
                    command.Parameters.AddWithValue("middlename", mname);
                    command.Parameters.AddWithValue("senderbdate", bdate);

                    MySqlDataReader readnameexist = command.ExecuteReader();
                    if (!readnameexist.Read())
                    {
                        readnameexist.Close();
                        con.Close();
                        custconDomestic.CloseConnection();
                        kplog.Info(fname + " : " + mname + " : " + lname + " : " + bdate + " - Customer not found in cash card");
                        return isfound;
                    }
                    readnameexist.Close();

                    command.CommandText = "select custid from kpcashcard.ccard_accounts where custid=@custid";
                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("custid", cashcardid);

                    MySqlDataReader readidexist = command.ExecuteReader();
                    if (!readidexist.Read())
                    {
                        readidexist.Close();
                        con.Close();
                        custconDomestic.CloseConnection();
                        kplog.Info(cashcardid + " - Customer not found in cash card");
                        return isfound;
                    }
                    readidexist.Close();

                    con.Close();
                    custconDomestic.CloseConnection();
                    kplog.Info(cashcardid + " - Customer Found");
                    return isfound = true;
                }
            }
        }
        catch (Exception ex)
        {
            custconDomestic.CloseConnection();
            kplog.Fatal(cashcardid + " - " + ex.ToString());
            return isfound;
        }
    }

    public String add_Cashcard(String custid, String fname, String mname, String lname, String bdate, String gender)
    {
        dt = getServerDateWallet(false);
        try
        {
            using (MySqlConnection con = dbconCCard.getConnection())
            {
                con.Open();
                using (command = con.CreateCommand())
                {
                    //checking
                    command.CommandText = "select ccardid from kpcashcard.ccard_accounts where ccardid=@ccardid";
                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("ccardid", "C" + custid);
                    MySqlDataReader rdr = command.ExecuteReader();
                    if (rdr.Read())
                    {
                        rdr.Close();
                        con.Close();
                        dbconCCard.CloseConnection();
                        kplog.Info("C" + custid + " - Customer Already Exist");
                        return "Customer Already Exist";
                    }
                    rdr.Close();
                    command.CommandText = "INSERT INTO kpcashcard.ccard_accounts (ccardid,custid,fname,mname,lname,bdate,gender," +
                    "date_created) VALUES (@ccardid,@custid,@fname,@mname,@lname,@bdate,@gender,@date_created);";
                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("ccardid", "C" + custid);
                    command.Parameters.AddWithValue("custid", custid);
                    command.Parameters.AddWithValue("fname", fname);
                    command.Parameters.AddWithValue("mname", mname);
                    command.Parameters.AddWithValue("lname", lname);
                    command.Parameters.AddWithValue("bdate", bdate);
                    command.Parameters.AddWithValue("gender", gender);
                    command.Parameters.AddWithValue("date_created", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                    command.ExecuteNonQuery();

                    con.Close();
                    dbconCCard.CloseConnection();
                    kplog.Info("C" + custid + " - Success");
                    return "C" + custid;
                }
            }
        }
        catch (Exception mex)
        {
            kplog.Fatal("C" + custid + " - " + mex.ToString());
            dbconCCard.CloseConnection();
            int respcode = 0;
            if (mex.Message.StartsWith("Duplicate"))
            {
                respcode = 6;
                kplog.Fatal("C" + custid + " - " + mex.ToString());
            }
            return "Failed";
        }
    }

    public String update_Cashcard(String custid, String fname, String mname, String lname, String bdate, String gender)
    {
        dt = getServerDateWallet(false);
        try
        {
            using (MySqlConnection con = dbconCCard.getConnection())
            {
                con.Open();
                using (command = con.CreateCommand())
                {
                    //checking
                    command.CommandText = "select ccardid from kpcashcard.ccard_accounts where ccardid=@ccardid";
                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("ccardid", "C" + custid);
                    MySqlDataReader rdr = command.ExecuteReader();
                    if (rdr.Read())
                    {
                        rdr.Close();
                        command.CommandText = "UPDATE kpcashcard.ccard_accounts SET fname = @fname , lname = @lname , mname = @mname ,gender = @gender , bdate = @bdate,date_modified=@date_modified WHERE ccardid = @ccardid;";
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("ccardid", "C" + custid);
                        command.Parameters.AddWithValue("fname", fname);
                        command.Parameters.AddWithValue("mname", mname);
                        command.Parameters.AddWithValue("lname", lname);
                        command.Parameters.AddWithValue("bdate", bdate);
                        command.Parameters.AddWithValue("gender", gender);
                        command.Parameters.AddWithValue("date_modified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.ExecuteNonQuery();
                        kplog.Info("C" + custid + " - Customer Exist. Success in Updating.");
                    }
                    else
                    {
                        rdr.Close();
                        command.CommandText = "INSERT INTO kpcashcard.ccard_accounts (ccardid,custid,fname,mname,lname,bdate,gender," +
                        "date_created) VALUES (@ccardid,@custid,@fname,@mname,@lname,@bdate,@gender,@date_created);";
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("ccardid", "C" + custid);
                        command.Parameters.AddWithValue("custid", custid);
                        command.Parameters.AddWithValue("fname", fname);
                        command.Parameters.AddWithValue("mname", mname);
                        command.Parameters.AddWithValue("lname", lname);
                        command.Parameters.AddWithValue("bdate", bdate);
                        command.Parameters.AddWithValue("gender", gender);
                        command.Parameters.AddWithValue("date_created", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.ExecuteNonQuery();
                        kplog.Info("C" + custid + " - New Customer Added. Success in Adding.");
                    }
                    rdr.Close();
                    con.Close();
                    dbconCCard.CloseConnection();
                    return "C" + custid;
                }
            }
        }
        catch (Exception mex)
        {
            kplog.Fatal("C" + custid + " - " + mex.ToString());
            dbconCCard.CloseConnection();
            int respcode = 0;
            if (mex.Message.StartsWith("Duplicate"))
            {
                respcode = 6;
                kplog.Fatal("C" + custid + " - " + mex.ToString());
            }
            return "Failed";
        }
    }

    [WebMethod]
    public AddKYCResponse addKYC(String Username, String Password, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderBirthdate, String SenderBranchID, String IDType, String IDNo, String ExpiryDate, String PhoneNo, String MobileNo, String Email, String CreatedBy, Double version, String stationcode, String PlaceofBirth, String NatureOfWork, String PermanentAddress, String Nationality, String CompanyOrEmployer, String BusinessOrProfession, String GovtIDType, String GovtIDNo, Boolean isCashcarh)
    {
        if (!authenticate(Username, Password))
        {
            return new AddKYCResponse { respcode = 7, message = getRespMessage(7) };
        }
        Boolean isfound = false;
        string senderid = "";
        int Icustomers, IcustomerGovtID, ICustomerInfo, Ucustomerseries, Useries;
        //Byte[] kycfront = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
        //Byte[] kycback = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
        //Byte[] id1 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
        //Byte[] id2 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
        //Byte[] id3 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
        try
        {
            dt = getServerDateDomesticCustomer();
        }
        catch (Exception ex)
        {
            kplog.Error("Exception catch");
            return new AddKYCResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), MLCardNo = null };
        }
        using (MySqlConnection custconn = custconDomestic.getConnection())
        {
            try
            {
                if (SenderProvinceCity.Trim() == string.Empty)
                    SenderProvinceCity = "";
                custconn.Open();

                using (custcommand = custconn.CreateCommand())
                {
                    string checkname = "select custid from kpcustomers.customers where firstname=@firstname and lastname=@lastname and middlename=@middlename and date(birthdate) = date(@senderbdate)";
                    custcommand.CommandText = checkname;
                    custcommand.Parameters.Clear();
                    custcommand.Parameters.AddWithValue("firstname", SenderFName);
                    custcommand.Parameters.AddWithValue("lastname", SenderLName);
                    custcommand.Parameters.AddWithValue("middlename", SenderMName);
                    custcommand.Parameters.AddWithValue("senderbdate", SenderBirthdate);

                    MySqlDataReader readnameexist = custcommand.ExecuteReader();
                    if (readnameexist.Read())
                    {
                        senderid = readnameexist["custid"].ToString();
                        readnameexist.Close();
                        if (!isCashcarh)
                        {
                            custconn.Close();
                            kplog.Info(senderid + "|" + SenderFName + "|" + SenderLName + "|" + SenderMName + "|" + SenderBirthdate + " - Customer Already Exist");
                            return new AddKYCResponse { respcode = 0, message = "Customer Name already exist!" };
                        }
                        isfound = true;
                    }
                    readnameexist.Close();
                    if (!isfound)
                    {
                        //monthly update of series
                        String updatesrs = "UPDATE kpforms.customerseries SET series = (SELECT IF(MAX(SUBSTRING(custid,5,9)) IS NULL,1," +
                                           "series) AS max101 FROM  kpcustomers.customers WHERE LENGTH(custid)=15 AND " +
                                           "SUBSTRING((custid),14,2)='N1' AND DATE_FORMAT(DTCreated, '%y%m') = DATE_FORMAT(@dt, '%y%m'));";
                        custcommand.CommandText = updatesrs;
                        custcommand.Parameters.Clear();
                        custcommand.Parameters.AddWithValue("dt", dt);
                        Useries = custcommand.ExecuteNonQuery();
                        kplog.Info("monthly update of series: " + Useries + "|" + dt.ToString("yyyy-MM-dd HH:mm:ss"));

                        senderid = generateCustID(custcommand, dt);
                        string checkduplicate = "select custid from kpcustomers.customers where custid=@senderid";
                        custcommand.CommandText = checkduplicate;
                        custcommand.Parameters.Clear();
                        custcommand.Parameters.AddWithValue("senderid", senderid);

                        MySqlDataReader readduplicate = custcommand.ExecuteReader();
                        if (readduplicate.Read())
                        {
                            readduplicate.Close();
                            kplog.Info("duplicate customer id generated: " + senderid);
                            //string updateseries = "update kpforms.customerseries set series = (SELECT MAX(SUBSTRING(custid,5,9)) AS max101 FROM  kpcustomers.customers WHERE LENGTH(custid)=15 AND SUBSTRING((custid),14,2)='N1' AND DATE_FORMAT(DTCreated, '%y%m') = DATE_FORMAT(NOW(), '%y%m')) + 1";
                            string updateseries = "update kpforms.customerseries set series = (SELECT IF(MAX(SUBSTRING(custid,5,9)) IS NULL,1,MAX(SUBSTRING(custid,5,9))) AS max101 FROM  kpcustomers.customers WHERE LENGTH(custid)=15 AND SUBSTRING((custid),14,2)='N1' AND DATE_FORMAT(DTCreated, '%y%m') = DATE_FORMAT(@dt, '%y%m')) + 1";
                            custcommand.CommandText = updateseries;
                            custcommand.Parameters.Clear();
                            custcommand.Parameters.AddWithValue("dt", dt);

                            int y = custcommand.ExecuteNonQuery();
                            kplog.Info(senderid + " - update kpforms.customerseries: " + y);
                            return new AddKYCResponse { respcode = 0, message = "Duplicate customer ID generated. Please try again. Thank you!" };
                        }
                        readduplicate.Close();
                        custtrans = custconn.BeginTransaction(IsolationLevel.ReadCommitted);
                        custcommand.Transaction = custtrans;

                        if (!SenderMLCardNO.Equals(string.Empty))
                        {
                            //addKYC_insert_cardno proc
                            string checkifexist = "select cardno from kpcustomers.customercard where cardno=@cardno";
                            custcommand.CommandText = checkifexist;
                            custcommand.Parameters.Clear();
                            custcommand.Parameters.AddWithValue("cardno", SenderMLCardNO);
                            MySqlDataReader readexist = custcommand.ExecuteReader();
                            if (readexist.Read())
                            {
                                readexist.Close();
                                custcommand.Dispose();
                                custconn.Close();
                                custconDomestic.CloseConnection();
                                return new AddKYCResponse { respcode = 0, message = "Card No already exist!" };
                            }
                            readexist.Close();
                            String insertMLCard = "INSERT INTO kpcustomers.customercard (CardNo,custid) VALUES (@CardNo,@custid)";
                            custcommand.CommandText = insertMLCard;
                            custcommand.Parameters.Clear();
                            custcommand.Parameters.AddWithValue("CardNo", SenderMLCardNO);
                            custcommand.Parameters.AddWithValue("CustID", senderid);
                            custcommand.ExecuteNonQuery();
                        }

                        String insertCustomer = "INSERT INTO kpcustomers.customers (CustID, FirstName, LastName, MiddleName, Street, ProvinceCity, Country, Gender, Birthdate, IDType, IDNo, DTCreated, ExpiryDate, CreatedBy, PhoneNo, Mobile, Email, cardno) VALUES (@SCustID, @SFirstName, @SLastName, @SMiddleName, @SStreet, @SProvinceCity, @SCountry, @SGender, @SBirthdate, @IDType, @IDNo, @DTCreated, @ExpiryDate,@CreatedBy, @PhoneNo, @MobileNo, @Email, @mlcardno);";
                        custcommand.CommandText = insertCustomer;
                        custcommand.Parameters.Clear();
                        custcommand.Parameters.AddWithValue("SCustID", senderid);
                        //custcommand.Parameters.AddWithValue("SMLCardNo", SenderMLCardNO);
                        custcommand.Parameters.AddWithValue("SFirstName", SenderFName);
                        custcommand.Parameters.AddWithValue("SLastName", SenderLName);
                        custcommand.Parameters.AddWithValue("SMiddleName", SenderMName);
                        custcommand.Parameters.AddWithValue("SStreet", SenderStreet);
                        custcommand.Parameters.AddWithValue("SProvinceCity", SenderProvinceCity);
                        custcommand.Parameters.AddWithValue("SCountry", SenderCountry);
                        custcommand.Parameters.AddWithValue("SGender", SenderGender);
                        //custcommand.Parameters.AddWithValue("SContactNo", SenderContactNo);
                        custcommand.Parameters.AddWithValue("SBirthdate", SenderBirthdate);
                        //custcommand.Parameters.AddWithValue("SBranchID", SenderBranchID);
                        custcommand.Parameters.AddWithValue("DTCreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        //custcommand.Parameters.AddWithValue("DTCreated", "2015-05-01 15:05:19");
                        custcommand.Parameters.AddWithValue("IDType", IDType);
                        custcommand.Parameters.AddWithValue("IDNo", IDNo);
                        custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
                        custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
                        custcommand.Parameters.AddWithValue("MobileNo", MobileNo);
                        custcommand.Parameters.AddWithValue("Email", Email);
                        custcommand.Parameters.AddWithValue("CreatedBy", CreatedBy);
                        custcommand.Parameters.AddWithValue("mlcardno", SenderMLCardNO);
                        //custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
                        //custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
                        Icustomers = custcommand.ExecuteNonQuery();

                        string custGovtID = "insert into kpcustomers.customerGovtID (CustID,GovtIDType,GovtIDNo) values(@CustID,@GovtIDType,@GovtIDNo)";
                        custcommand.CommandText = custGovtID;
                        custcommand.Parameters.Clear();
                        custcommand.Parameters.AddWithValue("CustID", senderid);
                        custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
                        custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
                        IcustomerGovtID = custcommand.ExecuteNonQuery();

                        /////// to add the customer info
                        string custinfo = "INSERT INTO kpcustomers.CustomerInfo (CustID, PlaceofBirth, NatureOfWork, " +
                            "PermanentAddress, Nationality, CompanyOrEmployer, BusinessOrProfession, DTModified, DTModifier) " +
                            "VALUES (@CustId, @PlaceofBirth, @NatureOfWork, @PermanentAddress, @Nationality , " +
                            "@CompanyOrEmployer, @BusinessOrProfession, @DTModified,@DTModifier);";
                        custcommand.CommandText = custinfo;
                        custcommand.Parameters.Clear();
                        custcommand.Parameters.AddWithValue("CustId", senderid);
                        custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
                        custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
                        custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
                        custcommand.Parameters.AddWithValue("Nationality", Nationality);
                        custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
                        custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
                        custcommand.Parameters.AddWithValue("DTModifier", CreatedBy);
                        custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        ICustomerInfo = custcommand.ExecuteNonQuery();

                        //string firstname = "";
                        //string getfirstname = "SELECT firstname FROM kpcustomers.customers WHERE custid=@customerid;";
                        //custcommand.CommandText = getfirstname;
                        //custcommand.Parameters.AddWithValue("customerid", custid);
                        //MySqlDataReader reader = custcommand.ExecuteReader();
                        //if (!reader.HasRows)
                        //{
                        //    reader.Close();
                        //    custcommand.Dispose();
                        //    custconn.Close();
                        //    custconDomestic.CloseConnection();
                        //    return new AddKYCResponse { respcode = 0, message = "Customer ID does not exist." };
                        //}
                        //reader.Read();
                        //firstname = reader["firstname"].ToString().Substring(0, 1);
                        //reader.Close();

                        //string insertimage = "INSERT INTO customerscanimages.customer" + firstname + " (custid,kycfront,kycback,id1,id2,id3,syscreated,imagefree1,syscreator) VALUES (@custid,@kycfront,@kycback,@id1,@id2,@id3,now(),@image,@syscreator);";
                        //custcommand.CommandText = insertimage;
                        //custcommand.Parameters.Clear();
                        //custcommand.Parameters.AddWithValue("custid", custid);
                        //custcommand.Parameters.AddWithValue("kycfront", kycfront);
                        //custcommand.Parameters.AddWithValue("kycback", kycback);
                        //custcommand.Parameters.AddWithValue("id1", id1);
                        //custcommand.Parameters.AddWithValue("id2", id2);
                        //custcommand.Parameters.AddWithValue("id3", id3);
                        //custcommand.Parameters.AddWithValue("image", image);
                        //custcommand.Parameters.AddWithValue("syscreator", CreatedBy);
                        //custcommand.ExecuteNonQuery();

                        String updatesender = "update kpforms.customerseries set series = series + 1";
                        custcommand.CommandText = updatesender;
                        Ucustomerseries = custcommand.ExecuteNonQuery();

                        custtrans.Commit();
                        custconn.Close();
                        custconDomestic.CloseConnection();
                        kplog.Info(senderid + " - Customer Successfully Saved. " + Icustomers + "|" + IcustomerGovtID + "|" + ICustomerInfo + "|" + Ucustomerseries);
                        //return new AddKYCResponse { respcode = 1, message = getRespMessage(1), MLCustID = senderid };
                    }
                }
            }
            catch (Exception mex)
            {
                kplog.Fatal(mex.ToString());
                custtrans.Rollback();
                custconn.Close();
                int respcode = 0;
                if (mex.Message.StartsWith("Duplicate"))
                {
                    respcode = 6;
                    kplog.Fatal(getRespMessage(respcode), mex);
                    custconn.Open();
                    using (ftscommand = custconn.CreateCommand())
                    {
                        try
                        {
                            String updateseries = "UPDATE kpforms.`customerseries` SET `series`=series+100;";
                            ftscommand.CommandText = updateseries;
                            ftscommand.Parameters.Clear();
                            ftscommand.ExecuteNonQuery();

                            var counter = 0;
                            while (counter < 3)
                            {
                                //monthly update of series
                                String updatesrs = "UPDATE kpforms.customerseries SET series = (SELECT IF(MAX(SUBSTRING(custid,5,9)) IS NULL,1," +
                                                   "series) AS max101 FROM  kpcustomers.customers WHERE LENGTH(custid)=15 AND " +
                                                   "SUBSTRING((custid),14,2)='N1' AND DATE_FORMAT(DTCreated, '%y%m') = DATE_FORMAT(@dt, '%y%m'));";
                                custcommand.CommandText = updatesrs;
                                custcommand.Parameters.Clear();
                                custcommand.Parameters.AddWithValue("dt", dt);
                                Useries = custcommand.ExecuteNonQuery();
                                kplog.Info("(Catch side)monthly update of series: " + Useries + "|" + dt.ToString("yyyy-MM-dd HH:mm:ss"));

                                senderid = generateCustID(ftscommand, dt);
                                string checkduplicate = "select custid from kpcustomers.customers where custid=@senderid";
                                custcommand.CommandText = checkduplicate;
                                custcommand.Parameters.Clear();
                                custcommand.Parameters.AddWithValue("senderid", senderid);

                                MySqlDataReader readduplicate = custcommand.ExecuteReader();
                                if (readduplicate.Read())
                                {
                                    readduplicate.Close();
                                    kplog.Info("(Catch side)duplicate customer id generated: " + senderid);
                                    //string updateseries2 = "update kpforms.customerseries set series = (SELECT MAX(SUBSTRING(custid,5,9)) AS max101 FROM  kpcustomers.customers WHERE LENGTH(custid)=15 AND SUBSTRING((custid),14,2)='N1' AND DATE_FORMAT(DTCreated, '%y%m') = DATE_FORMAT(NOW(), '%y%m')) + 10";
                                    string updateseries2 = "update kpforms.customerseries set series = (SELECT IF(MAX(SUBSTRING(custid,5,9)) IS NULL,1,MAX(SUBSTRING(custid,5,9))) AS max101 FROM  kpcustomers.customers WHERE LENGTH(custid)=15 AND SUBSTRING((custid),14,2)='N1' AND DATE_FORMAT(DTCreated, '%y%m') = DATE_FORMAT(@dt, '%y%m')) + 10";
                                    custcommand.CommandText = updateseries2;
                                    custcommand.Parameters.Clear();
                                    custcommand.Parameters.AddWithValue("dt", dt);

                                    int y = custcommand.ExecuteNonQuery();
                                    kplog.Info(senderid + " -(Catch side) update kpforms.customerseries: " + y);
                                    Thread.Sleep(1000 * counter);
                                    counter++;
                                    kplog.Info("(Catch side)Success update customerseries. | loop count: " + counter + " time/s");
                                    //return new AddKYCResponse { respcode = 0, message = "Connection error occured! Please try again. Thank you!" };
                                }
                                else
                                {
                                    readduplicate.Close();
                                    try
                                    {
                                        custtrans = custconn.BeginTransaction(IsolationLevel.ReadCommitted);
                                        custcommand.Transaction = custtrans;

                                        if (!SenderMLCardNO.Equals(string.Empty))
                                        {
                                            //addKYC_insert_cardno proc
                                            string checkifexist = "select cardno from kpcustomers.customercard where cardno=@cardno";
                                            custcommand.CommandText = checkifexist;
                                            custcommand.Parameters.Clear();
                                            custcommand.Parameters.AddWithValue("cardno", SenderMLCardNO);
                                            MySqlDataReader readexist = custcommand.ExecuteReader();
                                            if (readexist.Read())
                                            {
                                                readexist.Close();
                                                custcommand.Dispose();
                                                custconn.Close();
                                                custconDomestic.CloseConnection();
                                                kplog.Info(senderid + " - (Catch side)Card No already exist! " + SenderMLCardNO);
                                                return new AddKYCResponse { respcode = 0, message = "Card No already exist!" };
                                            }
                                            readexist.Close();
                                            String insertMLCard = "INSERT INTO kpcustomers.customercard (CardNo,custid) VALUES (@CardNo,@custid)";
                                            custcommand.CommandText = insertMLCard;
                                            custcommand.Parameters.Clear();
                                            custcommand.Parameters.AddWithValue("CardNo", SenderMLCardNO);
                                            custcommand.Parameters.AddWithValue("CustID", senderid);
                                            custcommand.ExecuteNonQuery();
                                        }

                                        String insertCustomer = "INSERT INTO kpcustomers.customers (CustID, FirstName, LastName, MiddleName, Street, ProvinceCity, Country, Gender, Birthdate, IDType, IDNo, DTCreated, ExpiryDate, CreatedBy, PhoneNo, Mobile, Email, cardno) VALUES (@SCustID, @SFirstName, @SLastName, @SMiddleName, @SStreet, @SProvinceCity, @SCountry, @SGender, @SBirthdate, @IDType, @IDNo, @DTCreated, @ExpiryDate,@CreatedBy, @PhoneNo, @MobileNo, @Email, @mlcardno);";
                                        custcommand.CommandText = insertCustomer;
                                        custcommand.Parameters.Clear();
                                        custcommand.Parameters.AddWithValue("SCustID", senderid);
                                        custcommand.Parameters.AddWithValue("SFirstName", SenderFName);
                                        custcommand.Parameters.AddWithValue("SLastName", SenderLName);
                                        custcommand.Parameters.AddWithValue("SMiddleName", SenderMName);
                                        custcommand.Parameters.AddWithValue("SStreet", SenderStreet);
                                        custcommand.Parameters.AddWithValue("SProvinceCity", SenderProvinceCity);
                                        custcommand.Parameters.AddWithValue("SCountry", SenderCountry);
                                        custcommand.Parameters.AddWithValue("SGender", SenderGender);
                                        custcommand.Parameters.AddWithValue("SBirthdate", SenderBirthdate);
                                        custcommand.Parameters.AddWithValue("DTCreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                        custcommand.Parameters.AddWithValue("IDType", IDType);
                                        custcommand.Parameters.AddWithValue("IDNo", IDNo);
                                        custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
                                        custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
                                        custcommand.Parameters.AddWithValue("MobileNo", MobileNo);
                                        custcommand.Parameters.AddWithValue("Email", Email);
                                        custcommand.Parameters.AddWithValue("CreatedBy", CreatedBy);
                                        custcommand.Parameters.AddWithValue("mlcardno", SenderMLCardNO);
                                        Icustomers = custcommand.ExecuteNonQuery();

                                        string custGovtID = "insert into kpcustomers.customerGovtID (CustID,GovtIDType,GovtIDNo) values(@CustID,@GovtIDType,@GovtIDNo)";
                                        custcommand.CommandText = custGovtID;
                                        custcommand.Parameters.Clear();
                                        custcommand.Parameters.AddWithValue("CustID", senderid);
                                        custcommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
                                        custcommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
                                        IcustomerGovtID = custcommand.ExecuteNonQuery();

                                        /////// to add the customer info
                                        string custinfo = "INSERT INTO kpcustomers.CustomerInfo (CustID, PlaceofBirth, NatureOfWork, " +
                                            "PermanentAddress, Nationality, CompanyOrEmployer, BusinessOrProfession, DTModified, DTModifier) " +
                                            "VALUES (@CustId, @PlaceofBirth, @NatureOfWork, @PermanentAddress, @Nationality , " +
                                            "@CompanyOrEmployer, @BusinessOrProfession, @DTModified,@DTModifier);";
                                        custcommand.CommandText = custinfo;
                                        custcommand.Parameters.Clear();
                                        custcommand.Parameters.AddWithValue("CustId", senderid);
                                        custcommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
                                        custcommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
                                        custcommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
                                        custcommand.Parameters.AddWithValue("Nationality", Nationality);
                                        custcommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
                                        custcommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
                                        custcommand.Parameters.AddWithValue("DTModifier", CreatedBy);
                                        custcommand.Parameters.AddWithValue("DTModified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                                        ICustomerInfo = custcommand.ExecuteNonQuery();

                                        String updatesender = "update kpforms.customerseries set series = series + 1";
                                        custcommand.CommandText = updatesender;
                                        Ucustomerseries = custcommand.ExecuteNonQuery();

                                        custtrans.Commit();
                                        custconn.Close();
                                        custconDomestic.CloseConnection();
                                        kplog.Info(senderid + " - (Catch side)Customer Successfully Saved. " + Icustomers + "|" + IcustomerGovtID + "|" + ICustomerInfo + "|" + Ucustomerseries);
                                        return new AddKYCResponse { respcode = 1, message = getRespMessage(1) };
                                    }
                                    catch (Exception ex)
                                    {
                                        custtrans.Rollback();
                                        custconn.Close();
                                        custconDomestic.CloseConnection();
                                        kplog.Fatal(senderid + " - (Catch side)Error in attempting to re-save customer info. - " + ex.ToString());
                                        return new AddKYCResponse { respcode = 0, message = "Connection error occured! Please try again. Thank you!", ErrorDetail = ex.ToString() };
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            custconn.Close();
                            custconDomestic.CloseConnection();
                            kplog.Fatal(senderid + " - (Catch side)Error in updating series number. - " + ex.ToString());
                            return new AddKYCResponse { respcode = 0, message = "Connection error occured! Please try again. Thank you!", ErrorDetail = ex.ToString() };
                        }
                    }
                }
                //try
                //{
                //    using (MySqlConnection domconn = dbconDomestic.getConnection())
                //    {
                //        using (ftscommand = domconn.CreateCommand())
                //        {
                //            ftstrans = custconn.BeginTransaction(IsolationLevel.ReadCommitted);
                //            ftscommand.Transaction = ftstrans;
                //            if (!SenderMLCardNO.Equals(string.Empty))
                //            {
                //                String insertMLCard = "INSERT INTO kpadminlogs.ftscustomercard (CardNo,custid) VALUES (@CardNo,@custid)";
                //                ftscommand.CommandText = insertMLCard;
                //                ftscommand.Parameters.Clear();
                //                ftscommand.Parameters.AddWithValue("CardNo", SenderMLCardNO);
                //                ftscommand.Parameters.AddWithValue("CustID", senderid);
                //                ftscommand.ExecuteNonQuery();
                //            }
                //            String insertCustomer = "INSERT INTO kpadminlogs.ftscustomers (CustID, FirstName, LastName, MiddleName, Street, ProvinceCity, Country, Gender, Birthdate, IDType, IDNo, DTCreated, ExpiryDate, CreatedBy, PhoneNo, Mobile, Email, cardno) VALUES (@SCustID, @SFirstName, @SLastName, @SMiddleName, @SStreet, @SProvinceCity, @SCountry, @SGender, @SBirthdate, @IDType, @IDNo, @DTCreated, @ExpiryDate,@CreatedBy, @PhoneNo, @MobileNo, @Email, @mlcardno);";
                //            ftscommand.CommandText = insertCustomer;
                //            ftscommand.Parameters.Clear();
                //            ftscommand.Parameters.AddWithValue("SCustID", senderid);
                //            ftscommand.Parameters.AddWithValue("SFirstName", SenderFName);
                //            ftscommand.Parameters.AddWithValue("SLastName", SenderLName);
                //            ftscommand.Parameters.AddWithValue("SMiddleName", SenderMName);
                //            ftscommand.Parameters.AddWithValue("SStreet", SenderStreet);
                //            ftscommand.Parameters.AddWithValue("SProvinceCity", SenderProvinceCity);
                //            ftscommand.Parameters.AddWithValue("SCountry", SenderCountry);
                //            ftscommand.Parameters.AddWithValue("SGender", SenderGender);
                //            ftscommand.Parameters.AddWithValue("SBirthdate", SenderBirthdate);
                //            ftscommand.Parameters.AddWithValue("DTCreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                //            ftscommand.Parameters.AddWithValue("IDType", IDType);
                //            ftscommand.Parameters.AddWithValue("IDNo", IDNo);
                //            ftscommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
                //            ftscommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
                //            ftscommand.Parameters.AddWithValue("MobileNo", MobileNo);
                //            ftscommand.Parameters.AddWithValue("Email", Email);
                //            ftscommand.Parameters.AddWithValue("CreatedBy", CreatedBy);
                //            ftscommand.Parameters.AddWithValue("mlcardno", SenderMLCardNO);
                //            ftscommand.ExecuteNonQuery();
                //            //insert to government id table
                //            string custGovtID = "insert into kpadminlogs.ftscustomerGovtID (CustID,GovtIDType,GovtIDNo) values(@CustID,@GovtIDType,@GovtIDNo)";
                //            ftscommand.CommandText = custGovtID;
                //            ftscommand.Parameters.Clear();
                //            ftscommand.Parameters.AddWithValue("CustID", senderid);
                //            ftscommand.Parameters.AddWithValue("GovtIDType", GovtIDType);
                //            ftscommand.Parameters.AddWithValue("GovtIDNo", GovtIDNo);
                //            ftscommand.ExecuteNonQuery();

                //            /////// to add the customer info
                //            string custinfo = "INSERT INTO kpadminlogs.ftsCustomerInfo (CustID, PlaceofBirth, NatureOfWork, " +
                //                "PermanentAddress, Nationality, CompanyOrEmployer, BusinessOrProfession, DTModified, DTModifier) " +
                //                "VALUES (@CustId, @PlaceofBirth, @NatureOfWork, @PermanentAddress, @Nationality , " +
                //                "@CompanyOrEmployer, @BusinessOrProfession, now(),@DTModifier);";
                //            ftscommand.CommandText = custinfo;
                //            ftscommand.Parameters.Clear();
                //            ftscommand.Parameters.AddWithValue("CustId", senderid);
                //            ftscommand.Parameters.AddWithValue("PlaceofBirth", PlaceofBirth);
                //            ftscommand.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
                //            ftscommand.Parameters.AddWithValue("PermanentAddress", PermanentAddress);
                //            ftscommand.Parameters.AddWithValue("Nationality", Nationality);
                //            ftscommand.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
                //            ftscommand.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
                //            ftscommand.Parameters.AddWithValue("DTModifier", CreatedBy);
                //            ftscommand.ExecuteNonQuery();

                //            ftstrans.Commit();
                //            domconn.Close();
                //            dbconDomestic.CloseConnection();
                //            kplog.Info(senderid + " - Successfully saved in ftsTablecustomer logs.");
                //            return new AddKYCResponse { respcode = 1, message = getRespMessage(1) };
                //        }
                //    }
                //}
                //catch (Exception cex)
                //{
                //    kplog.Fatal(senderid + " - Failed to save customer info in ftsTablecustomer - " + cex.ToString());
                //    ftstrans.Rollback();
                //    dbconDomestic.CloseConnection();
                //    return new AddKYCResponse { respcode = 1, message = getRespMessage(1), ErrorDetail = cex.ToString()};
                //}
               //return new AddKYCResponse { respcode = respcode, message = getRespMessage(respcode), ErrorDetail = mex.ToString() };
                kplog.Info(senderid + " - (Catch side)Connection error occured! Please try again. Thank you! | 3 attempts na duplicate japon: " + mex.ToString());
                return new AddKYCResponse { respcode = 0, message = "Connection error occured! Please try again. Thank you!", ErrorDetail = mex.ToString() };
            }
        }
        kplog.Info(senderid + " - Customer Already Exist in KYC");
        String savecashcard = "";
        int rspcode = 1;
        if (isCashcarh)
        {
            kplog.Info(senderid + " - Add Customer to Cash Card");
            savecashcard = add_Cashcard(senderid, SenderFName, SenderMName, SenderLName, SenderBirthdate, SenderGender);
            if (savecashcard == "Failed")
                rspcode = 18;

            if (savecashcard.Contains("Customer"))
                rspcode = 6;
        }

        return new AddKYCResponse { respcode = rspcode, message = getRespMessage(rspcode), MLCustID = senderid };
    }

    ////old addkyc in client
    //[WebMethod]
    //public AddKYCResponse addKYC(String Username, String Password, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderBirthdate, String SenderBranchID, String IDType, String IDNo, String ExpiryDate, String PhoneNo, String MobileNo, String Email, String CreatedBy, Double version, String stationcode, Byte[] kycfront, Byte[] kycback, Byte[] id1, Byte[] id2, Byte[] id3,Byte[] image)
    //{
    //    if (!authenticate(Username, Password))
    //    {
    //        return new AddKYCResponse { respcode = 7, message = getRespMessage(7) };
    //    }
    //    //Byte[] kycfront = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] kycback = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id1 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id2 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //Byte[] id3 = new byte[] { 0x38, 0x05, 0xe1, 0x5f, 0xaa, 0x5f, 0xaa, 0xd0 };
    //    //if (!compareVersions(getVersion(stationcode), version))
    //    //{
    //    //    return new AddKYCResponse { respcode = 10, message = getRespMessage(10) };
    //    //}
    //    //Waiting for further instructions.
    //    //if (verifyCustomer(SenderFName, SenderLName, SenderMName, SenderBirthdate)) {

    //    //    return new AddKYCResponse { respcode = 6, message = getRespMessage(6) };
    //    //}
    //    try
    //    {
    //        dt = getServerDateDomestic(false);
    //    }
    //    catch (Exception ex)
    //    {
    //        kplog.Error("Exception catch");
    //        return new AddKYCResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), MLCardNo = null };
    //    }
    //    using (MySqlConnection custconn = custconDomestic.getConnection())
    //    {
    //        try
    //        {
    //            if (SenderProvinceCity.Trim() == string.Empty)
    //                SenderProvinceCity = "";
    //            custconn.Open();


    //            //using (command = custconn.CreateCommand()) {
    //            //    dt = getServerDate(true);
    //            //}
    //            using (custcommand = custconn.CreateCommand())
    //            {
    //                string checkname = "select custid from kpcustomers.customers where firstname=@firstname and lastname=@lastname and middlename=@middlename and date(birthdate) = date(@senderbdate)";
    //                custcommand.CommandText = checkname;
    //                custcommand.Parameters.Clear();
    //                custcommand.Parameters.AddWithValue("firstname", SenderFName);
    //                custcommand.Parameters.AddWithValue("lastname", SenderLName);
    //                custcommand.Parameters.AddWithValue("middlename", SenderMName);
    //                custcommand.Parameters.AddWithValue("senderbdate", SenderBirthdate);

    //                MySqlDataReader readnameexist = custcommand.ExecuteReader();
    //                if (readnameexist.Read())
    //                {
    //                    readnameexist.Close();
    //                    custconn.Close();
    //                    return new AddKYCResponse { respcode = 0, message = "Customer Name already exist!" };
    //                }
    //                readnameexist.Close();
    //                string senderid = generateCustID(custcommand);
    //                string custid = senderid;
    //                string checkduplicate = "select custid from kpcustomers.customers where custid=@senderid";
    //                custcommand.CommandText = checkduplicate;
    //                custcommand.Parameters.Clear();
    //                custcommand.Parameters.AddWithValue("senderid", senderid);

    //                MySqlDataReader readduplicate = custcommand.ExecuteReader();
    //                if (readduplicate.Read())
    //                {
    //                    readduplicate.Close();

    //                    //string getmax="select substring(custid,5,length(custid))  as max101 from kpcustomers.customers order by DTCreated desc limit 1";
    //                   // string getmax = "select max(substring(custid,5,length(custid))) as max101 from  kpcustomers.customers";
    //                   // custcommand.CommandText = getmax;
    //                    //MySqlDataReader readmax = custcommand.ExecuteReader();
    //                    //readmax.Read();
    //                   // Int64 max101 = Convert.ToInt64(readmax["max101"].ToString());
    //                   // readmax.Close();

    //                    string updateseries = "update kpforms.customerseries set series = (select max(substring(custid,5,length(custid))) as max101 from  kpcustomers.customers where length(custid)=14) + 1";
    //                    custcommand.CommandText = updateseries;
    //                    //custcommand.Parameters.AddWithValue("max101", max101+1);
    //                    int y =custcommand.ExecuteNonQuery();
    //                    return new AddKYCResponse { respcode = 0, message = "Connection error occured! Please try again. Thank you!" };
    //                }
    //                readduplicate.Close();
    //                custtrans = custconn.BeginTransaction(IsolationLevel.ReadCommitted);
    //                custcommand.Transaction = custtrans;

    //                if (!SenderMLCardNO.Equals(string.Empty))
    //                {
    //                    //addKYC_insert_cardno proc
    //                    string checkifexist = "select cardno from kpcustomers.customercard where cardno=@cardno";
    //                    custcommand.CommandText = checkifexist;
    //                    custcommand.Parameters.Clear();
    //                    custcommand.Parameters.AddWithValue("cardno", SenderMLCardNO);
    //                    MySqlDataReader readexist = custcommand.ExecuteReader();
    //                    if (readexist.Read())
    //                    {
    //                        readexist.Close();
    //                        custcommand.Dispose();
    //                        custconn.Close();
    //                        custconDomestic.CloseConnection();
    //                        return new AddKYCResponse { respcode =0, message = "Card No already exist!" };
    //                    }
    //                    readexist.Close();
    //                    String insertMLCard = "INSERT INTO kpcustomers.customercard (CardNo,custid) VALUES (@CardNo,@custid)";
    //                    custcommand.CommandText = insertMLCard;
    //                    custcommand.Parameters.Clear();
    //                    custcommand.Parameters.AddWithValue("CardNo", SenderMLCardNO);
    //                    custcommand.Parameters.AddWithValue("CustID", senderid);
    //                    custcommand.ExecuteNonQuery();
    //                }


    //                String insertCustomer = "INSERT INTO kpcustomers.customers (CustID, FirstName, LastName, MiddleName, Street, ProvinceCity, Country, Gender, Birthdate, IDType, IDNo, DTCreated, ExpiryDate, CreatedBy, PhoneNo, Mobile, Email, cardno) VALUES (@SCustID, @SFirstName, @SLastName, @SMiddleName, @SStreet, @SProvinceCity, @SCountry, @SGender, @SBirthdate, @IDType, @IDNo, @DTCreated, @ExpiryDate,@CreatedBy, @PhoneNo, @MobileNo, @Email, @mlcardno);";
    //                custcommand.CommandText = insertCustomer;
    //                custcommand.Parameters.Clear();
    //                custcommand.Parameters.AddWithValue("SCustID", senderid);
    //                //custcommand.Parameters.AddWithValue("SMLCardNo", SenderMLCardNO);
    //                custcommand.Parameters.AddWithValue("SFirstName", SenderFName);
    //                custcommand.Parameters.AddWithValue("SLastName", SenderLName);
    //                custcommand.Parameters.AddWithValue("SMiddleName", SenderMName);
    //                custcommand.Parameters.AddWithValue("SStreet", SenderStreet);
    //                custcommand.Parameters.AddWithValue("SProvinceCity", SenderProvinceCity);
    //                custcommand.Parameters.AddWithValue("SCountry", SenderCountry);
    //                custcommand.Parameters.AddWithValue("SGender", SenderGender);
    //                //custcommand.Parameters.AddWithValue("SContactNo", SenderContactNo);
    //                custcommand.Parameters.AddWithValue("SBirthdate", SenderBirthdate);
    //                //custcommand.Parameters.AddWithValue("SBranchID", SenderBranchID);
    //                custcommand.Parameters.AddWithValue("DTCreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
    //                custcommand.Parameters.AddWithValue("IDType", IDType);
    //                custcommand.Parameters.AddWithValue("IDNo", IDNo);
    //                custcommand.Parameters.AddWithValue("ExpiryDate", (ExpiryDate.Equals(String.Empty)) ? null : ExpiryDate);
    //                custcommand.Parameters.AddWithValue("PhoneNo", PhoneNo);
    //                custcommand.Parameters.AddWithValue("MobileNo", MobileNo);
    //                custcommand.Parameters.AddWithValue("Email", Email);
    //                custcommand.Parameters.AddWithValue("CreatedBy", CreatedBy);
    //                custcommand.Parameters.AddWithValue("mlcardno", SenderMLCardNO);
    //                custcommand.ExecuteNonQuery();

    //                //string insertimage = "INSERT INTO kpcustomers.customerimages (custid,kycfront,kycback,id1,id2,id3,syscreated,syscreator) VALUES (@custid,@kycfront,@kycback,@id1,@id2,@id3,now(),@syscreator);";
    //                //custcommand.CommandText = insertimage;
    //                //custcommand.Parameters.Clear();
    //                //custcommand.Parameters.AddWithValue("custid", custid);
    //                //custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                //custcommand.Parameters.AddWithValue("kycback", kycback);
    //                //custcommand.Parameters.AddWithValue("id1", id1);
    //                //custcommand.Parameters.AddWithValue("id2", id2);
    //                //custcommand.Parameters.AddWithValue("id3", id3);
    //                //custcommand.Parameters.AddWithValue("syscreator", CreatedBy);
    //                //custcommand.ExecuteNonQuery();

    //                String updatesender = "update kpforms.customerseries set series = series + 1";
    //                custcommand.CommandText = updatesender;
    //                custcommand.ExecuteNonQuery();

    //                custtrans.Commit();

    //                string firstname = "";
    //                string getfirstname = "SELECT firstname FROM kpcustomers.customers WHERE custid=@customerid;";
    //                custcommand.CommandText = getfirstname;
    //                custcommand.Parameters.AddWithValue("customerid", custid);
    //                MySqlDataReader reader = custcommand.ExecuteReader();
    //                if (!reader.HasRows)
    //                {
    //                    reader.Close();
    //                    custcommand.Dispose();
    //                    custconn.Close();
    //                    custconDomestic.CloseConnection();
    //                    return new AddKYCResponse { respcode = 0, message = "Customer ID does not exist." };
    //                }
    //                reader.Read();
    //                firstname = reader["firstname"].ToString().Substring(0, 1);
    //                reader.Close();
    //                Boolean error = false;
    //                try
    //                {
    //                    string insertimage = "INSERT INTO customerscanimages.customer" + firstname + " (custid,kycfront,kycback,id1,id2,id3,syscreated,imagefree1,syscreator) VALUES (@custid,@kycfront,@kycback,@id1,@id2,@id3,now(),@image,@syscreator);";
    //                    custcommand.CommandText = insertimage;
    //                    custcommand.Parameters.AddWithValue("custid", custid);
    //                    custcommand.Parameters.AddWithValue("kycfront", kycfront);
    //                    custcommand.Parameters.AddWithValue("kycback", kycback);
    //                    custcommand.Parameters.AddWithValue("id1", id1);
    //                    custcommand.Parameters.AddWithValue("id2", id2);
    //                    custcommand.Parameters.AddWithValue("id3", id3);
    //                    custcommand.Parameters.AddWithValue("image", image);
    //                    custcommand.Parameters.AddWithValue("syscreator", CreatedBy);
    //                    custcommand.ExecuteNonQuery();
    //                }
    //                catch (MySqlException we)
    //                {
    //                    error = true;
    //                }

    //                custconn.Close();
    //                custconDomestic.CloseConnection();
    //                if (!error)
    //                {
    //                    return new AddKYCResponse { respcode = 1, message = getRespMessage(1), MLCustID = senderid };
    //                }
    //                return new AddKYCResponse { respcode = 17, message = "Error in saving Photo.", MLCustID = senderid };
    //            }
    //        }
    //        catch (Exception mex)
    //        {
    //            kplog.Fatal(mex.ToString());
    //            custtrans.Rollback();
    //            custconn.Close();
    //            int respcode = 0;
    //            if (mex.Message.StartsWith("Duplicate"))
    //            {
    //                respcode = 6;
    //                kplog.Fatal(getRespMessage(respcode), mex);
    //            }
    //            return new AddKYCResponse { respcode = respcode, message = getRespMessage(respcode), ErrorDetail = mex.ToString() };
    //        }
    //    }

    //}

    [WebMethod(BufferResponse = false)]
    public PayoutResponse testpayoutKIOSK(String KPTNNo)
    {
        dt = getServerDateDomestic(false);
        using (MySqlConnection checkinglang = dbconDomestic.getConnection())
        {
            checkinglang.Open();
            try
            {

                using (command = checkinglang.CreateCommand())
                {
                    String checkiftagasclaimed = "Select kptnno from " + generateTableNameDomestic(0, null) + " where kptnno=@kptn and isclaimed='1' and (sysmodified is not null or sysmodified!='' or sysmodified='0000-00-00 00:00:00')";
                    command.CommandTimeout = 0;
                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("kptn", KPTNNo);
                    command.CommandText = checkiftagasclaimed;
                    MySqlDataReader iftagisclaimeddr = command.ExecuteReader();
                    if (iftagisclaimeddr.HasRows)
                    {
                        iftagisclaimeddr.Close();
                        return new PayoutResponse { respcode = 0, message = "Transaction already claimed." };
                    }
                    iftagisclaimeddr.Close();

                    String checkifisclaimed = "Select kptnno from `kptransactions`.`payout` where kptnno=@kptn";
                    command.CommandTimeout = 0;
                    command.Parameters.Clear();
                    command.Parameters.AddWithValue("kptn", KPTNNo);
                    command.CommandText = checkifisclaimed;
                    MySqlDataReader isclaimeddr = command.ExecuteReader();
                    if (isclaimeddr.HasRows)
                    {
                        isclaimeddr.Close();
                        String checkifPOcancelled = "SELECT kptnno FROM `kptransactions`.`pocancel` WHERE oldkptnno=@kptn";
                        command.CommandTimeout = 0;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.CommandText = checkifPOcancelled;
                        MySqlDataReader iscancelleddr = command.ExecuteReader();
                        if (!iscancelleddr.HasRows)
                        {
                            iscancelleddr.Close();
                            return new PayoutResponse { respcode = 0, message = "Transaction already claimed." };
                        }
                        iscancelleddr.Close();


                    }
                    isclaimeddr.Close();
                }
            }
            catch (Exception ex)
            {
                checkinglang.Close();
                dbconDomestic.CloseConnection();
                return new PayoutResponse { respcode = 101, message = "Problem saving transaction. Please close the payout window and try again.", ErrorDetail = ex.ToString() };//message = "Problem saving transaction. Please close the payout window and try again.", ErrorDetail = ex.ToString() };
            }
            checkinglang.Close();
        }
        return new PayoutResponse { respcode = 1, message = "Valid KPTN number" };
    }

    public PayoutResponse payoutKIOSK(String Username, String Password, String ControlNo, String KPTNNo, String OperatorID, String Station, int IsRemote, String RemoteBranch, String RemoteOperatorID, String Reason, String SOBranch, String SOControlNo, String SOOperator, String Currency, Decimal Principal, String SenderID, String ReceiverID, String Relation, String IDType, String IDNo, String ExpiryDate, String SODate, int sysmodifier, String BranchCode, String series, String ZoneCode, Int32 type, Decimal balance, Decimal DormantCharge, String senderid, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderContactNo, int SenderIsSMS, String SenderBirthdate, String SenderBranchID, String ReceiverMLCardNO, String ReceiverFName, String ReceiverLName, String ReceiverMName, String ReceiverStreet, String ReceiverProvinceCity, String ReceiverCountry, String ReceiverGender, String ReceiverContactNo, String ReceiverBirthdate, String ORNo, Double ServiceCharge, Double version, String stationcode, Int32 remotezone, String RemoteBranchCode, String POBranchName)
    {
        try
        {
            if (Station.ToString().Equals("0"))
            {
                kplog.Fatal(KPTNNo + " - " + getRespMessage(13));
                return new PayoutResponse { respcode = 10, message = getRespMessage(13) };
            }
            if (!authenticate(Username, Password))
            {
                return new PayoutResponse { respcode = 7, message = getRespMessage(7) };
            }
            if (decodeKPTNDomesticKiosk(0, KPTNNo) == "4" || (!istablevalid(decodeKPTNDomesticKiosk(0, KPTNNo))))
            {
                kplog.Error(KPTNNo + " - Invalid KPTN number");
                return new PayoutResponse { respcode = 0, message = "Invalid KPTN number" };
            }

            PayoutResponse check = new PayoutResponse();
            check = checkifallowPO(BranchCode, Convert.ToInt32(ZoneCode), KPTNNo, ReceiverFName + " " + ReceiverMName + " " + ReceiverLName, SenderFName + " " + SenderMName + " " + SenderLName, Currency, Principal, OperatorID, false);
            if (check.respcode == 3)
                return new PayoutResponse { respcode = 0, message = check.message };

            dt = getServerDateDomesticKiosk(false);
            int sr = ConvertSeries(series);

            using (MySqlConnection checkinglang = dbconkiosk.getConnection())
            {
                checkinglang.Open();
                try
                {

                    using (command = checkinglang.CreateCommand())
                    {
                        String checkiftagasclaimed = "Select kptnno from " + generateTableNameDomesticKiosk(0, null) + " where kptnno=@kptn and isclaimed='1' and (sysmodified is not null or sysmodified!='' or sysmodified='0000-00-00 00:00:00')";
                        command.CommandTimeout = 0;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.CommandText = checkiftagasclaimed;
                        MySqlDataReader iftagisclaimeddr = command.ExecuteReader();
                        if (iftagisclaimeddr.HasRows)
                        {
                            iftagisclaimeddr.Close();
                            return new PayoutResponse { respcode = 0, message = "Transaction already claimed." };
                        }
                        iftagisclaimeddr.Close();

                        String checkifisclaimed = "Select kptnno from `kptransactions`.`payout` where kptnno=@kptn";
                        command.CommandTimeout = 0;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.CommandText = checkifisclaimed;
                        MySqlDataReader isclaimeddr = command.ExecuteReader();
                        if (isclaimeddr.HasRows)
                        {
                            isclaimeddr.Close();
                            String checkifPOcancelled = "SELECT kptnno FROM `kptransactions`.`pocancel` WHERE oldkptnno=@kptn";
                            command.CommandTimeout = 0;
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("kptn", KPTNNo);
                            command.CommandText = checkifPOcancelled;
                            MySqlDataReader iscancelleddr = command.ExecuteReader();
                            if (!iscancelleddr.HasRows)
                            {
                                iscancelleddr.Close();
                                return new PayoutResponse { respcode = 0, message = "Transaction already claimed." };
                            }
                            iscancelleddr.Close();
                        }
                        isclaimeddr.Close();

                        string checkifcontrolexist = "select controlno from " + generateTableNameDomesticKiosk(1, null) + " where controlno=@controlno";
                        command.CommandTimeout = 0;
                        command.CommandText = checkifcontrolexist;
                        command.Parameters.AddWithValue("controlno", ControlNo);
                        MySqlDataReader controlexistreader = command.ExecuteReader();
                        if (controlexistreader.HasRows)
                        {
                            controlexistreader.Close();
                            // Int32 maxontrans = 0;
                            string query101 = string.Empty;
                            string branchcode101 = string.Empty;
                            string zonecode101 = string.Empty;
                            string stationnum = string.Empty;
                            if (remotezone == 0)
                                zonecode101 = ZoneCode;
                            else
                                zonecode101 = remotezone.ToString();
                            if (IsRemote == 1)
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameDomesticKiosk(1, null) + " where remotebranch = @branchcode and stationid = @stationid and remotezonecode =@zonecode";
                                branchcode101 = RemoteBranch;
                                stationnum = "01";
                            }
                            else
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameDomesticKiosk(1, null) + " where branchcode = @branchcode and stationid = @stationid and zonecode=@zonecode";
                                branchcode101 = BranchCode;
                                stationnum = Station;
                            }

                            command.CommandText = query101;
                            command.Parameters.Clear();
                            string asss = IsRemote == 1 ? RemoteBranch : BranchCode;
                            string re = remotezone == 0 ? ZoneCode : Convert.ToString(remotezone);

                            string tab = generateTableNameDomestic(1, null);

                            command.Parameters.AddWithValue("branchcode", branchcode101);
                            command.Parameters.AddWithValue("stationid", Station);
                            command.Parameters.AddWithValue("zonecode", zonecode101);

                            MySqlDataReader controlmaxreader = command.ExecuteReader();
                            if (controlmaxreader.Read())
                            {
                                string asdf1111 = controlmaxreader["max1"].ToString();
                                sr = Convert.ToInt32(controlmaxreader["max1"].ToString()) + 1;
                            }

                            controlmaxreader.Close();

                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();

                            string st1 = IsRemote == 1 ? "01" : Station;
                            string bcode1 = IsRemote == 1 ? RemoteBranch : BranchCode;
                            Int32 rmotezone = remotezone == 0 ? Convert.ToInt32(ZoneCode) : remotezone;

                            command.Parameters.AddWithValue("st", stationnum);

                            command.Parameters.AddWithValue("bcode", branchcode101);
                            command.Parameters.AddWithValue("series", sr);
                            command.Parameters.AddWithValue("zcode", zonecode101);
                            command.Parameters.AddWithValue("tp", type);
                            int abc101 = command.ExecuteNonQuery();

                            //command.Dispose();
                            string value = "station: " + stationnum + "branchcode: " + branchcode101 + "sr: " + sr + "zonecode: " + zonecode101 + "type: " + type;
                            checkinglang.Close();
                            dbconkiosk.CloseConnection();
                            kplog.Error(KPTNNo + " - Problem saving transaction");
                            return new PayoutResponse { respcode = 101, message = "Problem saving transaction. Please close the payout window and try again." };
                            //iscontrolduplicate = true;
                        }
                    }
                }
                catch (Exception ex)
                {
                    checkinglang.Close();
                    dbconkiosk.CloseConnection();
                    kplog.Fatal(KPTNNo + " - " + ex.ToString());
                    return new PayoutResponse { respcode = 101, message = "Problem saving transaction. Please close the payout window and try again.", ErrorDetail = ex.ToString() };//message = "Problem saving transaction. Please close the payout window and try again.", ErrorDetail = ex.ToString() };
                }
                checkinglang.Close();
            }
            //
            //end of trapping for duplicate control
            //

            using (MySqlConnection conn = dbconkiosk.getConnection())
            {
                try
                {

                    conn.Open();

                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (command = conn.CreateCommand())
                    {

                        command.CommandText = "SET autocommit = 0;";
                        command.ExecuteNonQuery();

                        command.Transaction = trans;

                        String sBdate = (SenderBirthdate == String.Empty) ? null : Convert.ToDateTime(SenderBirthdate).ToString("yyyy-MM-dd");
                        String rBdate = (ReceiverBirthdate == String.Empty) ? null : Convert.ToDateTime(ReceiverBirthdate).ToString("yyyy-MM-dd");
                        String xPiry = (ExpiryDate == String.Empty) ? null : Convert.ToDateTime(ExpiryDate).ToString("yyyy-MM-dd");
                        String insert = "Insert into " + generateTableNameDomesticKiosk(1, null) + " (ControlNo, KPTNNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator,  Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, ClaimedDate, SODate, syscreated, BranchCode, ZoneCode, CustID, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS, SenderBirthdate, SenderBranchID, ReceiverMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, SOORNo, DormantCharge, ServiceCharge, RemoteZoneCode) values (@ControlNo, @KPTNNo, @OperatorID, @StationID, @IsRemote, @RemoteBranch, @RemoteOperatorID, @Reason, @SOBranch, @SOControlNo, @SOOperator, @Currency, @Principal, @SenderID, @ReceiverID, @Relation, @IDType, @IDNo, @ExpiryDate, now(), @SODate, @syscreated, @BranchCode, @ZoneCode, @CustID, @SenderMLCardNO, @SenderFName, @SenderLName, @SenderMName, @SenderName, @SenderStreet, @SenderProvinceCity, @SenderCountry, @SenderGender, @SenderContactNo, @SenderIsSMS, @SenderBirthdate, @SenderBranchID, @ReceiverMLCardNo, @ReceiverFName, @ReceiverLName, @ReceiverMName, @ReceiverName, @ReceiverStreet, @ReceiverProvinceCity, @ReceiverCountry, @ReceiverGender, @ReceiverContactNo, @ReceiverBirthdate, @SOORNo, @DormantCharge, @ServiceCharge, @remotezone)";
                        command.CommandText = insert;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("ControlNo", ControlNo);
                        command.Parameters.AddWithValue("KPTNNo", KPTNNo);
                        command.Parameters.AddWithValue("OperatorID", OperatorID);
                        command.Parameters.AddWithValue("StationID", Station);
                        command.Parameters.AddWithValue("IsRemote", IsRemote);
                        command.Parameters.AddWithValue("RemoteBranch", RemoteBranch);
                        command.Parameters.AddWithValue("RemoteOperatorID", RemoteOperatorID);
                        command.Parameters.AddWithValue("Reason", Reason);
                        command.Parameters.AddWithValue("SOBranch", SOBranch);
                        command.Parameters.AddWithValue("SOControlNo", SOControlNo);
                        command.Parameters.AddWithValue("SOOperator", SOOperator);
                        command.Parameters.AddWithValue("Currency", Currency);
                        command.Parameters.AddWithValue("Principal", Principal);
                        command.Parameters.AddWithValue("SenderID", SenderID);
                        command.Parameters.AddWithValue("ReceiverID", ReceiverID);
                        command.Parameters.AddWithValue("Relation", Relation);
                        command.Parameters.AddWithValue("IDType", IDType);
                        command.Parameters.AddWithValue("IDNo", IDNo);
                        command.Parameters.AddWithValue("ExpiryDate", (xPiry == String.Empty) ? null : xPiry);
                        command.Parameters.AddWithValue("SODate", Convert.ToDateTime(SODate).ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("BranchCode", BranchCode);
                        command.Parameters.AddWithValue("ZoneCode", ZoneCode);
                        command.Parameters.AddWithValue("Balance", balance);
                        command.Parameters.AddWithValue("DormantCharge", DormantCharge);
                        command.Parameters.AddWithValue("CustID", senderid);
                        command.Parameters.AddWithValue("SenderMLCardNO", SenderMLCardNO);
                        command.Parameters.AddWithValue("SenderFName", SenderFName);
                        command.Parameters.AddWithValue("SenderLName", SenderLName);
                        command.Parameters.AddWithValue("SenderMName", SenderMName);
                        command.Parameters.AddWithValue("SenderName", SenderLName + ", " + SenderFName + " " + SenderMName);
                        command.Parameters.AddWithValue("SenderStreet", SenderStreet);
                        command.Parameters.AddWithValue("SenderProvinceCity", SenderProvinceCity);
                        command.Parameters.AddWithValue("SenderCountry", SenderCountry);
                        command.Parameters.AddWithValue("SenderGender", SenderGender);
                        command.Parameters.AddWithValue("SenderContactNo", SenderContactNo);
                        command.Parameters.AddWithValue("SenderIsSMS", SenderIsSMS);
                        command.Parameters.AddWithValue("SenderBirthdate", sBdate);
                        command.Parameters.AddWithValue("SenderBranchID", SenderBranchID);
                        command.Parameters.AddWithValue("ReceiverMLCardNO", ReceiverMLCardNO);
                        command.Parameters.AddWithValue("ReceiverFName", ReceiverFName);
                        command.Parameters.AddWithValue("ReceiverLName", ReceiverLName);
                        command.Parameters.AddWithValue("ReceiverMName", ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverName", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverStreet", ReceiverStreet);
                        command.Parameters.AddWithValue("ReceiverProvinceCity", ReceiverProvinceCity);
                        command.Parameters.AddWithValue("ReceiverCountry", ReceiverCountry);
                        command.Parameters.AddWithValue("ReceiverGender", ReceiverGender);
                        command.Parameters.AddWithValue("ReceiverContactNo", ReceiverContactNo);
                        command.Parameters.AddWithValue("ReceiverBirthdate", rBdate);
                        command.Parameters.AddWithValue("SOORNo", ORNo);
                        command.Parameters.AddWithValue("ServiceCharge", ServiceCharge);
                        command.Parameters.AddWithValue("remotezone", remotezone);
                        command.ExecuteNonQuery();


                        command.CommandText = "update " + decodeKPTNDomesticKiosk(0, KPTNNo) + " set IsClaimed = 1, sysmodified = @modified, sysmodifier = @modifier where KPTNNo = @kptn";
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("modified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("modifier", sysmodifier);
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.ExecuteNonQuery();

                        if (IsRemote == 1)
                        {
                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("st", "01");
                            command.Parameters.AddWithValue("bcode", RemoteBranch);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", remotezone);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                        }
                        else
                        {
                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("st", Station);
                            command.Parameters.AddWithValue("bcode", BranchCode);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", ZoneCode);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                        }


                        command.Transaction = trans;

                        command.CommandText = "kpadminlogs.savelog53";
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("kptnno", KPTNNo);
                        command.Parameters.AddWithValue("action", "PAYOUT");
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("txndate", dt);
                        command.Parameters.AddWithValue("stationcode", stationcode);
                        command.Parameters.AddWithValue("stationno", Station);
                        command.Parameters.AddWithValue("zonecode", ZoneCode);
                        command.Parameters.AddWithValue("branchcode", BranchCode);
                        command.Parameters.AddWithValue("branchname", POBranchName);
                        command.Parameters.AddWithValue("operatorid", OperatorID);
                        command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                        command.Parameters.AddWithValue("remotereason", Reason);
                        command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                        command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                        command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                        command.Parameters.AddWithValue("remotezonecode", remotezone);
                        command.Parameters.AddWithValue("type", "N");
                        command.ExecuteNonQuery();

                        trans.Commit();
                        conn.Close();
                        kplog.Info(KPTNNo + " - Successfully Saved");
                        return new PayoutResponse { respcode = 1, message = getRespMessage(1), DateClaimed = dt };
                    }
                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(KPTNNo + " - " + ex.ToString());
                    Int32 respcode = 0;
                    if (ex.Number == 1062)
                    {
                        respcode = 3;
                        kplog.Error(KPTNNo + " - " + getRespMessage(3));
                    }

                    trans.Rollback();
                    dbconkiosk.CloseConnection();
                    return new PayoutResponse { respcode = respcode, message = getRespMessage(respcode) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
                }
            }
        }
        catch (Exception ex)
        {
            //trans.Rollback();
            kplog.Fatal(KPTNNo + " - " + ex.ToString());
            dbconkiosk.CloseConnection();
            return new PayoutResponse { respcode = 0, message = getRespMessage(0) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
        }
    }

    [WebMethod(BufferResponse = false)]
    public PayoutResponse payoutDomestic(String Username, String Password, String ControlNo, String KPTNNo, String OperatorID, String Station, int IsRemote, String RemoteBranch, String RemoteOperatorID, String Reason, String SOBranch, String SOControlNo, String SOOperator, String Currency, Decimal Principal, String SenderID, String ReceiverID, String Relation, String IDType, String IDNo, String ExpiryDate, String SODate, int sysmodifier, String BranchCode, String series, String ZoneCode, Int32 type, Decimal balance, Decimal DormantCharge, String senderid, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderContactNo, int SenderIsSMS, String SenderBirthdate, String SenderBranchID, String ReceiverMLCardNO, String ReceiverFName, String ReceiverLName, String ReceiverMName, String ReceiverStreet, String ReceiverProvinceCity, String ReceiverCountry, String ReceiverGender, String ReceiverContactNo, String ReceiverBirthdate, String ORNo, Double ServiceCharge, Double version, String stationcode, Int32 remotezone, String RemoteBranchCode, String POBranchName)
    {
        try
        {
            if (Station.ToString().Equals("0"))
            {
                kplog.Error(KPTNNo + " - " + getRespMessage(13));
                return new PayoutResponse { respcode = 10, message = getRespMessage(13) };
            }
            if (!authenticate(Username, Password))
            {
                return new PayoutResponse { respcode = 7, message = getRespMessage(7) };
            }
            if (KPTNNo != "")
            {
                if (KPTNNo.Substring(0, 3) == "ML1")
                {
                    return (PayoutResponse)payoutKIOSK(Username, Password, ControlNo, KPTNNo, OperatorID, Station, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator, Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, SODate, sysmodifier, BranchCode, series, ZoneCode, type, balance, DormantCharge, senderid, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS, SenderBirthdate, SenderBranchID, ReceiverMLCardNO, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ORNo, ServiceCharge, version, stationcode, remotezone, RemoteBranchCode, POBranchName);
                }
                if (KPTNNo.Substring(0, 3) == "MCD")
                {
                    try
                    {
                        CloudService.PayoutResponse resp = new CloudService.PayoutResponse();
                        CloudService.MLhuillier client = new CloudService.MLhuillier();

                        resp = client.payoutDomestic(Username, Password, ControlNo, KPTNNo, OperatorID, Station, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator, Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, SODate, sysmodifier, BranchCode, series, ZoneCode, type, balance, DormantCharge, senderid, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS, SenderBirthdate, SenderBranchID, ReceiverMLCardNO, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ORNo, ServiceCharge, version, stationcode, remotezone, RemoteBranchCode, POBranchName);
                        kplog.Info(KPTNNo + " - Cloud Response: " + resp.message + " | " + resp.ErrorDetail);
                        return new PayoutResponse { respcode = resp.respcode, message = resp.message, ErrorDetail = resp.ErrorDetail, DateClaimed = resp.DateClaimed };
                    }
                    catch (Exception ex)
                    {
                        kplog.Fatal(KPTNNo + " - Cloud catch: " + ex.ToString());
                        return new PayoutResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
                    }
                }
            }

            if (decodeKPTNDomestic(0, KPTNNo) == "4" || (!istablevalid(decodeKPTNDomestic(0, KPTNNo))))
            {
                kplog.Error(KPTNNo + " - Invalid KPTN number");
                return new PayoutResponse { respcode = 0, message = "Invalid KPTN number" };
            }

            PayoutResponse check = new PayoutResponse();
            check = checkifallowPO(BranchCode, Convert.ToInt32(ZoneCode), KPTNNo, ReceiverFName + " " + ReceiverMName + " " + ReceiverLName, SenderFName + " " + SenderMName + " " + SenderLName, Currency, Principal, OperatorID, false);
            if (check.respcode == 3)
                return new PayoutResponse { respcode = 0, message = check.message };

            dt = getServerDateDomestic(false);
            dtString = dt.ToString("yyyy-MM-dd HH:mm:ss");
            
            int sr = ConvertSeries(series);
            // bool iscontrolduplicate = false;
            using (MySqlConnection checkinglang = dbconDomestic.getConnection())
            {
                checkinglang.Open();
                try
                {
                    // MySqlCommand cmdchecking = new MySqlCommand();
                    using (command = checkinglang.CreateCommand())
                    {
                        String checkiftagasclaimed = "Select kptnno from " + generateTableNameDomestic(0, null) + " where kptnno=@kptn and isclaimed='1' and (sysmodified is not null or sysmodified!='' or sysmodified='0000-00-00 00:00:00')";
                        command.CommandTimeout = 0;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.CommandText = checkiftagasclaimed;
                        MySqlDataReader iftagisclaimeddr = command.ExecuteReader();
                        if (iftagisclaimeddr.HasRows)
                        {
                            iftagisclaimeddr.Close();
                            kplog.Info(KPTNNo + " - Transaction already claimed");
                            return new PayoutResponse { respcode = 0, message = "Transaction already claimed." };
                        }
                        iftagisclaimeddr.Close();

                        String checkifisclaimed = "Select kptnno,claimeddate from `kptransactions`.`payout` where kptnno=@kptn ORDER BY claimeddate DESC LIMIT 1";
                        command.CommandTimeout = 0;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.CommandText = checkifisclaimed;
                        MySqlDataReader isclaimeddr = command.ExecuteReader();
                        if (isclaimeddr.HasRows)
                        {
                            isclaimeddr.Read();
                            DateTime cdate = Convert.ToDateTime(isclaimeddr["claimeddate"]);
                            isclaimeddr.Close();
                            String checkifPOcancelled = "SELECT kptnno FROM `kptransactions`.`pocancel` WHERE oldkptnno=@kptn and claimeddate=@cdate";
                            command.CommandTimeout = 0;
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("kptn", KPTNNo);
                            command.Parameters.AddWithValue("cdate", cdate);
                            command.CommandText = checkifPOcancelled;
                            MySqlDataReader iscancelleddr = command.ExecuteReader();
                            if (!iscancelleddr.HasRows)
                            {
                                iscancelleddr.Close();
                                kplog.Info(KPTNNo + " - Transaction already claimed");
                                return new PayoutResponse { respcode = 0, message = "Transaction already claimed." };
                            }
                            iscancelleddr.Close();


                        }
                        isclaimeddr.Close();

                        string checkifcontrolexist = "select controlno from " + generateTableNameDomestic(1, null) + " where controlno=@controlno";
                        command.CommandTimeout = 0;
                        command.CommandText = checkifcontrolexist;
                        command.Parameters.AddWithValue("controlno", ControlNo);
                        MySqlDataReader controlexistreader = command.ExecuteReader();
                        if (controlexistreader.HasRows)
                        {
                            controlexistreader.Close();
                            // Int32 maxontrans = 0;
                            string query101 = string.Empty;
                            string branchcode101 = string.Empty;
                            string zonecode101 = string.Empty;
                            string stationnum = string.Empty;
                            if (remotezone == 0)
                                zonecode101 = ZoneCode;
                            else
                                zonecode101 = remotezone.ToString();
                            if (IsRemote == 1)
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameDomestic(1, null) + " where remotebranch = @branchcode and stationid = @stationid and remotezonecode =@zonecode";
                                branchcode101 = RemoteBranch;
                                stationnum = "01";
                            }
                            else
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameDomestic(1, null) + " where branchcode = @branchcode and stationid = @stationid and zonecode=@zonecode";
                                branchcode101 = BranchCode;
                                stationnum = Station;
                            }
                            // string getcontrolmax = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max from " + generateTableNameDomestic(1, null) + " where if(isremote=1,remotebranch,branchcode) = @branchcode and stationid = @stationid and if(remotezonecode=0 or remotezonecode is null, zonecode,remotezonecode) =@zonecode";
                            command.CommandText = query101;
                            command.Parameters.Clear();
                            string asss = IsRemote == 1 ? RemoteBranch : BranchCode;
                            string re = remotezone == 0 ? ZoneCode : Convert.ToString(remotezone);

                            string tab = generateTableNameDomestic(1, null);

                            //command.Parameters.AddWithValue("branchcode", IsRemote == 1 ? RemoteBranch : BranchCode);
                            command.Parameters.AddWithValue("branchcode", branchcode101);
                            command.Parameters.AddWithValue("stationid", Station);
                            command.Parameters.AddWithValue("zonecode", zonecode101);
                            //command.Parameters.AddWithValue("zonecode",  remotezone == 0 ? Convert.ToInt32(ZoneCode) : remotezone);
                            MySqlDataReader controlmaxreader = command.ExecuteReader();
                            if (controlmaxreader.Read())
                            {
                                string asdf1111 = controlmaxreader["max1"].ToString();
                                sr = Convert.ToInt32(controlmaxreader["max1"]) + 1;
                                //controlmaxreader.Close();
                            }

                            controlmaxreader.Close();

                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();

                            string st1 = IsRemote == 1 ? "01" : Station;
                            string bcode1 = IsRemote == 1 ? RemoteBranch : BranchCode;
                            Int32 rmotezone = remotezone == 0 ? Convert.ToInt32(ZoneCode) : remotezone;

                            command.Parameters.AddWithValue("st", stationnum);
                            //command.Parameters.AddWithValue("bcode", IsRemote == 1 ? RemoteBranch : BranchCode);
                            command.Parameters.AddWithValue("bcode", branchcode101);
                            command.Parameters.AddWithValue("series", sr);
                            // command.Parameters.AddWithValue("zcode", remotezone == 0 ? Convert.ToInt32(ZoneCode) : remotezone);
                            command.Parameters.AddWithValue("zcode", zonecode101);
                            command.Parameters.AddWithValue("tp", type);
                            int abc101 = command.ExecuteNonQuery();

                            //command.Dispose();
                            string value = "station: " + stationnum + "branchcode: " + branchcode101 + "sr: " + sr + "zonecode: " + zonecode101 + "type: " + type;
                            checkinglang.Close();
                            dbconDomestic.CloseConnection();
                            kplog.Error(KPTNNo + " - " + ControlNo + " - Problem saving transaction.");
                            return new PayoutResponse { respcode = 101, message = "Problem saving transaction. Please close the payout window and try again." };
                            //iscontrolduplicate = true;
                        }
                    }
                }
                catch (Exception ex)
                {
                    checkinglang.Close();
                    dbconDomestic.CloseConnection();
                    kplog.Fatal(KPTNNo + " - " + ex.ToString());
                    return new PayoutResponse { respcode = 101, message = "Problem saving transaction. Please close the payout window and try again.", ErrorDetail = ex.ToString() };//message = "Problem saving transaction. Please close the payout window and try again.", ErrorDetail = ex.ToString() };
                }
                checkinglang.Close();
            }
            //
            //end of trapping for duplicate control
            //

            using (MySqlConnection conn = dbconDomestic.getConnection())
            {
                try
                {
                    conn.Open();

                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (command = conn.CreateCommand())
                    {

                        command.CommandText = "SET autocommit = 0;";
                        command.ExecuteNonQuery();

                        command.Transaction = trans;
                        //var attempt = 0;
                        //do
                        //{
                        //    attempt++;
                        //    kplog.Info(KPTNNo + " - " + "Attempt count inserting MLPayout Database: " + attempt);
                        //    try
                        //    {
                        //dt = getServerDateDomestic(true);
                        String sBdate = (SenderBirthdate == String.Empty) ? null : Convert.ToDateTime(SenderBirthdate).ToString("yyyy-MM-dd");
                        String rBdate = (ReceiverBirthdate == String.Empty) ? null : Convert.ToDateTime(ReceiverBirthdate).ToString("yyyy-MM-dd");
                        String xPiry = (ExpiryDate == String.Empty) ? null : Convert.ToDateTime(ExpiryDate).ToString("yyyy-MM-dd");
                        //String insert = "Insert into "+ generateTableName(1) +" (ControlNo, KPTNNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator,  Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, ClaimedDate, SODate, syscreated, BranchCode, ZoneCode, Balance, DormantCharge) values (@ControlNo, @KPTNNo, @OperatorID, @StationID, @IsRemote, @RemoteBranch, @RemoteOperatorID, @Reason, @SOBranch, @SOControlNo, @SOOperator, @Currency, @Principal, @SenderID, @ReceiverID, @Relation, @IDType, @IDNo, @ExpiryDate, @ClaimedDate, @SODate, @syscreated, @BranchCode, @ZoneCode, @Balance, @DormantCharge)";
                        String insert = "Insert into " + generateTableNameDomestic(1, null) + " (ControlNo, KPTNNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator,  Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, ClaimedDate, SODate, syscreated, BranchCode, ZoneCode, CustID, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS, SenderBirthdate, SenderBranchID, ReceiverMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, SOORNo, DormantCharge, ServiceCharge, RemoteZoneCode) values (@ControlNo, @KPTNNo, @OperatorID, @StationID, @IsRemote, @RemoteBranch, @RemoteOperatorID, @Reason, @SOBranch, @SOControlNo, @SOOperator, @Currency, @Principal, @SenderID, @ReceiverID, @Relation, @IDType, @IDNo, @ExpiryDate, now(), @SODate, @syscreated, @BranchCode, @ZoneCode, @CustID, @SenderMLCardNO, @SenderFName, @SenderLName, @SenderMName, @SenderName, @SenderStreet, @SenderProvinceCity, @SenderCountry, @SenderGender, @SenderContactNo, @SenderIsSMS, @SenderBirthdate, @SenderBranchID, @ReceiverMLCardNo, @ReceiverFName, @ReceiverLName, @ReceiverMName, @ReceiverName, @ReceiverStreet, @ReceiverProvinceCity, @ReceiverCountry, @ReceiverGender, @ReceiverContactNo, @ReceiverBirthdate, @SOORNo, @DormantCharge, @ServiceCharge, @remotezone)";
                        command.CommandText = insert;
                        command.CommandType = CommandType.Text;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("ControlNo", ControlNo);
                        command.Parameters.AddWithValue("KPTNNo", KPTNNo);
                        command.Parameters.AddWithValue("OperatorID", OperatorID);
                        command.Parameters.AddWithValue("StationID", Station);
                        command.Parameters.AddWithValue("IsRemote", IsRemote);
                        command.Parameters.AddWithValue("RemoteBranch", RemoteBranch);
                        command.Parameters.AddWithValue("RemoteOperatorID", RemoteOperatorID);
                        command.Parameters.AddWithValue("Reason", Reason);
                        command.Parameters.AddWithValue("SOBranch", SOBranch);
                        command.Parameters.AddWithValue("SOControlNo", SOControlNo);
                        command.Parameters.AddWithValue("SOOperator", SOOperator);
                        command.Parameters.AddWithValue("Currency", Currency);
                        command.Parameters.AddWithValue("Principal", Principal);
                        command.Parameters.AddWithValue("SenderID", SenderID);
                        command.Parameters.AddWithValue("ReceiverID", ReceiverID);
                        command.Parameters.AddWithValue("Relation", Relation);
                        command.Parameters.AddWithValue("IDType", IDType);
                        command.Parameters.AddWithValue("IDNo", IDNo);
                        command.Parameters.AddWithValue("ExpiryDate", (xPiry == String.Empty) ? null : xPiry);
                        //command.Parameters.AddWithValue("ClaimedDate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("SODate", Convert.ToDateTime(SODate).ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("BranchCode", BranchCode);
                        command.Parameters.AddWithValue("ZoneCode", ZoneCode);
                        command.Parameters.AddWithValue("Balance", balance);
                        command.Parameters.AddWithValue("DormantCharge", DormantCharge);
                        command.Parameters.AddWithValue("CustID", senderid);
                        command.Parameters.AddWithValue("SenderMLCardNO", SenderMLCardNO);
                        command.Parameters.AddWithValue("SenderFName", SenderFName);
                        command.Parameters.AddWithValue("SenderLName", SenderLName);
                        command.Parameters.AddWithValue("SenderMName", SenderMName);
                        command.Parameters.AddWithValue("SenderName", SenderLName + ", " + SenderFName + " " + SenderMName);
                        command.Parameters.AddWithValue("SenderStreet", SenderStreet);
                        command.Parameters.AddWithValue("SenderProvinceCity", SenderProvinceCity);
                        command.Parameters.AddWithValue("SenderCountry", SenderCountry);
                        command.Parameters.AddWithValue("SenderGender", SenderGender);
                        command.Parameters.AddWithValue("SenderContactNo", SenderContactNo);
                        command.Parameters.AddWithValue("SenderIsSMS", SenderIsSMS);
                        command.Parameters.AddWithValue("SenderBirthdate", sBdate);
                        command.Parameters.AddWithValue("SenderBranchID", SenderBranchID);
                        command.Parameters.AddWithValue("ReceiverMLCardNO", ReceiverMLCardNO);
                        command.Parameters.AddWithValue("ReceiverFName", ReceiverFName);
                        command.Parameters.AddWithValue("ReceiverLName", ReceiverLName);
                        command.Parameters.AddWithValue("ReceiverMName", ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverName", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverStreet", ReceiverStreet);
                        command.Parameters.AddWithValue("ReceiverProvinceCity", ReceiverProvinceCity);
                        command.Parameters.AddWithValue("ReceiverCountry", ReceiverCountry);
                        command.Parameters.AddWithValue("ReceiverGender", ReceiverGender);
                        command.Parameters.AddWithValue("ReceiverContactNo", ReceiverContactNo);
                        command.Parameters.AddWithValue("ReceiverBirthdate", rBdate);
                        //command.Parameters.AddWithValue("kptn4", kptn4);
                        command.Parameters.AddWithValue("SOORNo", ORNo);
                        command.Parameters.AddWithValue("ServiceCharge", ServiceCharge);
                        command.Parameters.AddWithValue("remotezone", remotezone);
                        int pout = command.ExecuteNonQuery();


                        command.CommandText = "update " + decodeKPTNDomestic(0, KPTNNo) + " set IsClaimed = 1, sysmodified = @modified, sysmodifier = @modifier where KPTNNo = @kptn";
                        command.CommandType = CommandType.Text;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("modified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("modifier", sysmodifier);
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        int sout = command.ExecuteNonQuery();


                        //command.CommandText = "update " + generateTableName(2, null) + " set IsClaimed = 1, DateClaimed = @dtClaimed where KPTN6 = @kptn1 OR MLKP4TN = @kptn1";
                        //command.Parameters.AddWithValue("kptn1", KPTNNo);
                        //command.Parameters.AddWithValue("dtClaimed", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        //command.ExecuteNonQuery();

                        //command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and userid = @uid and zcode = @zcode and type = 1";
                        //command.Parameters.AddWithValue("bcode", BranchCode);
                        //command.Parameters.AddWithValue("uid", OperatorID);
                        //command.Parameters.AddWithValue("series", sr);
                        //command.Parameters.AddWithValue("zcode", ZoneCode);

                        //throw new Exception(IsRemote.ToString() + " " + series);
                        if (IsRemote == 1)
                        {
                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.CommandType = CommandType.Text;
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("st", "01");
                            command.Parameters.AddWithValue("bcode", RemoteBranch);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", remotezone);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                        }
                        else
                        {
                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.CommandType = CommandType.Text;
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("st", Station);
                            command.Parameters.AddWithValue("bcode", BranchCode);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", ZoneCode);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                        }


                        command.Transaction = trans;

                        command.CommandText = "kpadminlogs.savelog53";
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("kptnno", KPTNNo);
                        command.Parameters.AddWithValue("action", "PAYOUT");
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("txndate", dt);
                        command.Parameters.AddWithValue("stationcode", stationcode);
                        command.Parameters.AddWithValue("stationno", Station);
                        command.Parameters.AddWithValue("zonecode", ZoneCode);
                        command.Parameters.AddWithValue("branchcode", BranchCode);
                        command.Parameters.AddWithValue("branchname", POBranchName);
                        command.Parameters.AddWithValue("operatorid", OperatorID);
                        command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                        command.Parameters.AddWithValue("remotereason", Reason);
                        command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                        command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                        command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                        command.Parameters.AddWithValue("remotezonecode", remotezone);
                        command.Parameters.AddWithValue("type", "N");
                        int logs = command.ExecuteNonQuery();

                        if (pout < 1 || sout < 1 || logs < 1)
                        {
                            trans.Rollback();
                            conn.Close();
                            dbconDomestic.CloseConnection();
                            kplog.Info(KPTNNo + " - Failed in saving transaction. payoutinsertion: " + pout + " | updatingsendout: " + sout + " | savinglogs: " + logs);
                            return new PayoutResponse { respcode = 101, message = "Problem saving transaction. Please close the payout window and try again." };
                        }

                        trans.Commit();
                        conn.Close();
                        kplog.Info(KPTNNo + " - payoutinsertion: " + pout + " | updatingsendout: " + sout + " | savinglogs: " + logs);
                        kplog.Info(KPTNNo + " - Payout Successfully Saved");
                        return new PayoutResponse { respcode = 1, message = getRespMessage(1), DateClaimed = dt };

                        //} while (true);
                    }
                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(KPTNNo + " - " + ex.ToString());
                    Int32 respcode = 0;
                    //String message;
                    //throw new Exception(ex.ErrorCode.ToString());
                    if (ex.Number == 1062)
                    {
                        respcode = 3;
                        kplog.Error(KPTNNo + " - " + getRespMessage(3));
                    }
                    //if (ex.Message.Contains("Duplicate"))
                    //{
                    //    respcode = 3;
                    //}
                    trans.Rollback();
                    dbconDomestic.CloseConnection();
                    return new PayoutResponse { respcode = respcode, message = getRespMessage(respcode) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
                }
            }
        }
        catch (Exception ex)
        {
            //trans.Rollback();
            kplog.Fatal(KPTNNo + " - " + ex.ToString());
            dbconDomestic.CloseConnection();
            return new PayoutResponse { respcode = 0, message = getRespMessage(0) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
        }
    }

    [WebMethod(BufferResponse = false)]
    public PayoutResponse payoutWallet(String Username, String Password, String ControlNo, String KPTNNo, String OperatorID, String Station, int IsRemote, String RemoteBranch, String RemoteOperatorID, String Reason, String SOBranch, String SOControlNo, String SOOperator, String Currency, Decimal Principal, String SenderID, String ReceiverID, String Relation, String IDType, String IDNo, String ExpiryDate, String SODate, int sysmodifier, String BranchCode, String series, String ZoneCode, Int32 type, Decimal balance, Decimal DormantCharge, String senderid, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderContactNo, int SenderIsSMS, String SenderBirthdate, String SenderBranchID, String ReceiverMLCardNO, String ReceiverFName, String ReceiverLName, String ReceiverMName, String ReceiverStreet, String ReceiverProvinceCity, String ReceiverCountry, String ReceiverGender, String ReceiverContactNo, String ReceiverBirthdate, String ORNo, Double ServiceCharge, Double version, String stationcode, Int32 remotezone, String RemoteBranchCode, String POBranchName)
    {
        try
        {
            if (Station.ToString().Equals("0"))
            {
                kplog.Fatal(getRespMessage(13));
                return new PayoutResponse { respcode = 10, message = getRespMessage(13) };
            }
            if (!authenticate(Username, Password))
            {
                return new PayoutResponse { respcode = 7, message = getRespMessage(7) };
            }

            if (decodeKPTNWallet(0, KPTNNo) == "4" || (!istablevalid(decodeKPTNWallet(0, KPTNNo))))
            {
                return new PayoutResponse { respcode = 0, message = "Invalid KPTN number" };
            }

            //PayoutResponse check = new PayoutResponse();
            //check = checkifallowPO(BranchCode, Convert.ToInt32(ZoneCode));
            //if (check.respcode == 0)
            //    return new PayoutResponse { respcode = 0, ErrorDetail = check.ErrorDetail };

            dt = getServerDateDomestic(false);
            String getdate = dt.ToString("yyyy-MM-dd HH:mm:ss");
            int sr = ConvertSeries(series);
            using (MySqlConnection checkinglang = dbconDomestic.getConnection())
            {
                checkinglang.Open();
                try
                {
                    using (command = checkinglang.CreateCommand())
                    {

                        string checkifcontrolexist = "select controlno from " + generateTableNameDomestic(1, null) + " where controlno=@controlno";
                        command.CommandTimeout = 0;
                        command.CommandText = checkifcontrolexist;
                        command.Parameters.AddWithValue("controlno", ControlNo);
                        MySqlDataReader controlexistreader = command.ExecuteReader();
                        if (controlexistreader.HasRows)
                        {
                            controlexistreader.Close();
                            string query101 = string.Empty;
                            string branchcode101 = string.Empty;
                            string zonecode101 = string.Empty;
                            string stationnum = string.Empty;
                            if (remotezone == 0)
                                zonecode101 = ZoneCode;
                            else
                                zonecode101 = remotezone.ToString();
                            if (IsRemote == 1)
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameDomestic(1, null) + " where remotebranch = @branchcode and stationid = @stationid and remotezonecode =@zonecode";
                                branchcode101 = RemoteBranch;
                                stationnum = "01";
                            }
                            else
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameDomestic(1, null) + " where branchcode = @branchcode and stationid = @stationid and zonecode=@zonecode";
                                branchcode101 = BranchCode;
                                stationnum = Station;
                            }
                            command.CommandText = query101;
                            command.Parameters.Clear();
                            string asss = IsRemote == 1 ? RemoteBranch : BranchCode;
                            string re = remotezone == 0 ? ZoneCode : Convert.ToString(remotezone);

                            string tab = generateTableNameWallet(1, null);

                            command.Parameters.AddWithValue("branchcode", branchcode101);
                            command.Parameters.AddWithValue("stationid", Station);
                            command.Parameters.AddWithValue("zonecode", zonecode101);

                            MySqlDataReader controlmaxreader = command.ExecuteReader();
                            if (controlmaxreader.Read())
                            {
                                string asdf1111 = controlmaxreader["max1"].ToString();
                                sr = Convert.ToInt32(controlmaxreader["max1"].ToString()) + 1;
                            }

                            controlmaxreader.Close();

                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();

                            string st1 = IsRemote == 1 ? "01" : Station;
                            string bcode1 = IsRemote == 1 ? RemoteBranch : BranchCode;
                            Int32 rmotezone = remotezone == 0 ? Convert.ToInt32(ZoneCode) : remotezone;

                            command.Parameters.AddWithValue("st", stationnum);
                            command.Parameters.AddWithValue("bcode", branchcode101);
                            command.Parameters.AddWithValue("series", sr);
                            command.Parameters.AddWithValue("zcode", zonecode101);
                            command.Parameters.AddWithValue("tp", type);
                            int abc101 = command.ExecuteNonQuery();

                            string value = "station: " + stationnum + "branchcode: " + branchcode101 + "sr: " + sr + "zonecode: " + zonecode101 + "type: " + type;
                            checkinglang.Close();
                            dbconWallet.CloseConnection();
                            return new PayoutResponse { respcode = 101, message = "Problem saving transaction. Please close the payout window and try again." };
                        }
                    }
                }
                catch (Exception ex)
                {
                    checkinglang.Close();
                    dbconWallet.CloseConnection();
                    return new PayoutResponse { respcode = 101, message = "Problem saving transaction. Please close the payout window and try again.", ErrorDetail = ex.ToString() };//message = "Problem saving transaction. Please close the payout window and try again.", ErrorDetail = ex.ToString() };
                }
                checkinglang.Close();
            }

            using (MySqlConnection connW = dbconWallet.getConnection())
            {
                try
                {
                    connW.Open();
                    trans = connW.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (cmd = connW.CreateCommand())
                    {
                        cmd.CommandText = "update " + decodeKPTNWallet(0, KPTNNo) + " set IsClaimed = 1, sysmodified = @modified, sysmodifier = @modifier where KPTNNo = @kptn";
                        cmd.Parameters.Clear();
                        cmd.Parameters.AddWithValue("modified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        cmd.Parameters.AddWithValue("modifier", sysmodifier);
                        cmd.Parameters.AddWithValue("kptn", KPTNNo);
                        cmd.ExecuteNonQuery();

                        cmd.CommandText = "SET autocommit = 0;";
                        cmd.ExecuteNonQuery();

                        cmd.Transaction = trans;
                        String sBdate = (SenderBirthdate == String.Empty) ? null : Convert.ToDateTime(SenderBirthdate).ToString("yyyy-MM-dd");
                        String rBdate = (ReceiverBirthdate == String.Empty) ? null : Convert.ToDateTime(ReceiverBirthdate).ToString("yyyy-MM-dd");
                        String xPiry = (ExpiryDate == String.Empty) ? null : Convert.ToDateTime(ExpiryDate).ToString("yyyy-MM-dd");

                        String insert = "Insert into " + generateTableNameWallet(1, null) + " (ControlNo, KPTNNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator,  Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, ClaimedDate, SODate, syscreated, BranchCode, ZoneCode, CustID, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS, SenderBirthdate, SenderBranchID, ReceiverMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, SOORNo, DormantCharge, ServiceCharge, RemoteZoneCode) values (@ControlNo, @KPTNNo, @OperatorID, @StationID, @IsRemote, @RemoteBranch, @RemoteOperatorID, @Reason, @SOBranch, @SOControlNo, @SOOperator, @Currency, @Principal, @SenderID, @ReceiverID, @Relation, @IDType, @IDNo, @ExpiryDate, @claimeddate, @SODate, @syscreated, @BranchCode, @ZoneCode, @CustID, @SenderMLCardNO, @SenderFName, @SenderLName, @SenderMName, @SenderName, @SenderStreet, @SenderProvinceCity, @SenderCountry, @SenderGender, @SenderContactNo, @SenderIsSMS, @SenderBirthdate, @SenderBranchID, @ReceiverMLCardNo, @ReceiverFName, @ReceiverLName, @ReceiverMName, @ReceiverName, @ReceiverStreet, @ReceiverProvinceCity, @ReceiverCountry, @ReceiverGender, @ReceiverContactNo, @ReceiverBirthdate, @SOORNo, @DormantCharge, @ServiceCharge, @remotezone)";
                        //throw new Exception(insert);
                        cmd.CommandText = insert;
                        cmd.Parameters.Clear();
                        cmd.Parameters.AddWithValue("ControlNo", ControlNo);
                        cmd.Parameters.AddWithValue("KPTNNo", KPTNNo);
                        cmd.Parameters.AddWithValue("OperatorID", OperatorID);
                        cmd.Parameters.AddWithValue("StationID", Station);
                        cmd.Parameters.AddWithValue("IsRemote", IsRemote);
                        cmd.Parameters.AddWithValue("RemoteBranch", RemoteBranch);
                        cmd.Parameters.AddWithValue("RemoteOperatorID", RemoteOperatorID);
                        cmd.Parameters.AddWithValue("Reason", Reason);
                        cmd.Parameters.AddWithValue("SOBranch", SOBranch);
                        cmd.Parameters.AddWithValue("SOControlNo", SOControlNo);
                        cmd.Parameters.AddWithValue("SOOperator", SOOperator);
                        cmd.Parameters.AddWithValue("Currency", Currency);
                        cmd.Parameters.AddWithValue("Principal", Principal);
                        cmd.Parameters.AddWithValue("SenderID", SenderID);
                        cmd.Parameters.AddWithValue("ReceiverID", ReceiverID);
                        cmd.Parameters.AddWithValue("Relation", Relation);
                        cmd.Parameters.AddWithValue("IDType", IDType);
                        cmd.Parameters.AddWithValue("IDNo", IDNo);
                        cmd.Parameters.AddWithValue("ExpiryDate", (xPiry == String.Empty) ? null : xPiry);
                        //cmd.Parameters.AddWithValue("claimeddate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        cmd.Parameters.AddWithValue("claimeddate", getdate);
                        cmd.Parameters.AddWithValue("SODate", Convert.ToDateTime(SODate).ToString("yyyy-MM-dd HH:mm:ss"));
                        //cmd.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        cmd.Parameters.AddWithValue("syscreated", getdate);
                        cmd.Parameters.AddWithValue("BranchCode", BranchCode);
                        cmd.Parameters.AddWithValue("ZoneCode", ZoneCode);
                        cmd.Parameters.AddWithValue("Balance", balance);
                        cmd.Parameters.AddWithValue("DormantCharge", DormantCharge);
                        cmd.Parameters.AddWithValue("CustID", senderid);
                        cmd.Parameters.AddWithValue("SenderMLCardNO", SenderMLCardNO);
                        cmd.Parameters.AddWithValue("SenderFName", SenderFName);
                        cmd.Parameters.AddWithValue("SenderLName", SenderLName);
                        cmd.Parameters.AddWithValue("SenderMName", SenderMName);
                        cmd.Parameters.AddWithValue("SenderName", SenderLName + ", " + SenderFName + " " + SenderMName);
                        cmd.Parameters.AddWithValue("SenderStreet", SenderStreet);
                        cmd.Parameters.AddWithValue("SenderProvinceCity", SenderProvinceCity);
                        cmd.Parameters.AddWithValue("SenderCountry", SenderCountry);
                        cmd.Parameters.AddWithValue("SenderGender", SenderGender);
                        cmd.Parameters.AddWithValue("SenderContactNo", SenderContactNo);
                        cmd.Parameters.AddWithValue("SenderIsSMS", SenderIsSMS);
                        cmd.Parameters.AddWithValue("SenderBirthdate", sBdate);
                        cmd.Parameters.AddWithValue("SenderBranchID", SenderBranchID);
                        cmd.Parameters.AddWithValue("ReceiverMLCardNO", ReceiverMLCardNO);
                        cmd.Parameters.AddWithValue("ReceiverFName", ReceiverFName);
                        cmd.Parameters.AddWithValue("ReceiverLName", ReceiverLName);
                        cmd.Parameters.AddWithValue("ReceiverMName", ReceiverMName);
                        cmd.Parameters.AddWithValue("ReceiverName", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        cmd.Parameters.AddWithValue("ReceiverStreet", ReceiverStreet);
                        cmd.Parameters.AddWithValue("ReceiverProvinceCity", ReceiverProvinceCity);
                        cmd.Parameters.AddWithValue("ReceiverCountry", ReceiverCountry);
                        cmd.Parameters.AddWithValue("ReceiverGender", ReceiverGender);
                        cmd.Parameters.AddWithValue("ReceiverContactNo", ReceiverContactNo);
                        cmd.Parameters.AddWithValue("ReceiverBirthdate", rBdate);
                        cmd.Parameters.AddWithValue("SOORNo", ORNo);
                        cmd.Parameters.AddWithValue("ServiceCharge", ServiceCharge);
                        cmd.Parameters.AddWithValue("remotezone", remotezone);
                        cmd.ExecuteNonQuery();


                        //if (IsRemote == 1)
                        //{
                        //    cmd.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                        //    cmd.Parameters.Clear();
                        //    cmd.Parameters.AddWithValue("st", "01");
                        //    cmd.Parameters.AddWithValue("bcode", RemoteBranch);
                        //    cmd.Parameters.AddWithValue("series", sr + 1);
                        //    cmd.Parameters.AddWithValue("zcode", remotezone);
                        //    cmd.Parameters.AddWithValue("tp", type);
                        //    cmd.ExecuteNonQuery();
                        //}
                        //else
                        //{
                        //    cmd.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                        //    cmd.Parameters.Clear();
                        //    cmd.Parameters.AddWithValue("st", Station);
                        //    cmd.Parameters.AddWithValue("bcode", BranchCode);
                        //    cmd.Parameters.AddWithValue("series", sr + 1);
                        //    cmd.Parameters.AddWithValue("zcode", ZoneCode);
                        //    cmd.Parameters.AddWithValue("tp", type);
                        //    cmd.ExecuteNonQuery();
                        //}

                        cmd.Transaction = trans;

                        //cmd.CommandText = "kpadminlogs.savelog53";
                        //cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "INSERT INTO kpadminlogs.transactionlogs (kptnno,`action`,`isremote`,txndate,`stationcode`,stationno,zonecode,branchcode,branchname,operatorid,cancelledreason,remotereason,remotebranch,remoteoperator,oldkptnno,remotezonecode,`type`) VALUES (@kptnno,@action,@isremote,@txndate,@stationcode,@stationno,@zonecode,@branchcode,@branchname,@operatorid,@cancelledreason,@remotereason,@remotebranch,@remoteoperator,@oldkptnno,@remotezonecode,@type)";
                        cmd.Parameters.Clear();
                        cmd.Parameters.AddWithValue("kptnno", KPTNNo);
                        cmd.Parameters.AddWithValue("action", "PAYOUT");
                        cmd.Parameters.AddWithValue("isremote", IsRemote);
                        //cmd.Parameters.AddWithValue("txndate", dt);
                        cmd.Parameters.AddWithValue("txndate", getdate);
                        cmd.Parameters.AddWithValue("stationcode", stationcode);
                        cmd.Parameters.AddWithValue("stationno", Station);
                        cmd.Parameters.AddWithValue("zonecode", ZoneCode);
                        cmd.Parameters.AddWithValue("branchcode", BranchCode);
                        cmd.Parameters.AddWithValue("branchname", POBranchName);
                        cmd.Parameters.AddWithValue("operatorid", OperatorID);
                        cmd.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                        cmd.Parameters.AddWithValue("remotereason", Reason);
                        cmd.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                        cmd.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                        cmd.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                        cmd.Parameters.AddWithValue("remotezonecode", remotezone);
                        cmd.Parameters.AddWithValue("type", "N");
                        cmd.ExecuteNonQuery();

                        trans.Commit();
                    }
                    connW.Close();
                }
                catch (Exception ex)
                {
                    kplog.Fatal(ex.ToString());
                    dbconWallet.CloseConnection();
                    return new PayoutResponse { respcode = 0, message = getRespMessage(0) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
                }
            }

            using (MySqlConnection conn = dbconDomestic.getConnection())
            {
                try
                {

                    conn.Open();

                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (command = conn.CreateCommand())
                    {

                        command.CommandText = "SET autocommit = 0;";
                        command.ExecuteNonQuery();

                        command.Transaction = trans;
                        String sBdate = (SenderBirthdate == String.Empty) ? null : Convert.ToDateTime(SenderBirthdate).ToString("yyyy-MM-dd");
                        String rBdate = (ReceiverBirthdate == String.Empty) ? null : Convert.ToDateTime(ReceiverBirthdate).ToString("yyyy-MM-dd");
                        String xPiry = (ExpiryDate == String.Empty) ? null : Convert.ToDateTime(ExpiryDate).ToString("yyyy-MM-dd");
                        String insert = "Insert into " + generateTableNameDomestic(1, null) + " (ControlNo, KPTNNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator,  Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, ClaimedDate, SODate, syscreated, BranchCode, ZoneCode, CustID, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS, SenderBirthdate, SenderBranchID, ReceiverMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, SOORNo, DormantCharge, ServiceCharge, RemoteZoneCode) values (@ControlNo, @KPTNNo, @OperatorID, @StationID, @IsRemote, @RemoteBranch, @RemoteOperatorID, @Reason, @SOBranch, @SOControlNo, @SOOperator, @Currency, @Principal, @SenderID, @ReceiverID, @Relation, @IDType, @IDNo, @ExpiryDate, @claimeddate, @SODate, @syscreated, @BranchCode, @ZoneCode, @CustID, @SenderMLCardNO, @SenderFName, @SenderLName, @SenderMName, @SenderName, @SenderStreet, @SenderProvinceCity, @SenderCountry, @SenderGender, @SenderContactNo, @SenderIsSMS, @SenderBirthdate, @SenderBranchID, @ReceiverMLCardNo, @ReceiverFName, @ReceiverLName, @ReceiverMName, @ReceiverName, @ReceiverStreet, @ReceiverProvinceCity, @ReceiverCountry, @ReceiverGender, @ReceiverContactNo, @ReceiverBirthdate, @SOORNo, @DormantCharge, @ServiceCharge, @remotezone)";
                        command.CommandText = insert;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("ControlNo", ControlNo);
                        command.Parameters.AddWithValue("KPTNNo", KPTNNo);
                        command.Parameters.AddWithValue("OperatorID", OperatorID);
                        command.Parameters.AddWithValue("StationID", Station);
                        command.Parameters.AddWithValue("IsRemote", IsRemote);
                        command.Parameters.AddWithValue("RemoteBranch", RemoteBranch);
                        command.Parameters.AddWithValue("RemoteOperatorID", RemoteOperatorID);
                        command.Parameters.AddWithValue("Reason", Reason);
                        command.Parameters.AddWithValue("SOBranch", SOBranch);
                        command.Parameters.AddWithValue("SOControlNo", SOControlNo);
                        command.Parameters.AddWithValue("SOOperator", SOOperator);
                        command.Parameters.AddWithValue("Currency", Currency);
                        command.Parameters.AddWithValue("Principal", Principal);
                        command.Parameters.AddWithValue("SenderID", SenderID);
                        command.Parameters.AddWithValue("ReceiverID", ReceiverID);
                        command.Parameters.AddWithValue("Relation", Relation);
                        command.Parameters.AddWithValue("IDType", IDType);
                        command.Parameters.AddWithValue("IDNo", IDNo);
                        command.Parameters.AddWithValue("ExpiryDate", (xPiry == String.Empty) ? null : xPiry);
                        //command.Parameters.AddWithValue("claimeddate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("claimeddate", getdate);
                        command.Parameters.AddWithValue("SODate", Convert.ToDateTime(SODate).ToString("yyyy-MM-dd HH:mm:ss"));
                        //command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreated", getdate);
                        command.Parameters.AddWithValue("BranchCode", BranchCode);
                        command.Parameters.AddWithValue("ZoneCode", ZoneCode);
                        command.Parameters.AddWithValue("Balance", balance);
                        command.Parameters.AddWithValue("DormantCharge", DormantCharge);
                        command.Parameters.AddWithValue("CustID", senderid);
                        command.Parameters.AddWithValue("SenderMLCardNO", SenderMLCardNO);
                        command.Parameters.AddWithValue("SenderFName", SenderFName);
                        command.Parameters.AddWithValue("SenderLName", SenderLName);
                        command.Parameters.AddWithValue("SenderMName", SenderMName);
                        command.Parameters.AddWithValue("SenderName", SenderLName + ", " + SenderFName + " " + SenderMName);
                        command.Parameters.AddWithValue("SenderStreet", SenderStreet);
                        command.Parameters.AddWithValue("SenderProvinceCity", SenderProvinceCity);
                        command.Parameters.AddWithValue("SenderCountry", SenderCountry);
                        command.Parameters.AddWithValue("SenderGender", SenderGender);
                        command.Parameters.AddWithValue("SenderContactNo", SenderContactNo);
                        command.Parameters.AddWithValue("SenderIsSMS", SenderIsSMS);
                        command.Parameters.AddWithValue("SenderBirthdate", sBdate);
                        command.Parameters.AddWithValue("SenderBranchID", SenderBranchID);
                        command.Parameters.AddWithValue("ReceiverMLCardNO", ReceiverMLCardNO);
                        command.Parameters.AddWithValue("ReceiverFName", ReceiverFName);
                        command.Parameters.AddWithValue("ReceiverLName", ReceiverLName);
                        command.Parameters.AddWithValue("ReceiverMName", ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverName", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverStreet", ReceiverStreet);
                        command.Parameters.AddWithValue("ReceiverProvinceCity", ReceiverProvinceCity);
                        command.Parameters.AddWithValue("ReceiverCountry", ReceiverCountry);
                        command.Parameters.AddWithValue("ReceiverGender", ReceiverGender);
                        command.Parameters.AddWithValue("ReceiverContactNo", ReceiverContactNo);
                        command.Parameters.AddWithValue("ReceiverBirthdate", rBdate);
                        command.Parameters.AddWithValue("SOORNo", ORNo);
                        command.Parameters.AddWithValue("ServiceCharge", ServiceCharge);
                        command.Parameters.AddWithValue("remotezone", remotezone);
                        command.ExecuteNonQuery();


                        if (IsRemote == 1)
                        {
                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("st", "01");
                            command.Parameters.AddWithValue("bcode", RemoteBranch);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", remotezone);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                        }
                        else
                        {
                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("st", Station);
                            command.Parameters.AddWithValue("bcode", BranchCode);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", ZoneCode);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                        }


                        command.Transaction = trans;

                        command.CommandText = "kpadminlogs.savelog53";
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("kptnno", KPTNNo);
                        command.Parameters.AddWithValue("action", "PAYOUT");
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        //command.Parameters.AddWithValue("txndate", dt);
                        command.Parameters.AddWithValue("txndate", getdate);
                        command.Parameters.AddWithValue("stationcode", stationcode);
                        command.Parameters.AddWithValue("stationno", Station);
                        command.Parameters.AddWithValue("zonecode", ZoneCode);
                        command.Parameters.AddWithValue("branchcode", BranchCode);
                        command.Parameters.AddWithValue("branchname", POBranchName);
                        command.Parameters.AddWithValue("operatorid", OperatorID);
                        command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                        command.Parameters.AddWithValue("remotereason", Reason);
                        command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                        command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                        command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                        command.Parameters.AddWithValue("remotezonecode", remotezone);
                        command.Parameters.AddWithValue("type", "N");
                        command.ExecuteNonQuery();

                        trans.Commit();
                        conn.Close();

                        return new PayoutResponse { respcode = 1, message = getRespMessage(1), DateClaimed = dt };
                    }
                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(ex.ToString());
                    Int32 respcode = 0;
                    if (ex.Number == 1062)
                    {
                        respcode = 3;
                        kplog.Error(getRespMessage(3));
                    }
                    trans.Rollback();
                    dbconDomestic.CloseConnection();
                    return new PayoutResponse { respcode = respcode, message = getRespMessage(respcode) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            dbconDomestic.CloseConnection();
            return new PayoutResponse { respcode = 0, message = getRespMessage(0) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
        }
    }

    [WebMethod(BufferResponse = false)]
    public PayoutResponse payoutCancel(String Username, String Password, String ControlNo, String KPTNNo, String OperatorID, String Station, int IsRemote, String RemoteBranch, String RemoteOperatorID, String Reason, String SOBranch, String SOControlNo, String SOOperator, String Currency, Decimal Principal, String SenderID, String ReceiverID, String Relation, String IDType, String IDNo, String ExpiryDate, String SODate, int sysmodifier, String BranchCode, String series, String ZoneCode, Int32 type, Decimal balance, Decimal DormantCharge, String senderid, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderContactNo, int SenderIsSMS, String SenderBirthdate, String SenderBranchID, String ReceiverMLCardNO, String ReceiverFName, String ReceiverLName, String ReceiverMName, String ReceiverStreet, String ReceiverProvinceCity, String ReceiverCountry, String ReceiverGender, String ReceiverContactNo, String ReceiverBirthdate, String ORNo, Double version, String stationcode, String irno, String CancelReason, Double CancelCharge, int CancelledByStationID, int CancelledByZoneCode, String CancelledByBranchCode, String CancelledByOperatorID, String CancelledType)
    {
        if (Station.ToString().Equals("0"))
        {
            kplog.Fatal(getRespMessage(13));
            return new PayoutResponse { respcode = 10, message = getRespMessage(13) };
        }
        if (!authenticate(Username, Password))
        {
            return new PayoutResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new PayoutResponse { respcode = 10, message = getRespMessage(10) };
        //}
        try
        {
            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                try
                {

                    conn.Open();
                    int sr = ConvertSeries(series);
                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (command = conn.CreateCommand())
                    {
                        command.CommandText = "SET autocommit=0;";
                        command.ExecuteNonQuery();

                        command.Transaction = trans;
                        dt = getServerDateGlobal(true);
                        String sBdate = (SenderBirthdate == String.Empty) ? null : Convert.ToDateTime(SenderBirthdate).ToString("yyyy-MM-dd");
                        String rBdate = (ReceiverBirthdate == String.Empty) ? null : Convert.ToDateTime(ReceiverBirthdate).ToString("yyyy-MM-dd");
                        String xPiry = (ExpiryDate == String.Empty) ? null : Convert.ToDateTime(ExpiryDate).ToString("yyyy-MM-dd");
                        //String insert = "Insert into "+ generateTableName(1) +" (ControlNo, KPTNNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator,  Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, ClaimedDate, SODate, syscreated, BranchCode, ZoneCode, Balance, DormantCharge) values (@ControlNo, @KPTNNo, @OperatorID, @StationID, @IsRemote, @RemoteBranch, @RemoteOperatorID, @Reason, @SOBranch, @SOControlNo, @SOOperator, @Currency, @Principal, @SenderID, @ReceiverID, @Relation, @IDType, @IDNo, @ExpiryDate, @ClaimedDate, @SODate, @syscreated, @BranchCode, @ZoneCode, @Balance, @DormantCharge)";
                        String insert = "Insert into " + generateTableNameGlobal(1, null) + " (ControlNo, KPTNNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator,  Currency, Principal, SenderID, ReceiverID, Relation, IDType, IDNo, ExpiryDate, ClaimedDate, SODate, syscreated, BranchCode, ZoneCode, CustID, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS, SenderBirthdate, SenderBranchID, ReceiverMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, SOORNo, IRNo, CancelledDate, CancelledByOperatorID, CancelledByStationID,CancelledType, CancelledReason, CancelledCustCharge, CancelledByBranchCode ) values (@ControlNo, @KPTNNo, @OperatorID, @StationID, @IsRemote, @RemoteBranch, @RemoteOperatorID, @Reason, @SOBranch, @SOControlNo, @SOOperator, @Currency, @Principal, @SenderID, @ReceiverID, @Relation, @IDType, @IDNo, @ExpiryDate, @ClaimedDate, @SODate, @syscreated, @BranchCode, @ZoneCode, @CustID, @SenderMLCardNO, @SenderFName, @SenderLName, @SenderMName, @SenderName, @SenderStreet, @SenderProvinceCity, @SenderCountry, @SenderGender, @SenderContactNo, @SenderIsSMS, @SenderBirthdate, @SenderBranchID, @ReceiverMLCardNo, @ReceiverFName, @ReceiverLName, @ReceiverMName, @ReceiverName, @ReceiverStreet, @ReceiverProvinceCity, @ReceiverCountry, @ReceiverGender, @ReceiverContactNo, @ReceiverBirthdate, @SOORNo, @IRNo, NOW(), @CancelledByOperatorID,@ CancelledByStationID, @CancelledType, @CancelledReason, @CancelledCustCharge, @CancelledByBranchCode )";
                        command.CommandText = insert;

                        command.Parameters.AddWithValue("ControlNo", ControlNo);
                        command.Parameters.AddWithValue("KPTNNo", KPTNNo);
                        command.Parameters.AddWithValue("OperatorID", OperatorID);
                        command.Parameters.AddWithValue("StationID", Station);
                        command.Parameters.AddWithValue("IsRemote", IsRemote);
                        command.Parameters.AddWithValue("RemoteBranch", RemoteBranch);
                        command.Parameters.AddWithValue("RemoteOperatorID", RemoteOperatorID);
                        command.Parameters.AddWithValue("Reason", Reason);
                        command.Parameters.AddWithValue("SOBranch", SOBranch);
                        command.Parameters.AddWithValue("SOControlNo", SOControlNo);
                        command.Parameters.AddWithValue("SOOperator", SOOperator);
                        command.Parameters.AddWithValue("Currency", Currency);
                        command.Parameters.AddWithValue("Principal", Principal);
                        command.Parameters.AddWithValue("SenderID", SenderID);
                        command.Parameters.AddWithValue("ReceiverID", ReceiverID);
                        command.Parameters.AddWithValue("Relation", Relation);
                        command.Parameters.AddWithValue("IDType", IDType);
                        command.Parameters.AddWithValue("IDNo", IDNo);
                        command.Parameters.AddWithValue("ExpiryDate", (xPiry == String.Empty) ? null : xPiry);
                        command.Parameters.AddWithValue("ClaimedDate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("SODate", Convert.ToDateTime(SODate).ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("BranchCode", BranchCode);
                        command.Parameters.AddWithValue("ZoneCode", ZoneCode);
                        command.Parameters.AddWithValue("Balance", balance);
                        command.Parameters.AddWithValue("DormantCharge", DormantCharge);
                        command.Parameters.AddWithValue("CustID", senderid);
                        command.Parameters.AddWithValue("SenderMLCardNO", SenderMLCardNO);
                        command.Parameters.AddWithValue("SenderFName", SenderFName);
                        command.Parameters.AddWithValue("SenderLName", SenderLName);
                        command.Parameters.AddWithValue("SenderMName", SenderMName);
                        command.Parameters.AddWithValue("SenderName", SenderLName + ", " + SenderFName + " " + SenderMName);
                        command.Parameters.AddWithValue("SenderStreet", SenderStreet);
                        command.Parameters.AddWithValue("SenderProvinceCity", SenderProvinceCity);
                        command.Parameters.AddWithValue("SenderCountry", SenderCountry);
                        command.Parameters.AddWithValue("SenderGender", SenderGender);
                        command.Parameters.AddWithValue("SenderContactNo", SenderContactNo);
                        command.Parameters.AddWithValue("SenderIsSMS", SenderIsSMS);
                        command.Parameters.AddWithValue("SenderBirthdate", sBdate);
                        command.Parameters.AddWithValue("SenderBranchID", SenderBranchID);
                        command.Parameters.AddWithValue("ReceiverMLCardNO", ReceiverMLCardNO);
                        command.Parameters.AddWithValue("ReceiverFName", ReceiverFName);
                        command.Parameters.AddWithValue("ReceiverLName", ReceiverLName);
                        command.Parameters.AddWithValue("ReceiverMName", ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverName", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverStreet", ReceiverStreet);
                        command.Parameters.AddWithValue("ReceiverProvinceCity", ReceiverProvinceCity);
                        command.Parameters.AddWithValue("ReceiverCountry", ReceiverCountry);
                        command.Parameters.AddWithValue("ReceiverGender", ReceiverGender);
                        command.Parameters.AddWithValue("ReceiverContactNo", ReceiverContactNo);
                        command.Parameters.AddWithValue("ReceiverBirthdate", rBdate);
                        //command.Parameters.AddWithValue("kptn4", kptn4);
                        command.Parameters.AddWithValue("SOORNo", ORNo);
                        command.Parameters.AddWithValue("IRNo", irno);
                        command.Parameters.AddWithValue("CancelledByOperatorID", CancelledByOperatorID);
                        command.Parameters.AddWithValue("CancelledByStationID", CancelledByStationID);
                        command.Parameters.AddWithValue("CancelledType", CancelledType);
                        command.Parameters.AddWithValue("CancelledReason", CancelReason);
                        command.Parameters.AddWithValue("CancelledCustCharge", CancelCharge);
                        command.Parameters.AddWithValue("CancelledByBranchCode", CancelledByBranchCode);

                        command.ExecuteNonQuery();


                        command.CommandText = "update " + generateTableNameGlobal(0, null) + " set IsClaimed = 1, sysmodified = @modified, sysmodifier = @modifier where KPTNNo = @kptn";
                        command.Parameters.AddWithValue("modified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("modifier", sysmodifier);
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.ExecuteNonQuery();


                        command.CommandText = "update " + generateTableNameGlobal(2, null) + " set IsClaimed = 1, DateClaimed = @dtClaimed where KPTN6 = @kptn1 OR MLKP4TN = @kptn1";
                        command.Parameters.AddWithValue("kptn1", KPTNNo);
                        command.Parameters.AddWithValue("dtClaimed", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.ExecuteNonQuery();

                        //command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and userid = @uid and zcode = @zcode and type = 1";
                        //command.Parameters.AddWithValue("bcode", BranchCode);
                        //command.Parameters.AddWithValue("uid", OperatorID);
                        //command.Parameters.AddWithValue("series", sr);
                        //command.Parameters.AddWithValue("zcode", ZoneCode);

                        //throw new Exception(IsRemote.ToString() + " " + series);
                        if (IsRemote == 1)
                        {
                            command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.AddWithValue("st", "01");
                            command.Parameters.AddWithValue("bcode", RemoteBranch);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", ZoneCode);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                        }
                        else
                        {
                            command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.AddWithValue("st", Station);
                            command.Parameters.AddWithValue("bcode", BranchCode);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", ZoneCode);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                        }


                        trans.Commit();
                        conn.Close();

                        return new PayoutResponse { respcode = 1, message = getRespMessage(1), DateClaimed = dt };
                    }
                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(ex.ToString());
                    Int32 respcode = 0;
                    //String message;
                    //throw new Exception(ex.ErrorCode.ToString());
                    if (ex.Message.Contains("Duplicate"))
                    {
                        respcode = 3;
                        kplog.Fatal(getRespMessage(3));
                    }
                    trans.Rollback();
                    dbconGlobal.CloseConnection();
                    return new PayoutResponse { respcode = respcode, message = getRespMessage(respcode), ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            //trans.Rollback();
            dbconGlobal.CloseConnection();
            return new PayoutResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
        }


    }


    [WebMethod]
    public ChargeResponse getPromoListDomestic(String Username, String Password)
    {
        if (!authenticate(Username, Password))
        {
            return new ChargeResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ChargeResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconDomestic.getConnection())
        {
            try
            {

                using (command = conn.CreateCommand())
                {

                    DateTime NullDate = DateTime.MinValue;

                    Decimal dec = 0;
                    conn.Open();
                    trans = conn.BeginTransaction();

                    try
                    {
                        String query = "select promoname, effectivedate, expirydate, NOW() as now from kpforms.promoratesheader WHERE DATE_FORMAT(NOW(),'%Y-%m-%d') <= DATE_FORMAT(expirydate,'%Y-%m-%d') order by effectivedate;";

                        command.CommandText = query;
                        //List<string> promos = new List<string>();

                        MySqlDataReader ReaderCount = command.ExecuteReader();
                        int arraysize = 0;
                        if (ReaderCount.HasRows)
                        {
                            while (ReaderCount.Read())
                            {
                                arraysize = arraysize + 1;
                            }
                            ReaderCount.Close();
                            MySqlDataReader Reader = command.ExecuteReader();
                            PromoList[] promoList = new PromoList[arraysize];
                            int arrayCounter = 0;

                            while (Reader.Read())
                            {
                                promoList[arrayCounter] = new PromoList { promoName = Reader["promoname"].ToString(), effectiveDate = Reader["effectivedate"].ToString(), expiryDate = Reader["expirydate"].ToString(), active = verifyValidity(Convert.ToDateTime(Reader["now"]), Convert.ToDateTime(Reader["expirydate"])) };
                                arrayCounter = arrayCounter + 1;
                            }

                            Reader.Close();
                            conn.Close();
                            //throw new Exception(arrayCounter.ToString());
                            return new ChargeResponse { respcode = 1, message = getRespMessage(1), promos = promoList };
                        }
                        else
                        {
                            ReaderCount.Close();
                            conn.Close();
                            return new ChargeResponse { respcode = 16, message = "No promo available.", charge = dec };
                        }
                        //trans.Commit();

                        //return new ChargeResponse { respcode = 1, message = getRespMessage(1), charge = dec };
                    }
                    catch (MySqlException mex)
                    {
                        trans.Rollback();
                        conn.Close();
                        kplog.Fatal(mex.ToString());
                        return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = mex.ToString() };
                    }
                }

            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                trans.Rollback();
                conn.Close();
                return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
    }


    [WebMethod]
    public ChargeResponse getPromoChargeDomestic(String Username, String Password, String promoname, Decimal promoamount)
    {
        if (!authenticate(Username, Password))
        {
            return new ChargeResponse { respcode = 7, message = getRespMessage(7) };
        }
        dt = getServerDateDomestic(false);
        String datenow = dt.ToString("ddMM");
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ChargeResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconDomestic.getConnection())
        {
            try
            {

                using (command = conn.CreateCommand())
                {

                    DateTime NullDate = DateTime.MinValue;

                    Decimal dec = 0;
                    conn.Open();
                    //trans = conn.BeginTransaction();

                    try
                    {
                        String query = "select currid from kpforms.promoratesheader where promoname = @promoname;";
                        command.CommandText = query;
                        command.Parameters.AddWithValue("promoname", promoname);


                        //List<string> promos = new List<string>();

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            // int arraysize = 0;
                            if (reader.HasRows)
                            {
                                reader.Read();
                                Int32 currid = Convert.ToInt32(reader["currid"]);
                                reader.Close();
                                String queryRates = "SELECT ChargeValue AS charge FROM kpforms.promoratescharges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                                command.CommandText = queryRates;

                                command.Parameters.AddWithValue("type", currid);
                                command.Parameters.AddWithValue("amount", promoamount);
                                using (MySqlDataReader readerCharges = command.ExecuteReader())
                                {
                                    if (readerCharges.HasRows)
                                    {
                                        readerCharges.Read();

                                        decimal charge = Convert.ToDecimal(readerCharges["charge"]);

                                        readerCharges.Close();
                                        conn.Close();
                                        return new ChargeResponse { respcode = 1, message = getRespMessage(1), charge = charge };
                                    }
                                    else
                                    {
                                        readerCharges.Close();
                                        conn.Close();
                                        return new ChargeResponse { respcode = 0, message = "No rates found." };
                                    }

                                }
                                //conn.Close();
                                //throw new Exception(arrayCounter.ToString());
                            }
                            else
                            {
                                reader.Close();
                                conn.Close();
                                return new ChargeResponse { respcode = 16, message = "Promo not found.", charge = dec };
                            }
                        }
                        //trans.Commit();

                        //return new ChargeResponse { respcode = 1, message = getRespMessage(1), charge = dec };
                    }
                    catch (MySqlException mex)
                    {
                        kplog.Fatal(mex.ToString());
                        //trans.Rollback();
                        conn.Close();
                        return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = mex.ToString() };
                    }
                }

            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                //trans.Rollback();
                conn.Close();
                return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
    }


    [WebMethod]
    public ChargeResponse calculateChargePerBranchDomestic(String Username, String Password, Double amount, String bcode, String zcode, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new ChargeResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ChargeResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconDomestic.getConnection())
        {
            try
            {
                using (command = conn.CreateCommand())
                {

                    DateTime NullDate = DateTime.MinValue;

                    Decimal dec = 0;
                    conn.Open();
                    trans = conn.BeginTransaction();

                    try
                    {
                        String query = "SELECT nextID,currID,nDateEffectivity,cDateEffectivity,cEffective,nextID, NOW() as currentDate FROM kpforms.ratesperbranchheader WHERE cEffective = 1 and branchcode = @bcode and zonecode = @zcode;";

                        command.CommandText = query;
                        command.Parameters.AddWithValue("bcode", bcode);
                        command.Parameters.AddWithValue("zcode", zcode);
                        MySqlDataReader Reader = command.ExecuteReader();

                        if (Reader.Read())
                        {
                            Int32 nextID = Convert.ToInt32(Reader["nextID"]);
                            Int32 type = Convert.ToInt32(Reader["currID"]);
                            //String ndate = (Reader["nDateEffectivity"].ToString().StartsWith("0")) ? null : Convert.ToDateTime(Reader["nDateEffectivity"]).ToString();
                            DateTime nDateEffectivity = (Reader["nDateEffectivity"].ToString().StartsWith("0")) ? NullDate : Convert.ToDateTime(Reader["nDateEffectivity"]);
                            DateTime currentDate = Convert.ToDateTime(Reader["currentDate"]);
                            //throw new Exception(nDateEffectivity.ToString());
                            if (nextID == 0)
                            {
                                Reader.Close();
                                String queryRates = "SELECT ChargeValue AS charge FROM kpforms.ratesperbranchcharges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                                command.CommandText = queryRates;
                                command.Parameters.AddWithValue("amount", amount);
                                command.Parameters.AddWithValue("type", type);

                                MySqlDataReader ReaderRates = command.ExecuteReader();
                                if (ReaderRates.Read())
                                {
                                    dec = (Decimal)ReaderRates["charge"];
                                    ReaderRates.Close();
                                }
                            }
                            else
                            {
                                Reader.Close();

                                int result = DateTime.Compare(nDateEffectivity, currentDate);

                                if (result < 0)
                                {

                                    //ReaderNextRates.Close();
                                    //UPDATE ANG TABLE EFFECTIVE
                                    // 0 = pending, 1 = current chage, 2 = unused

                                    //try
                                    //{
                                    command.Transaction = trans;
                                    command.Parameters.Clear();
                                    String updateRates = "update kpforms.ratesperbranchheader SET  cEffective = 2 where cEffective = 1 and branchcode = @bcode and zonecode = @zcode";
                                    command.CommandText = updateRates;
                                    command.Parameters.AddWithValue("bcode", bcode);
                                    command.Parameters.AddWithValue("zcode", zcode);
                                    command.ExecuteNonQuery();

                                    command.Parameters.Clear();
                                    String updateRates1 = "update kpforms.ratesperbranchheader SET cEffective = 1 where currID = @curr and branchcode = @bcode and zonecode = @zcode";
                                    command.CommandText = updateRates1;
                                    command.Parameters.AddWithValue("curr", nextID);
                                    command.Parameters.AddWithValue("bcode", bcode);
                                    command.Parameters.AddWithValue("zcode", zcode);
                                    command.ExecuteNonQuery();

                                    command.Parameters.Clear();
                                    String insertLog = "insert into kpadminlogs.kpratesupdatelogs (ModifiedRatesID, NewRatesID, DateModified, Modifier) values (@ModifiedRatesID, @NewRatesID, NOW(), @Modifier);";
                                    command.CommandText = insertLog;
                                    command.Parameters.AddWithValue("ModifiedRatesID", nextID - 1);
                                    command.Parameters.AddWithValue("NewRatesID", nextID);
                                    command.Parameters.AddWithValue("Modifier", "boskpws");
                                    command.ExecuteNonQuery();

                                    trans.Commit();

                                    //}catch(MySqlException ex){
                                    //    //trans.Rollback();
                                    //    Reader.Close();

                                    //    throw new Exception(ex.ToString());
                                    //}

                                    command.Parameters.Clear();
                                    String queryRates = "SELECT ChargeValue AS charge FROM kpforms.ratesperbranchcharges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                                    command.CommandText = queryRates;
                                    command.Parameters.AddWithValue("amount", amount);
                                    command.Parameters.AddWithValue("type", nextID);

                                    MySqlDataReader ReaderRates = command.ExecuteReader();
                                    if (ReaderRates.Read())
                                    {
                                        //ReaderRates.Read();
                                        dec = (Decimal)ReaderRates["charge"];
                                        ReaderRates.Close();
                                    }
                                }
                                else
                                {
                                    //ReaderNextRates.Close();


                                    command.Parameters.Clear();
                                    String queryRates = "SELECT ChargeValue AS charge FROM kpforms.ratesperbranchcharges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                                    command.CommandText = queryRates;
                                    command.Parameters.AddWithValue("amount", amount);
                                    command.Parameters.AddWithValue("type", type);

                                    MySqlDataReader ReaderRates = command.ExecuteReader();
                                    if (ReaderRates.Read())
                                    {
                                        //ReaderRates.Read();
                                        dec = (Decimal)ReaderRates["charge"];
                                        ReaderRates.Close();
                                    }
                                }
                            }


                        }
                        else
                        {
                            kplog.Error(getRespMessage(16) + " - bcode-zcode: " + bcode + " - " + zcode);
                            Reader.Close();
                            conn.Close();
                            return new ChargeResponse { respcode = 16, message = getRespMessage(16), charge = dec };
                        }
                        //trans.Commit();
                        conn.Close();
                        return new ChargeResponse { respcode = 1, message = getRespMessage(1), charge = dec };
                    }
                    catch (MySqlException mex)
                    {
                        kplog.Fatal("bcode-zcode-amt: " + bcode + " - " + zcode + " - " + amount.ToString() + " - " + mex.ToString());
                        trans.Rollback();
                        conn.Close();
                        return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = mex.ToString() };
                    }
                }

            }
            catch (Exception ex)
            {
                kplog.Fatal("bcode-zcode-amt: " + bcode + " - " + zcode + " - " + amount.ToString() + " - " + ex.ToString());
                trans.Rollback();
                conn.Close();
                return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
    }

    [WebMethod]
    public ChargeResponse calculateChargeDomestic(String Username, String Password, Double amount, String bcode, String zcode, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new ChargeResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ChargeResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconDomestic.getConnection())
        {
            try
            {
                using (command = conn.CreateCommand())
                {

                    DateTime NullDate = DateTime.MinValue;

                    Decimal dec = 0;
                    conn.Open();
                    trans = conn.BeginTransaction();

                    try
                    {
                        String query = "SELECT nextID,currID,nDateEffectivity,cDateEffectivity,cEffective,nextID, NOW() as currentDate FROM kpforms.headercharges WHERE cEffective = 1;";

                        command.CommandText = query;
                        MySqlDataReader Reader = command.ExecuteReader();

                        if (Reader.Read())
                        {
                            Int32 nextID = Convert.ToInt32(Reader["nextID"]);
                            Int32 type = Convert.ToInt32(Reader["currID"]);
                            //String ndate = (Reader["nDateEffectivity"].ToString().StartsWith("0")) ? null : Convert.ToDateTime(Reader["nDateEffectivity"]).ToString();
                            DateTime nDateEffectivity = (Reader["nDateEffectivity"].ToString().StartsWith("0")) ? NullDate : Convert.ToDateTime(Reader["nDateEffectivity"]);
                            DateTime currentDate = Convert.ToDateTime(Reader["currentDate"]);
                            //throw new Exception(nDateEffectivity.ToString());
                            if (nextID == 0)
                            {
                                Reader.Close();
                                String queryRates = "SELECT ChargeValue AS charge FROM kpforms.charges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                                command.CommandText = queryRates;
                                command.Parameters.AddWithValue("amount", amount);
                                command.Parameters.AddWithValue("type", type);

                                MySqlDataReader ReaderRates = command.ExecuteReader();
                                if (ReaderRates.Read())
                                {
                                    dec = (Decimal)ReaderRates["charge"];
                                    ReaderRates.Close();
                                }
                            }
                            else
                            {
                                Reader.Close();

                                int result = DateTime.Compare(nDateEffectivity, currentDate);

                                if (result < 0)
                                {
                                    command.Transaction = trans;
                                    command.Parameters.Clear();
                                    String updateRates = "update kpforms.headercharges SET  cEffective = 2 where cEffective = 1";
                                    command.CommandText = updateRates;
                                    command.ExecuteNonQuery();

                                    command.Parameters.Clear();
                                    String updateRates1 = "update kpforms.headercharges SET cEffective = 1 where currID = @curr";
                                    command.CommandText = updateRates1;
                                    command.Parameters.AddWithValue("curr", nextID);
                                    command.ExecuteNonQuery();

                                    command.Parameters.Clear();
                                    String insertLog = "insert into kpadminlogs.kpratesupdatelogs (ModifiedRatesID, NewRatesID, DateModified, Modifier) values (@ModifiedRatesID, @NewRatesID, NOW(), @Modifier);";
                                    command.CommandText = insertLog;
                                    command.Parameters.AddWithValue("ModifiedRatesID", nextID - 1);
                                    command.Parameters.AddWithValue("NewRatesID", nextID);
                                    command.Parameters.AddWithValue("Modifier", "boskpws");
                                    command.ExecuteNonQuery();
                                    trans.Commit();
                                    //}catch(MySqlException ex){
                                    //    //trans.Rollback();
                                    //    Reader.Close();

                                    //    throw new Exception(ex.ToString());
                                    //}

                                    command.Parameters.Clear();
                                    String queryRates = "SELECT ChargeValue AS charge FROM kpforms.charges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                                    command.CommandText = queryRates;
                                    command.Parameters.AddWithValue("amount", amount);
                                    command.Parameters.AddWithValue("type", nextID);

                                    MySqlDataReader ReaderRates = command.ExecuteReader();
                                    if (ReaderRates.Read())
                                    {
                                        //ReaderRates.Read();
                                        dec = (Decimal)ReaderRates["charge"];
                                        ReaderRates.Close();
                                    }
                                }
                                else
                                {
                                    //ReaderNextRates.Close();


                                    command.Parameters.Clear();
                                    String queryRates = "SELECT ChargeValue AS charge FROM kpforms.charges WHERE ROUND(@amount,2) BETWEEN MinAmount AND MaxAmount AND `type` = @type;";
                                    command.CommandText = queryRates;
                                    command.Parameters.AddWithValue("amount", amount);
                                    command.Parameters.AddWithValue("type", type);

                                    MySqlDataReader ReaderRates = command.ExecuteReader();
                                    if (ReaderRates.Read())
                                    {
                                        //ReaderRates.Read();
                                        dec = (Decimal)ReaderRates["charge"];
                                        ReaderRates.Close();
                                    }
                                }
                            }


                        }
                        //trans.Commit();
                        conn.Close();
                        return new ChargeResponse { respcode = 1, message = getRespMessage(1), charge = dec };


                    }
                    catch (MySqlException mex)
                    {
                        kplog.Fatal("bcode-zcode-amt: " + bcode + " - " + zcode + " - " + amount.ToString() + " - " + mex.ToString());
                        trans.Rollback();
                        conn.Close();
                        return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = mex.ToString() };
                    }
                }

            }
            catch (Exception ex)
            {
                kplog.Fatal("bcode-zcode-amt: " + bcode + " - " + zcode + " - " + amount.ToString() + " - " + ex.ToString());
                trans.Rollback();
                conn.Close();
                return new ChargeResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
    }


    [WebMethod(BufferResponse = false)]
    public SendoutResponse sendoutDomestic(String Username, String Password, List<object> values, String series, int syscreator, String branchcode, Int32 zonecode, String custID, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderContactNo, int IsSMS, String SenderBirthdate, String SenderBranchID, String ReceiverMLCardNO, String ReceiverFName, String ReceiverLName, String ReceiverMName, String ReceiverStreet, String ReceiverProvinceCity, String ReceiverCountry, String ReceiverGender, String ReceiverContactNo, String ReceiverBirthdate, Int32 type, String ExpiryDate, Double version, String stationcode, String KPTN, Int32 remotezone, String RemoteBranchCode, String Purposeoftransaction, String Rewardsredeemcode, String Rewardscustomerid, String Rewardslastname)
    {
        int respcoderesp = 0;
        String respmsgresp = "", custidresp = "", redeemcoderesp = "";
        try
        {
            if (values[2].ToString().Equals("0"))
            {
                kplog.Fatal(KPTN + " - " + getRespMessage(13));
                try
                {
                    kplog.Info(KPTN + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                    MLRewards.MLRewardsRedeem rewards;
                    MLRewards.UnsuccessfulRedeem redeemresp;

                    using (rewards = new MLRewards.MLRewardsRedeem())
                    {
                        rewards.Url = redemurl;
                        redeemresp = new MLRewards.UnsuccessfulRedeem();

                        redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                        respcoderesp = redeemresp.respcode;
                        respmsgresp = redeemresp.respmsg;
                        custidresp = redeemresp.CustomerID_;
                        redeemcoderesp = redeemresp.RedeemCode_;

                        kplog.Info(KPTN + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(KPTN + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                }
                return new SendoutResponse { respcode = 10, message = getRespMessage(13) };
            }
            if (!authenticate(Username, Password))
            {
                kplog.Info(KPTN + " - " + getRespMessage(7));
                try
                {
                    kplog.Info(KPTN + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                    MLRewards.MLRewardsRedeem rewards;
                    MLRewards.UnsuccessfulRedeem redeemresp;

                    using (rewards = new MLRewards.MLRewardsRedeem())
                    {
                        rewards.Url = redemurl;
                        redeemresp = new MLRewards.UnsuccessfulRedeem();

                        redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                        respcoderesp = redeemresp.respcode;
                        respmsgresp = redeemresp.respmsg;
                        custidresp = redeemresp.CustomerID_;
                        redeemcoderesp = redeemresp.RedeemCode_;

                        kplog.Info(KPTN + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(KPTN + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                }
                return new SendoutResponse { respcode = 7, message = getRespMessage(7) };
            }
            String operatorid = values[1].ToString();
            String currency = values[12].ToString();
            Decimal principal = Convert.ToDecimal(values[13]);
            Decimal charge = Convert.ToDecimal(values[14]);
            String bcode = branchcode;
            Int32 zcode = zonecode;
            if (values[3].ToString().Equals("1"))
            {
                bcode = RemoteBranchCode;
                zcode = remotezone;
            }
            SendoutResponse check = new SendoutResponse();
            check = checkifallowSO(bcode, zcode, SenderFName + " " + SenderMName + " " + SenderLName, ReceiverFName + " " + ReceiverMName + " " + ReceiverLName, currency, principal, charge, operatorid, KPTN);
            if (check.respcode == 3)
                return new SendoutResponse { respcode = 0, message = check.message };

            return (SendoutResponse)saveSendoutDomestic(values, series, syscreator, branchcode, zonecode, custID, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, IsSMS, SenderBirthdate, SenderBranchID, ReceiverMLCardNO, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, type, ExpiryDate, stationcode, KPTN, remotezone, RemoteBranchCode, Purposeoftransaction, Rewardsredeemcode, Rewardscustomerid, Rewardslastname);

        }
        catch (Exception ex)
        {
            kplog.Fatal(KPTN + " - Outer Exception Catch", ex);
            try
            {
                kplog.Info(KPTN + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                MLRewards.MLRewardsRedeem rewards;
                MLRewards.UnsuccessfulRedeem redeemresp;

                using (rewards = new MLRewards.MLRewardsRedeem())
                {
                    rewards.Url = redemurl;
                    redeemresp = new MLRewards.UnsuccessfulRedeem();

                    redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                    respcoderesp = redeemresp.respcode;
                    respmsgresp = redeemresp.respmsg;
                    custidresp = redeemresp.CustomerID_;
                    redeemcoderesp = redeemresp.RedeemCode_;

                    kplog.Info(KPTN + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                }
            }
            catch (Exception ex1)
            {
                kplog.Fatal(KPTN + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex1.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
            }
            return new SendoutResponse { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString() };
        }
    }

    [WebMethod]
    public ValidateTransactionResponse validateTransaction(String Username, String Password, decimal Principal, string FirstName, string LastName, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new ValidateTransactionResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ValidateTransactionResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconDomestic.getConnection())
        {
            try
            {
                using (command = conn.CreateCommand())
                {
                    conn.Open();

                    //command.CommandText = "SELECT c.CustId FROM kpdomestic.sendout s INNER JOIN kpcustomersglobal.customers c ON s.SenderID = c.CustID  WHERE TIMEDIFF(DATE_FORMAT(NOW(), '%h:%i:%s'),DATE_FORMAT(s.TransDate, '%h:%i:%s')) <= '00:05:00' AND c.FirstName = @FirstName AND c.LastName = @LastName AND s.Principal = @amount;";
                    command.CommandText = "SELECT CustId FROM kpdomestic.sendout WHERE TIMEDIFF(DATE_FORMAT(NOW(), '%h:%i:%s'),DATE_FORMAT(TransDate, '%h:%i:%s')) <= '00:05:00' AND SenderFName = @FirstName AND SenderLName = @LastName AND Principal = @amount;";
                    command.Parameters.AddWithValue("amount", Principal);
                    command.Parameters.AddWithValue("FirstName", FirstName);
                    command.Parameters.AddWithValue("LastName", LastName);
                    MySqlDataReader Reader = command.ExecuteReader();
                    //throw new Exception(Reader.HasRows.ToString());

                    if (Reader.Read())
                    {
                        Reader.Close();
                        conn.Close();

                        return new ValidateTransactionResponse { respcode = 1, message = "SUCCESS" };
                    }
                    else
                    {
                        kplog.Error("principal-fname-lname: " + Principal.ToString() + " - " + FirstName + " - " + LastName + " - Transaction validation failed.");
                        //throw new Exception(Reader["CustId"].ToString());
                        Reader.Close();
                        conn.Close();

                        return new ValidateTransactionResponse { respcode = 0, message = "FAILED" };
                    }


                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                conn.Close();
                return new ValidateTransactionResponse { respcode = 0, message = ex.ToString() };
            }
        }

    }

    [WebMethod]
    public Int32 tester()
    {
        return Convert.ToInt32("000021");
    }


    [WebMethod]
    public String getFullName(String Username, String Password, String ResourceID, String BranchCode, Int32 ZoneCode, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            throw new Exception("Invalid credentials");
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    throw new Exception("Version does not match!");
        //}
        try
        {
            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                try
                {
                    conn.Open();
                    using (command = conn.CreateCommand())
                    {
                        command.CommandText = "Select fullname from kpusers.branchusers where BranchCode = @bcode and ZoneCode = @zcode and ResourceID = @rid;";
                        command.Parameters.AddWithValue("bcode", BranchCode);
                        command.Parameters.AddWithValue("zcode", ZoneCode);
                        command.Parameters.AddWithValue("rid", ResourceID);
                        using (MySqlDataReader dataReader = command.ExecuteReader())
                        {
                            if (dataReader.Read())
                            {
                                string fullname = dataReader["fullname"].ToString();
                                dataReader.Close();
                                conn.Close();

                                return fullname;
                            }
                            else
                            {
                                kplog.Error("No data found!");
                                dataReader.Close();
                                conn.Close();
                                return null;
                            }
                        }
                    }
                }
                catch (MySqlException myx)
                {
                    kplog.Fatal(myx.ToString());
                    conn.Close();
                    return null;
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal("Outer exception catched", ex);
            return null;
        }
    }

    public String getFullNameDom(String Username, String Password, String ResourceID)
    {
        if (!authenticate(Username, Password))
        {
            throw new Exception("Invalid credentials");
        }
        try
        {
            String resource = "";
            using (MySqlConnection conn = dbconDomestic.getConnection())
            {
                try
                {
                    conn.Open();
                    using (command = conn.CreateCommand())
                    {
                        if (ResourceID != "")
                        {
                            resource = ResourceID.Substring(4);
                            command.CommandText = "Select fullname from kpusers.branchusers where ResourceID = @rid;";
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("rid", resource);
                            using (MySqlDataReader dataReader = command.ExecuteReader())
                            {
                                if (dataReader.Read())
                                {
                                    string fullname = dataReader["fullname"].ToString();
                                    dataReader.Close();
                                    conn.Close();

                                    return fullname;
                                }
                                dataReader.Close();
                            }

                            command.CommandText = "Select fullname from kpusers.branchusers where ResourceID = @rid;";
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("rid", ResourceID);
                            using (MySqlDataReader dataReader2 = command.ExecuteReader())
                            {
                                if (dataReader2.Read())
                                {
                                    string fullname = dataReader2["fullname"].ToString();
                                    dataReader2.Close();
                                    conn.Close();
                                    return fullname;
                                }
                                dataReader2.Close();
                            }
                        }
                        kplog.Error(ResourceID + " - No data found!");
                        conn.Close();
                        return ResourceID;

                    }
                }
                catch (MySqlException myx)
                {
                    kplog.Fatal(myx.ToString());
                    conn.Close();
                    return null;
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal("Outer exception catched", ex);
            return null;
        }
    }

    private Decimal checkifdormant(DateTime SODate, String kptn)
    {
        try
        {

            String queryDormant = "select if((TIMESTAMPDIFF(MONTH,@SODate, now()) > 3)=1,'ISDORMANT','') as status, cancelreason, OtherCharge  from " + decodeKPTNDomestic(0, kptn) + " where KPTNNo=@kptn;";

            command.CommandText = queryDormant;
            command.Parameters.AddWithValue("SODate", SODate.ToString("yyyy-MM-dd HH:mm:ss"));
            command.Parameters.AddWithValue("kptn", kptn);
            MySqlDataReader ReaderDormant = command.ExecuteReader();
            String dormstat = string.Empty;
            String cancelreason = string.Empty;
            Decimal othercharge = 0;
            Decimal ChargeAmount;
            if (ReaderDormant.HasRows)
            {
                ReaderDormant.Read();
                dormstat = ReaderDormant["status"].ToString();
                cancelreason = ReaderDormant["cancelreason"].ToString();
                othercharge = Convert.ToDecimal(ReaderDormant["OtherCharge"]);

                //if (dormstat == "ISDORMANT" && cancelreason == "A-REINSTATED")
                if ((dormstat == "ISDORMANT" && cancelreason == "A-REINSTATED") || (othercharge != 0))
                {
                    ChargeAmount = othercharge;
                    ReaderDormant.Close();
                    //String querydormcharge = "select if(TIMESTAMPDIFF(MONTH,@SODate, now()) > 3, " +
                    // "(TIMESTAMPDIFF(MONTH,@SODate, now()) - (SELECT ChargeMonth FROM kpforms.syscharges WHERE ChargeCode = 'Dormant')) * (SELECT ChargeAmount FROM kpforms.syscharges WHERE ChargeCode = 'Dormant'),0.00) as charge ;";

                    //command.CommandText = querydormcharge;
                    //command.Parameters.Clear();
                    //command.Parameters.AddWithValue("SODate", SODate.ToString("yyyy-MM-dd HH:mm:ss"));
                    //MySqlDataReader readerdormcharge = command.ExecuteReader();

                    //if (readerdormcharge.HasRows)
                    //{
                    //readerdormcharge.Read();

                    //readerdormcharge.Close();
                    return ChargeAmount;
                }
                else
                {
                    ChargeAmount = 0;
                    ReaderDormant.Close();
                    return ChargeAmount;
                }


            }
            ChargeAmount = 0;
            return ChargeAmount;

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }

    private Decimal checkifdormantKiosk(DateTime SODate, String kptn)
    {
        try
        {
            String queryDormant = "select if((TIMESTAMPDIFF(MONTH,@SODate, now()) > 3)=1,'ISDORMANT','') as status, cancelreason, OtherCharge  from " + decodeKPTNDomesticKiosk(0, kptn) + " where KPTNNo=@kptn;";

            command.CommandText = queryDormant;
            command.Parameters.AddWithValue("SODate", SODate.ToString("yyyy-MM-dd HH:mm:ss"));
            command.Parameters.AddWithValue("kptn", kptn);
            MySqlDataReader ReaderDormant = command.ExecuteReader();
            String dormstat = string.Empty;
            String cancelreason = string.Empty;
            Decimal othercharge = 0;
            Decimal ChargeAmount;
            if (ReaderDormant.HasRows)
            {
                ReaderDormant.Read();
                dormstat = ReaderDormant["status"].ToString();
                cancelreason = ReaderDormant["cancelreason"].ToString();
                othercharge = Convert.ToDecimal(ReaderDormant["OtherCharge"]);

                if (dormstat == "ISDORMANT" && cancelreason == "A-REINSTATED")
                {
                    ChargeAmount = othercharge;
                    ReaderDormant.Close();
                    return ChargeAmount;
                }
                else
                {
                    ChargeAmount = 0;
                    ReaderDormant.Close();
                    return ChargeAmount;
                }


            }
            ChargeAmount = 0;
            return ChargeAmount;
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }

    [WebMethod(BufferResponse = false, Description = "Method for searching Domestic Transactions")]
    public SearchResponse kptnSearchMlWallet(String Username, String Password, String kptn, String kptn6, Decimal amount, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new SearchResponse { respcode = 7, message = getRespMessage(7) };
        }


        if (decodeKPTNWallet(0, kptn6) == "4" || (!istablevalid(decodeKPTNWallet(0, kptn6))))
        {
            kplog.Error(kptn6 + " - Invalid KPTN number");
            return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new SearchResponse { respcode = 10, message = getRespMessage(10) };
        //}

        using (MySqlConnection conn = dbconWallet.getConnection())
        {
            //DateTime TransDate;
            try
            {
                conn.Open();

                using (command = conn.CreateCommand())
                {
                    List<object> a = new List<object>();

                    SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();
                    // AND IsClaimed = 0 AND IsCancelled = 0
                    //String query = "SELECT SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, kptn4, IDType, IDNo, ExpiryDate, SenderName, ReceiverName FROM " + generateTableName(2) + " as t INNER JOIN ON " + generateTableName(0) + " s ON t.KPTN6 = s.KPTNNo and t.MLKP4TN = s.kptn4 WHERE (MLKP4TN = @kptn OR MLKP4TN = @kptn) and IsClaimed = 0;";
                    String query = "SELECT Purpose, ZoneCode, BranchCode, IsClaimed, IsCancelled , RemoteBranch, RemoteOperatorID,IsRemote, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, cast(if(DATE(ReceiverBirthdate) = '0000-00-00','1800-01-01',ReceiverBirthdate) as DATETIME) as ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, ORNo, Charge, RemoteZoneCode, IF((TIMESTAMPDIFF(MONTH,Transdate, now()) > 3)=1 and (CancelReason IS NULL or CancelReason = ''),1,0) as dormstatus FROM " + decodeKPTNWallet(0, kptn6) + " WHERE KPTNNo = @kptn6 ;";
                    //throw new Exception(decodeKPTN(0, kptn6));


                    command.CommandText = query;
                    //command.Parameters.AddWithValue("kptn", kptn);
                    command.Parameters.AddWithValue("kptn6", kptn6);
                    using (MySqlDataReader dataReader = command.ExecuteReader())
                    {
                        if (dataReader.HasRows)
                        {
                            dataReader.Read();
                            bool dormstat = Convert.ToBoolean(dataReader["dormstatus"]);
                            string sFName = dataReader["SenderFname"].ToString();
                            string sLName = dataReader["SenderLname"].ToString();
                            string sMName = dataReader["SenderMName"].ToString();
                            string sSt = dataReader["SenderStreet"].ToString();
                            string sPCity = dataReader["SenderProvinceCity"].ToString();
                            string sCtry = dataReader["SenderCountry"].ToString();
                            string sG = dataReader["SenderGender"].ToString();
                            string sCNo = dataReader["SenderContactNo"].ToString();
                            Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                            string sBID = dataReader["SenderBranchID"].ToString();
                            string sCustID = dataReader["CustID"].ToString();
                            string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                            string SenderName = dataReader["SenderName"].ToString();

                            string rFName = dataReader["ReceiverFname"].ToString();
                            string rLName = dataReader["ReceiverLname"].ToString();
                            string rMName = dataReader["ReceiverMName"].ToString();
                            string rSt = dataReader["ReceiverStreet"].ToString();
                            string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                            string rCtry = dataReader["ReceiverCountry"].ToString();
                            string rG = dataReader["ReceiverGender"].ToString();
                            string rCNo = dataReader["ReceiverContactNo"].ToString();
                            //string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) || (dataReader["ReceiverBirthdate"].ToString().Equals("0000-00-00")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();
                            DateTime? rBdate = dataReader["ReceiverBirthdate"].Equals(DBNull.Value) ? (DateTime?)null : Convert.ToDateTime(dataReader["ReceiverBirthdate"]);
                            string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                            string ReceiverName = dataReader["ReceiverName"].ToString();

                            string SendoutControlNo = dataReader["ControlNo"].ToString();
                            string KPTNNo = dataReader["KPTNNo"].ToString();
                            //string kptn4 = dataReader["kptn4"].ToString();
                            string OperatorID = dataReader["OperatorID"].ToString();
                            bool IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                            string TransPassword = dataReader["TransPassword"].ToString();
                            DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"]);
                            string Currency = dataReader["Currency"].ToString();
                            Decimal Principal = (Decimal)dataReader["Principal"];
                            string SenderID = dataReader["CustID"].ToString();
                            Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string Relation = dataReader["Relation"].ToString();
                            string Message = dataReader["Message"].ToString();
                            string StationID = dataReader["StationID"].ToString();
                            string SourceOfFund = dataReader["Source"].ToString();
                            string IDType = dataReader["IDType"].ToString();
                            string IDNo = dataReader["IDNo"].ToString();
                            string ExpiryDate = dataReader["ExpiryDate"].ToString();
                            string ORNo = dataReader["ORNo"].ToString();
                            string RemoteBranch = dataReader["RemoteBranch"].ToString();
                            string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                            Boolean isSameAmount = false;
                            // bool IsRemote = (bool)dataReader["IsRemote"];
                            // bool x = (bool)dataReader["IsCancelled"];
                            // bool IsClaimed = (bool)dataReader["IsClaimed"];
                            bool IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                            bool x = Convert.ToBoolean(dataReader["IsCancelled"]);
                            bool IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                            string bcode = dataReader["BranchCode"].ToString();
                            Decimal Charge = Convert.ToDecimal(dataReader["Charge"]);
                            Int32 zcode = Convert.ToInt32(dataReader["ZoneCode"]);
                            string purpose = dataReader["Purpose"].ToString();
                            Int32? remoteZone = dataReader["RemoteZoneCode"] == DBNull.Value ? 0 : Convert.ToInt32(dataReader["RemoteZoneCode"]);
                            //double? vat = dataReader["vat"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["vat"]);


                            if (Principal == amount)
                            {
                                isSameAmount = true;
                            }


                            if (x)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(8));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 8, message = getRespMessage(8), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            if (IsClaimed)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(3));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 3, message = getRespMessage(3), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }

                            if (dormstat)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(17));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 17, message = getRespMessage(17), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            dataReader.Close();
                            //Decimal DormantCharge = checkifdormant(syscreated, kptn6);
                            conn.Close();
                            SenderInfo si = new SenderInfo
                            {
                                FirstName = sFName,
                                LastName = sLName,
                                MiddleName = sMName,
                                SenderName = SenderName,
                                Street = sSt,
                                ProvinceCity = sPCity,
                                Country = sCtry,
                                Gender = sG,
                                ContactNo = sCNo,
                                IsSMS = sIsSM,
                                BranchID = sBID,
                                CustID = sCustID,
                                SenderMLCardNo = sMLCardNo,
                                Birthdate = sBdate
                            };

                            ReceiverInfo ri = new ReceiverInfo
                            {
                                FirstName = rFName,
                                LastName = rLName,
                                MiddleName = rMName,
                                ReceiverName = ReceiverName,
                                Street = rSt,
                                ProvinceCity = rPCity,
                                Country = rCtry,
                                Gender = rG,
                                ContactNo = rCNo,
                                BirthDate = Convert.ToString(rBdate).ToString(),
                                MLCardNo = rMLCardNo
                            };

                            SendoutInfo soi = new SendoutInfo
                            {
                                SendoutControlNo = SendoutControlNo,
                                KPTNNo = KPTNNo,
                                OperatorID = OperatorID,
                                IsPassword = IsPassword,
                                TransPassword = TransPassword,
                                syscreated = syscreated,
                                Currency = Currency,
                                Principal = Principal,
                                SenderID = SenderID,
                                SenderIsSMS = SenderIsSMS,
                                Relation = Relation,
                                Message = Message,
                                StationID = StationID,
                                SourceOfFund = SourceOfFund,
                                //kptn4 = kptn4,
                                IDNo = IDNo,
                                IDType = IDType,
                                ExpiryDate = ExpiryDate,
                                //DormantCharge = DormantCharge,
                                ORNo = ORNo,
                                isSameAmount = isSameAmount,
                                IsRemote = IsRemote,
                                RemoteBranch = RemoteBranch,
                                RemoteOperatorID = RemoteOperatorID,
                                BranchCode = bcode,
                                Charge = Charge,
                                ZoneCode = zcode,
                                Purpose = purpose,
                                RemoteZone = remoteZone,
                                vat = 0.0

                            };
                            kplog.Info(kptn6 + " - Search Success");
                            return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                        }
                        else
                        {
                            kplog.Error(kptn6 + " - " + getRespMessage(4));
                            dataReader.Close();
                            conn.Close();
                            return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(kptn6 + " - " + ex.ToString(), ex);
                conn.Close();
                if (ex.Message.Equals("4"))
                {
                    kplog.Error(kptn6 + " - " + getRespMessage(4));
                    return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
                return new SearchResponse { respcode = 0, message = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
            }
        }
    }

    public SearchResponse kptnSearchKIOSK(String Username, String Password, String kptn6, Decimal amount, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new SearchResponse { respcode = 7, message = getRespMessage(7) };
        }

        if (decodeKPTNDomesticKiosk(0, kptn6) == "4" || (!istablevalid(decodeKPTNDomesticKiosk(0, kptn6))))
        {
            kplog.Error(kptn6 + " - Invalid KPTN number");
            return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
        }

        using (MySqlConnection conn = dbconkiosk.getConnection())
        {
            //DateTime TransDate;
            try
            {
                conn.Open();

                using (command = conn.CreateCommand())
                {

                    List<object> a = new List<object>();

                    SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();
                    String query = "SELECT Purpose, ZoneCode, BranchCode, IsClaimed, IsCancelled , RemoteBranch, RemoteOperatorID,IsRemote, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, cast(if(DATE(ReceiverBirthdate) = '0000-00-00','1800-01-01',ReceiverBirthdate) as DATETIME) as ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, ORNo, Charge, RemoteZoneCode, IF((TIMESTAMPDIFF(MONTH,Transdate, now()) > 3)=1 and (CancelReason IS NULL or CancelReason = ''),1,0) as dormstatus FROM " + decodeKPTNDomesticKiosk(0, kptn6) + " WHERE KPTNNo = @kptn6 ;";
                    command.CommandText = query;
                    command.Parameters.AddWithValue("kptn6", kptn6);
                    using (MySqlDataReader dataReader = command.ExecuteReader())
                    {
                        if (dataReader.HasRows)
                        {
                            dataReader.Read();
                            bool dormstat = Convert.ToBoolean(dataReader["dormstatus"]);
                            string sFName = dataReader["SenderFname"].ToString();
                            string sLName = dataReader["SenderLname"].ToString();
                            string sMName = dataReader["SenderMName"].ToString();
                            string sSt = dataReader["SenderStreet"].ToString();
                            string sPCity = dataReader["SenderProvinceCity"].ToString();
                            string sCtry = dataReader["SenderCountry"].ToString();
                            string sG = dataReader["SenderGender"].ToString();
                            string sCNo = dataReader["SenderContactNo"].ToString();
                            Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                            string sBID = dataReader["SenderBranchID"].ToString();
                            string sCustID = dataReader["CustID"].ToString();
                            string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                            string SenderName = dataReader["SenderName"].ToString();

                            string rFName = dataReader["ReceiverFname"].ToString();
                            string rLName = dataReader["ReceiverLname"].ToString();
                            string rMName = dataReader["ReceiverMName"].ToString();
                            string rSt = dataReader["ReceiverStreet"].ToString();
                            string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                            string rCtry = dataReader["ReceiverCountry"].ToString();
                            string rG = dataReader["ReceiverGender"].ToString();
                            string rCNo = dataReader["ReceiverContactNo"].ToString();
                            DateTime? rBdate = dataReader["ReceiverBirthdate"].Equals(DBNull.Value) ? (DateTime?)null : Convert.ToDateTime(dataReader["ReceiverBirthdate"]);
                            string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                            string ReceiverName = dataReader["ReceiverName"].ToString();

                            string SendoutControlNo = dataReader["ControlNo"].ToString();
                            string KPTNNo = dataReader["KPTNNo"].ToString();
                            //string kptn4 = dataReader["kptn4"].ToString();
                            string OperatorID = dataReader["OperatorID"].ToString();
                            bool IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                            string TransPassword = dataReader["TransPassword"].ToString();
                            DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"]);
                            string Currency = dataReader["Currency"].ToString();
                            Decimal Principal = (Decimal)dataReader["Principal"];
                            string SenderID = dataReader["CustID"].ToString();
                            Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string Relation = dataReader["Relation"].ToString();
                            string Message = dataReader["Message"].ToString();
                            string StationID = dataReader["StationID"].ToString();
                            string SourceOfFund = dataReader["Source"].ToString();
                            string IDType = dataReader["IDType"].ToString();
                            string IDNo = dataReader["IDNo"].ToString();
                            string ExpiryDate = dataReader["ExpiryDate"].ToString();
                            string ORNo = dataReader["ORNo"].ToString();
                            string RemoteBranch = dataReader["RemoteBranch"].ToString();
                            string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                            Boolean isSameAmount = false;
                            bool IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                            bool x = Convert.ToBoolean(dataReader["IsCancelled"]);
                            bool IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                            string bcode = dataReader["BranchCode"].ToString();
                            Decimal Charge = Convert.ToDecimal(dataReader["Charge"]);
                            Int32 zcode = Convert.ToInt32(dataReader["ZoneCode"]);
                            string purpose = dataReader["Purpose"].ToString();
                            Int32? remoteZone = dataReader["RemoteZoneCode"] == DBNull.Value ? 0 : Convert.ToInt32(dataReader["RemoteZoneCode"]);

                            if (Principal == amount)
                            {
                                isSameAmount = true;
                            }


                            if (x)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(8));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 8, message = getRespMessage(8), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            if (IsClaimed)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(3));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 3, message = getRespMessage(3), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }

                            if (dormstat)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(17));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 17, message = getRespMessage(17), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            dataReader.Close();
                            Decimal DormantCharge = checkifdormantKiosk(syscreated, kptn6);
                            conn.Close();
                            SenderInfo si = new SenderInfo
                            {
                                FirstName = sFName,
                                LastName = sLName,
                                MiddleName = sMName,
                                SenderName = SenderName,
                                Street = sSt,
                                ProvinceCity = sPCity,
                                Country = sCtry,
                                Gender = sG,
                                ContactNo = sCNo,
                                IsSMS = sIsSM,
                                BranchID = sBID,
                                CustID = sCustID,
                                SenderMLCardNo = sMLCardNo,
                                Birthdate = sBdate
                            };

                            ReceiverInfo ri = new ReceiverInfo
                            {
                                FirstName = rFName,
                                LastName = rLName,
                                MiddleName = rMName,
                                ReceiverName = ReceiverName,
                                Street = rSt,
                                ProvinceCity = rPCity,
                                Country = rCtry,
                                Gender = rG,
                                ContactNo = rCNo,
                                BirthDate = Convert.ToString(rBdate).ToString(),
                                MLCardNo = rMLCardNo
                            };

                            SendoutInfo soi = new SendoutInfo
                            {
                                SendoutControlNo = SendoutControlNo,
                                KPTNNo = KPTNNo,
                                OperatorID = OperatorID,
                                IsPassword = IsPassword,
                                TransPassword = TransPassword,
                                syscreated = syscreated,
                                Currency = Currency,
                                Principal = Principal,
                                SenderID = SenderID,
                                SenderIsSMS = SenderIsSMS,
                                Relation = Relation,
                                Message = Message,
                                StationID = StationID,
                                SourceOfFund = SourceOfFund,
                                //kptn4 = kptn4,
                                IDNo = IDNo,
                                IDType = IDType,
                                ExpiryDate = ExpiryDate,
                                DormantCharge = DormantCharge,
                                ORNo = ORNo,
                                isSameAmount = isSameAmount,
                                IsRemote = IsRemote,
                                RemoteBranch = RemoteBranch,
                                RemoteOperatorID = RemoteOperatorID,
                                BranchCode = bcode,
                                Charge = Charge,
                                ZoneCode = zcode,
                                Purpose = purpose,
                                RemoteZone = remoteZone,
                                vat = 0.0

                            };
                            kplog.Info(kptn6 + " - Search Success");
                            return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                        }
                        else
                        {
                            kplog.Error(kptn6 + " - " + getRespMessage(4));
                            dataReader.Close();
                            conn.Close();
                            return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(kptn6 + " - " + ex.ToString(), ex);
                conn.Close();
                if (ex.Message.Equals("4"))
                {
                    kplog.Error(kptn6 + " - " + getRespMessage(4));
                    return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
                return new SearchResponse { respcode = 0, message = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
            }
        }
    }

    [WebMethod(BufferResponse = false, Description = "Method for searching Domestic Transactions")]
    public SearchResponse kptnSearchDomestic(String Username, String Password, String shortkptn, String kptn6, Decimal amount, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new SearchResponse { respcode = 7, message = getRespMessage(7) };
        }

        if (kptn6 != "")
        {
            if (kptn6.Substring(0, 3) == "MCD")
            {
                try
                {
                    CloudService.SearchResponse resp = new CloudService.SearchResponse();
                    CloudService.MLhuillier client = new CloudService.MLhuillier();

                    resp = client.kptnSearchDomestic(Username, Password, shortkptn, kptn6, amount, version, stationcode);
                    var senderinfo = new SenderInfo();
                    var receiverinfo = new ReceiverInfo();
                    var sendoutinfo = new SendoutInfo();
                    if (resp.respcode == 1)
                    {
                        senderinfo = new SenderInfo
                        {
                            Birthdate = resp.SenderInfo.Birthdate,
                            BranchID = resp.SenderInfo.BranchID,
                            ContactNo = resp.SenderInfo.ContactNo,
                            Country = resp.SenderInfo.Country,
                            CustID = resp.SenderInfo.CustID,
                            FirstName = resp.SenderInfo.FirstName,
                            Gender = resp.SenderInfo.Gender,
                            IsSMS = resp.SenderInfo.IsSMS,
                            LastName = resp.SenderInfo.LastName,
                            MiddleName = resp.SenderInfo.MiddleName,
                            ProvinceCity = resp.SenderInfo.ProvinceCity,
                            SenderMLCardNo = resp.SenderInfo.SenderMLCardNo,
                            SenderName = resp.SenderInfo.SenderName
                        };

                        receiverinfo = new ReceiverInfo
                        {
                            BirthDate = resp.ReceiverInfo.BirthDate,
                            ContactNo = resp.ReceiverInfo.ContactNo,
                            Country = resp.ReceiverInfo.Country,
                            FirstName = resp.ReceiverInfo.FirstName,
                            Gender = resp.ReceiverInfo.Gender,
                            LastName = resp.ReceiverInfo.LastName,
                            MiddleName = resp.ReceiverInfo.MiddleName,
                            MLCardNo = resp.ReceiverInfo.MLCardNo,
                            ProvinceCity = resp.ReceiverInfo.ProvinceCity,
                            ReceiverName = resp.ReceiverInfo.ReceiverName,
                            Street = resp.ReceiverInfo.Street
                        };

                        sendoutinfo = new SendoutInfo
                        {
                            amountpo = resp.SendoutInfo.amountpo,
                            AmountPO101 = resp.SendoutInfo.AmountPO101,
                            bankname = resp.SendoutInfo.bankname,
                            BranchCode = resp.SendoutInfo.BranchCode,
                            CancelCharge = resp.SendoutInfo.CancelCharge,
                            cardcheck = resp.SendoutInfo.cardcheck,
                            cardexp = resp.SendoutInfo.cardcheck,
                            Charge = resp.SendoutInfo.Charge,
                            ControlNo = resp.SendoutInfo.ControlNo,
                            Currency = resp.SendoutInfo.Currency,
                            DormantCharge = resp.SendoutInfo.DormantCharge,
                            exchangerate = resp.SendoutInfo.exchangerate,
                            ExchangeRate101 = resp.SendoutInfo.ExchangeRate101,
                            ExpiryDate = resp.SendoutInfo.ExpiryDate,
                            IDNo = resp.SendoutInfo.IDNo,
                            IDType = resp.SendoutInfo.IDType,
                            IsPassword = resp.SendoutInfo.IsPassword,
                            IsRemote = resp.SendoutInfo.IsRemote,
                            isSameAmount = resp.SendoutInfo.isSameAmount,
                            kptn4 = resp.SendoutInfo.kptn4,
                            KPTNNo = resp.SendoutInfo.KPTNNo,
                            Message = resp.SendoutInfo.Message,
                            OperatorID = resp.SendoutInfo.OperatorID,
                            ORNo = resp.SendoutInfo.ORNo,
                            OtherCharge = resp.SendoutInfo.OtherCharge,
                            paytype = resp.SendoutInfo.paytype,
                            preferredcurrency = resp.SendoutInfo.preferredcurrency,
                            PreffedCur101 = resp.SendoutInfo.PreffedCur101,
                            Principal = resp.SendoutInfo.Principal,
                            Purpose = resp.SendoutInfo.Purpose,
                            ReceiverIsSMS = resp.SendoutInfo.ReceiverIsSMS,
                            Redeem = resp.SendoutInfo.Redeem,
                            Relation = resp.SendoutInfo.Relation,
                            RemoteBranch = resp.SendoutInfo.RemoteBranch,
                            RemoteOperatorID = resp.SendoutInfo.RemoteOperatorID,
                            RemoteReason = resp.SendoutInfo.RemoteReason,
                            RemoteZone = resp.SendoutInfo.RemoteZone,
                            SenderID = resp.SendoutInfo.SenderID,
                            SenderIsSMS = resp.SendoutInfo.SenderIsSMS,
                            SendoutControlNo = resp.SendoutInfo.SendoutControlNo,
                            SourceOfFund = resp.SendoutInfo.SourceOfFund,
                            StationID = resp.SendoutInfo.StationID,
                            syscreated = resp.SendoutInfo.syscreated,
                            Total = resp.SendoutInfo.Total,
                            trnstype = resp.SendoutInfo.trnstype,
                            TransPassword = resp.SendoutInfo.TransPassword,
                            vat = resp.SendoutInfo.vat,
                            ZoneCode = resp.SendoutInfo.ZoneCode
                        };
                    }
                    kplog.Info(kptn6 + " - Cloud Response: " + resp.respcode + " | " + resp.message + " | " + resp.ErrorDetail);
                    return new SearchResponse { respcode = resp.respcode, message = resp.message, SenderInfo = senderinfo, ReceiverInfo = receiverinfo, SendoutInfo = sendoutinfo };
                }
                catch (Exception ex)
                {
                    kplog.Fatal(kptn6 + " - Cloud Catch: " + ex.ToString());
                    return new SearchResponse { respcode = 0, message = getRespMessage(0), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null, ErrorDetail = ex.ToString() };
                }
            }
            if (kptn6.Substring(0, 3) == "ML1")
            {
                return (SearchResponse)kptnSearchKIOSK(Username, Password, kptn6, amount, version, stationcode);
            }
        }

        if (shortkptn == "")
        {
            if (decodeKPTNDomestic(0, kptn6) == "4" || (!istablevalid(decodeKPTNDomestic(0, kptn6))))
            {
                kplog.Error(kptn6 + " - Invalid KPTN number");
                return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
            }
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new SearchResponse { respcode = 10, message = getRespMessage(10) };
        //}

        using (MySqlConnection conn = dbconDomestic.getConnection())
        {
            //DateTime TransDate;
            try
            {
                conn.Open();

                using (command = conn.CreateCommand())
                {
                    if (shortkptn != "")
                    {
                        command.CommandText = "SELECT kptnno FROM kpadminlogs.shortenKPTN WHERE shortkptnno=@shortkptnno";
                        command.CommandType = CommandType.Text;
                        command.Parameters.AddWithValue("shortkptnno", shortkptn);
                        MySqlDataReader rdr = command.ExecuteReader();
                        if (rdr.Read())
                        {
                            kptn6 = rdr["kptnno"].ToString();
                            rdr.Close();
                        }
                        else
                        {
                            kplog.Error(shortkptn + " - " + getRespMessage(4));
                            conn.Close();
                            dbconDomestic.CloseConnection();
                            return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                        }
                    }

                    List<object> a = new List<object>();

                    SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();
                    // AND IsClaimed = 0 AND IsCancelled = 0
                    //String query = "SELECT SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, kptn4, IDType, IDNo, ExpiryDate, SenderName, ReceiverName FROM " + generateTableName(2) + " as t INNER JOIN ON " + generateTableName(0) + " s ON t.KPTN6 = s.KPTNNo and t.MLKP4TN = s.kptn4 WHERE (MLKP4TN = @kptn OR MLKP4TN = @kptn) and IsClaimed = 0;";
                    String query = "SELECT Purpose, ZoneCode, BranchCode, IsClaimed, IsCancelled , RemoteBranch, RemoteOperatorID,IsRemote, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, cast(if(DATE(ReceiverBirthdate) = '0000-00-00','1800-01-01',ReceiverBirthdate) as DATETIME) as ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, ORNo, Redeem, Charge, RemoteZoneCode, IF((TIMESTAMPDIFF(MONTH,Transdate, now()) > 3)=1 and (CancelReason IS NULL or CancelReason = ''),1,0) as dormstatus FROM " + decodeKPTNDomestic(0, kptn6) + " WHERE KPTNNo = @kptn6 ;";
                    //throw new Exception(decodeKPTN(0, kptn6));


                    command.CommandText = query;
                    //command.Parameters.AddWithValue("kptn", kptn);
                    command.Parameters.AddWithValue("kptn6", kptn6);
                    using (MySqlDataReader dataReader = command.ExecuteReader())
                    {
                        if (dataReader.HasRows)
                        {
                            dataReader.Read();
                            bool dormstat = Convert.ToBoolean(dataReader["dormstatus"]);
                            string sFName = dataReader["SenderFname"].ToString();
                            string sLName = dataReader["SenderLname"].ToString();
                            string sMName = dataReader["SenderMName"].ToString();
                            string sSt = dataReader["SenderStreet"].ToString();
                            string sPCity = dataReader["SenderProvinceCity"].ToString();
                            string sCtry = dataReader["SenderCountry"].ToString();
                            string sG = dataReader["SenderGender"].ToString();
                            string sCNo = dataReader["SenderContactNo"].ToString();
                            Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                            string sBID = dataReader["SenderBranchID"].ToString();
                            string sCustID = dataReader["CustID"].ToString();
                            string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                            string SenderName = dataReader["SenderName"].ToString();

                            string rFName = dataReader["ReceiverFname"].ToString();
                            string rLName = dataReader["ReceiverLname"].ToString();
                            string rMName = dataReader["ReceiverMName"].ToString();
                            string rSt = dataReader["ReceiverStreet"].ToString();
                            string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                            string rCtry = dataReader["ReceiverCountry"].ToString();
                            string rG = dataReader["ReceiverGender"].ToString();
                            string rCNo = dataReader["ReceiverContactNo"].ToString();
                            //string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) || (dataReader["ReceiverBirthdate"].ToString().Equals("0000-00-00")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();
                            DateTime? rBdate = dataReader["ReceiverBirthdate"].Equals(DBNull.Value) ? (DateTime?)null : Convert.ToDateTime(dataReader["ReceiverBirthdate"]);
                            string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                            string ReceiverName = dataReader["ReceiverName"].ToString();

                            string SendoutControlNo = dataReader["ControlNo"].ToString();
                            string KPTNNo = dataReader["KPTNNo"].ToString();
                            //string kptn4 = dataReader["kptn4"].ToString();
                            string OperatorID = dataReader["OperatorID"].ToString();
                            bool IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                            string TransPassword = dataReader["TransPassword"].ToString();
                            DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"]);
                            string Currency = dataReader["Currency"].ToString();
                            Decimal Principal = (Decimal)dataReader["Principal"];
                            string SenderID = dataReader["CustID"].ToString();
                            Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string Relation = dataReader["Relation"].ToString();
                            string Message = dataReader["Message"].ToString();
                            string StationID = dataReader["StationID"].ToString();
                            string SourceOfFund = dataReader["Source"].ToString();
                            string IDType = dataReader["IDType"].ToString();
                            string IDNo = dataReader["IDNo"].ToString();
                            string ExpiryDate = dataReader["ExpiryDate"].ToString();
                            string ORNo = dataReader["ORNo"].ToString();
                            string RemoteBranch = dataReader["RemoteBranch"].ToString();
                            string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                            Boolean isSameAmount = false;
                            Decimal Redeem = (Decimal)dataReader["Redeem"];
                            // bool IsRemote = (bool)dataReader["IsRemote"];
                            // bool x = (bool)dataReader["IsCancelled"];
                            // bool IsClaimed = (bool)dataReader["IsClaimed"];
                            bool IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                            bool x = Convert.ToBoolean(dataReader["IsCancelled"]);
                            bool IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                            string bcode = dataReader["BranchCode"].ToString();
                            Decimal Charge = Convert.ToDecimal(dataReader["Charge"]);
                            Int32 zcode = Convert.ToInt32(dataReader["ZoneCode"]);
                            string purpose = dataReader["Purpose"].ToString();
                            Int32? remoteZone = dataReader["RemoteZoneCode"] == DBNull.Value ? 0 : Convert.ToInt32(dataReader["RemoteZoneCode"]);
                            //double? vat = dataReader["vat"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["vat"]);


                            if (Principal == amount)
                            {
                                isSameAmount = true;
                            }


                            if (x)
                            {
                                kplog.Error("kptn-shortkptn: " + kptn6 + " - " + shortkptn + " - " + getRespMessage(8));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 8, message = getRespMessage(8), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            if (IsClaimed)
                            {
                                kplog.Error("kptn-shortkptn: " + kptn6 + " - " + shortkptn + " - " + getRespMessage(3));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 3, message = getRespMessage(3), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }

                            if (dormstat)
                            {
                                kplog.Error("kptn-shortkptn: " + kptn6 + " - " + shortkptn + " - " + getRespMessage(17));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 17, message = getRespMessage(17), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            dataReader.Close();
                            Decimal DormantCharge = checkifdormant(syscreated, kptn6);
                            conn.Close();
                            SenderInfo si = new SenderInfo
                            {
                                FirstName = sFName,
                                LastName = sLName,
                                MiddleName = sMName,
                                SenderName = SenderName,
                                Street = sSt,
                                ProvinceCity = sPCity,
                                Country = sCtry,
                                Gender = sG,
                                ContactNo = sCNo,
                                IsSMS = sIsSM,
                                BranchID = sBID,
                                CustID = sCustID,
                                SenderMLCardNo = sMLCardNo,
                                Birthdate = sBdate
                            };

                            ReceiverInfo ri = new ReceiverInfo
                            {
                                FirstName = rFName,
                                LastName = rLName,
                                MiddleName = rMName,
                                ReceiverName = ReceiverName,
                                Street = rSt,
                                ProvinceCity = rPCity,
                                Country = rCtry,
                                Gender = rG,
                                ContactNo = rCNo,
                                BirthDate = Convert.ToString(rBdate).ToString(),
                                MLCardNo = rMLCardNo
                            };

                            SendoutInfo soi = new SendoutInfo
                            {
                                SendoutControlNo = SendoutControlNo,
                                KPTNNo = KPTNNo,
                                OperatorID = OperatorID,
                                IsPassword = IsPassword,
                                TransPassword = TransPassword,
                                syscreated = syscreated,
                                Currency = Currency,
                                Principal = Principal,
                                SenderID = SenderID,
                                SenderIsSMS = SenderIsSMS,
                                Relation = Relation,
                                Message = Message,
                                StationID = StationID,
                                SourceOfFund = SourceOfFund,
                                Redeem = Redeem,
                                //kptn4 = kptn4,
                                IDNo = IDNo,
                                IDType = IDType,
                                ExpiryDate = ExpiryDate,
                                DormantCharge = DormantCharge,
                                ORNo = ORNo,
                                isSameAmount = isSameAmount,
                                IsRemote = IsRemote,
                                RemoteBranch = RemoteBranch,
                                RemoteOperatorID = RemoteOperatorID,
                                BranchCode = bcode,
                                Charge = Charge,
                                ZoneCode = zcode,
                                Purpose = purpose,
                                RemoteZone = remoteZone,
                                vat = 0.0

                            };
                            kplog.Info("kptn-shortkptn: " + kptn6 + " - " + shortkptn + " - Search Success");
                            return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                        }
                        else
                        {
                            kplog.Error("kptn-shortkptn: " + kptn6 + " - " + shortkptn + " - " + getRespMessage(4));
                            dataReader.Close();
                            conn.Close();
                            return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal("kptn-shortkptn: " + kptn6 + " - " + shortkptn + " - " + ex.ToString(), ex);
                conn.Close();
                if (ex.Message.Equals("4"))
                {
                    kplog.Error("kptn-shortkptn: " + kptn6 + " - " + shortkptn + " - " + getRespMessage(4));
                    return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
                return new SearchResponse { respcode = 0, message = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
            }
        }
    }

    [WebMethod(BufferResponse = false, Description = "Method for searching Partners Transactions")]
    public SearchResponse kptnSearchPartners(String Username, String Password, String kptn, String kptn6, Decimal amount, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new SearchResponse { respcode = 7, message = getRespMessage(7) };
        }


        if (decodeKPTNDomestic(0, kptn6) == "4" || (!istablevalid(decodeKPTNDomestic(0, kptn6))))
        {
            kplog.Error(kptn6 + " - Invalid KPTN number");
            return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new SearchResponse { respcode = 10, message = getRespMessage(10) };
        //}

        using (MySqlConnection conn = dbconPartners.getConnection())
        {
            //DateTime TransDate;
            try
            {
                conn.Open();

                using (command = conn.CreateCommand())
                {
                    List<object> a = new List<object>();

                    SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();
                    // AND IsClaimed = 0 AND IsCancelled = 0
                    //String query = "SELECT SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, kptn4, IDType, IDNo, ExpiryDate, SenderName, ReceiverName FROM " + generateTableName(2) + " as t INNER JOIN ON " + generateTableName(0) + " s ON t.KPTN6 = s.KPTNNo and t.MLKP4TN = s.kptn4 WHERE (MLKP4TN = @kptn OR MLKP4TN = @kptn) and IsClaimed = 0;";
                    String query = "SELECT Purpose, ZoneCode, BranchCode, IsClaimed, IsCancelled , RemoteBranch, RemoteOperatorID,IsRemote, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, ORNo, Charge, RemoteZoneCode FROM " + decodeKPTNDomestic(0, kptn6) + " WHERE KPTNNo = @kptn6;";
                    //throw new Exception(decodeKPTN(0, kptn6));


                    command.CommandText = query;
                    //command.Parameters.AddWithValue("kptn", kptn);
                    command.Parameters.AddWithValue("kptn6", kptn6);
                    using (MySqlDataReader dataReader = command.ExecuteReader())
                    {
                        if (dataReader.HasRows)
                        {
                            dataReader.Read();

                            string sFName = dataReader["SenderFname"].ToString();
                            string sLName = dataReader["SenderLname"].ToString();
                            string sMName = dataReader["SenderMName"].ToString();
                            string sSt = dataReader["SenderStreet"].ToString();
                            string sPCity = dataReader["SenderProvinceCity"].ToString();
                            string sCtry = dataReader["SenderCountry"].ToString();
                            string sG = dataReader["SenderGender"].ToString();
                            string sCNo = dataReader["SenderContactNo"].ToString();
                            Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                            string sBID = dataReader["SenderBranchID"].ToString();
                            string sCustID = dataReader["CustID"].ToString();
                            string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                            string SenderName = dataReader["SenderName"].ToString();

                            string rFName = dataReader["ReceiverFname"].ToString();
                            string rLName = dataReader["ReceiverLname"].ToString();
                            string rMName = dataReader["ReceiverMName"].ToString();
                            string rSt = dataReader["ReceiverStreet"].ToString();
                            string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                            string rCtry = dataReader["ReceiverCountry"].ToString();
                            string rG = dataReader["ReceiverGender"].ToString();
                            string rCNo = dataReader["ReceiverContactNo"].ToString();
                            string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                            string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                            string ReceiverName = dataReader["ReceiverName"].ToString();

                            string SendoutControlNo = dataReader["ControlNo"].ToString();
                            string KPTNNo = dataReader["KPTNNo"].ToString();
                            //string kptn4 = dataReader["kptn4"].ToString();
                            string OperatorID = dataReader["OperatorID"].ToString();
                            //bool IsPassword = (bool)dataReader["IsPassword"];
                            bool IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                            string TransPassword = dataReader["TransPassword"].ToString();
                            DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"]);
                            string Currency = dataReader["Currency"].ToString();
                            Decimal Principal = (Decimal)dataReader["Principal"];
                            string SenderID = dataReader["CustID"].ToString();
                            Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string Relation = dataReader["Relation"].ToString();
                            string Message = dataReader["Message"].ToString();
                            string StationID = dataReader["StationID"].ToString();
                            string SourceOfFund = dataReader["Source"].ToString();
                            string IDType = dataReader["IDType"].ToString();
                            string IDNo = dataReader["IDNo"].ToString();
                            string ExpiryDate = dataReader["ExpiryDate"].ToString();
                            string ORNo = dataReader["ORNo"].ToString();
                            string RemoteBranch = dataReader["RemoteBranch"].ToString();
                            string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                            Boolean isSameAmount = false;
                            //bool IsRemote = (bool)dataReader["IsRemote"];
                            //bool x = (bool)dataReader["IsCancelled"];
                            //bool IsClaimed = (bool)dataReader["IsClaimed"];
                            bool IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                            bool x = Convert.ToBoolean(dataReader["IsCancelled"]);
                            bool IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                            string bcode = dataReader["BranchCode"].ToString();
                            Decimal Charge = Convert.ToDecimal(dataReader["Charge"]);
                            Int32 zcode = Convert.ToInt32(dataReader["ZoneCode"]);
                            string purpose = dataReader["Purpose"].ToString();
                            Int32? remoteZone = dataReader["RemoteZoneCode"] == DBNull.Value ? 0 : Convert.ToInt32(dataReader["RemoteZoneCode"]);
                            //double? vat = dataReader["vat"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["vat"]);

                            if (Principal == amount)
                            {
                                isSameAmount = true;
                            }


                            if (x)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(8));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 8, message = getRespMessage(8), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            if (IsClaimed)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(3));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 3, message = getRespMessage(3), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            dataReader.Close();
                            Decimal DormantCharge = CalculateDormantChargeDomestic(syscreated);
                            conn.Close();
                            SenderInfo si = new SenderInfo
                            {
                                FirstName = sFName,
                                LastName = sLName,
                                MiddleName = sMName,
                                SenderName = SenderName,
                                Street = sSt,
                                ProvinceCity = sPCity,
                                Country = sCtry,
                                Gender = sG,
                                ContactNo = sCNo,
                                IsSMS = sIsSM,
                                BranchID = sBID,
                                CustID = sCustID,
                                SenderMLCardNo = sMLCardNo,
                                Birthdate = sBdate
                            };

                            ReceiverInfo ri = new ReceiverInfo
                            {
                                FirstName = rFName,
                                LastName = rLName,
                                MiddleName = rMName,
                                ReceiverName = ReceiverName,
                                Street = rSt,
                                ProvinceCity = rPCity,
                                Country = rCtry,
                                Gender = rG,
                                ContactNo = rCNo,
                                BirthDate = rBdate,
                                MLCardNo = rMLCardNo
                            };

                            SendoutInfo soi = new SendoutInfo
                            {
                                SendoutControlNo = SendoutControlNo,
                                KPTNNo = KPTNNo,
                                OperatorID = OperatorID,
                                IsPassword = IsPassword,
                                TransPassword = TransPassword,
                                syscreated = syscreated,
                                Currency = Currency,
                                Principal = Principal,
                                SenderID = SenderID,
                                SenderIsSMS = SenderIsSMS,
                                Relation = Relation,
                                Message = Message,
                                StationID = StationID,
                                SourceOfFund = SourceOfFund,
                                //kptn4 = kptn4,
                                IDNo = IDNo,
                                IDType = IDType,
                                ExpiryDate = ExpiryDate,
                                DormantCharge = DormantCharge,
                                ORNo = ORNo,
                                isSameAmount = isSameAmount,
                                IsRemote = IsRemote,
                                RemoteBranch = RemoteBranch,
                                RemoteOperatorID = RemoteOperatorID,
                                BranchCode = bcode,
                                Charge = Charge,
                                ZoneCode = zcode,
                                Purpose = purpose,
                                RemoteZone = remoteZone,
                                vat = 0.0

                            };
                            kplog.Info(kptn6 + " - Search Success");
                            return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                        }
                        else
                        {
                            kplog.Error(kptn6 + " - " + getRespMessage(4));
                            dataReader.Close();
                            conn.Close();
                            return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(kptn6 + " - " + ex.ToString(), ex);
                conn.Close();
                if (ex.Message.Equals("4"))
                {
                    kplog.Error(kptn6 + " - " + getRespMessage(4));
                    return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
                return new SearchResponse { respcode = 0, message = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
            }
        }
    }

    [WebMethod(BufferResponse = false)]
    public SearchResponse kptnSendoutCancelSearch(String Username, String Password, String kptn, String BranchCode, int ZoneCode, Double version, String stationcode)
    {
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new SearchResponse { respcode = 10, message = getRespMessage(10) };
        //}
        if (!authenticate(Username, Password))
        {
            return new SearchResponse { respcode = 7, message = getRespMessage(7) };
        }
        using (MySqlConnection conn = dbconGlobal.getConnection())
        {
            DateTime TransDate;
            try
            {
                conn.Open();
                using (command = conn.CreateCommand())
                {
                    String query = "Select TransDate, IsClaimed, IsCancelled from " + generateTableNameGlobal(2, null) + " WHERE (KPTN6 = @kptn OR MLKP4TN = @kptn) AND IsClaimed = 0 AND IsCancelled = 0;";
                    command.CommandText = query;

                    command.Parameters.AddWithValue("kptn", kptn);
                    MySqlDataReader dataReader = command.ExecuteReader();
                    if (dataReader.Read())
                    {

                        //throw new Exception(dataReader["TransDate"].GetType().ToString());
                        TransDate = Convert.ToDateTime(dataReader["TransDate"]);
                        dataReader.Close();
                    }
                    else
                    {
                        dataReader.Close();

                        using (command = conn.CreateCommand())
                        {
                            String querylocal = "Select TransDate, IsClaimed, IsCancelled from " + generateTableNameGlobal(2, null) + " WHERE (KPTN6 = @kptn OR MLKP4TN = @kptn) ORDER BY TransDate DESC LIMIT 1;";
                            command.CommandText = querylocal;
                            command.Parameters.AddWithValue("kptn", kptn);

                            MySqlDataReader dataReaderlocal = command.ExecuteReader();
                            //throw new Exception(dataReaderlocal.Read().ToString());
                            if (dataReaderlocal.Read())
                            {
                                //throw new Exception(dataReaderlocal["IsClaimed"].ToString());
                                Int32 claimed = Convert.ToInt32(dataReaderlocal["IsClaimed"]);
                                Int32 cancel = Convert.ToInt32(dataReaderlocal["IsCancelled"]);

                                if (claimed == 1)
                                {
                                    kplog.Error(kptn + " - " + getRespMessage(3));
                                    dataReaderlocal.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 3, message = getRespMessage(3) };
                                }
                                if (cancel == 1)
                                {
                                    kplog.Error(kptn + " - " + getRespMessage(3));
                                    dataReaderlocal.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 8, message = getRespMessage(8) };
                                }
                            }

                        }



                        conn.Close();
                        kplog.Info(kptn + " - " + getRespMessage(4));
                        return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                    }
                }
                using (command = conn.CreateCommand())
                {
                    List<object> a = new List<object>();

                    SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();
                    //String query = "SELECT c.FirstName AS SenderFname, c.LastName AS SenderLname, c.MiddleName AS SenderMName, c.Street AS SenderStreet, c.ProvinceCity AS SenderProvCity, c.Country AS SenderCountry, c.Gender AS SenderGender, c.ContactNo AS SenderContactNo, c.IsSMS AS SenderSMS,c.Birthdate AS SenderBDate, c.BranchID AS SenderBID, c.CustID AS SenderCustID , c.MLCardNo as SenderMLCardNo, cr.CustID as ReceiverCustID, cr.FirstName AS ReceiverFname, cr.LastName AS ReceiverLName, cr.MiddleName AS ReceiverMName, cr.Street AS ReceiverStreet, cr.ProvinceCity AS ReceiverProvCity, cr.Country AS ReceiverCountry, cr.Gender AS ReceiverGender, cr.ContactNo AS ReceiverContactNo, cr.IsSMS AS ReceiverSMS, cr.Birthdate AS ReceiverBDate, cr.BranchID AS ReceiverBID, cr.MLCardNo as ReceiverMLCardNo, s.ControlNo, s.KPTNNo, s.OperatorID, s.IsPassword, s.TransPassword, s.syscreated, s.Currency, s.Principal, s.SenderID, s.SenderIsSMS, s.ReceiverID, s.ReceiverIsSMS, s.Relation, s.Message, s.StationID, s.Source, s.kptn4, s.IDType, s.IDNo, s.ExpiryDate, s.ORNo, s.Purpose, s.Charge, s.OtherCharge, s.Total FROM " + generateTableName(0) + " s INNER JOIN kpcustomersglobal.customers c ON s.SenderID = c.CustID  INNER JOIN kpcustomersglobal.customers cr ON s.ReceiverID = cr.CustID WHERE (s.KPTNNo = @kptn OR s.kptn4 = @kptn) and s.IsClaimed = 0 and s.BranchCode = @BranchCode and s.ZoneCode = @ZoneCode;";
                    String query = "SELECT IsRemote, RemoteBranch, ZoneCode, CancelCharge, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, Total, ORNo, Charge, OtherCharge, Purpose FROM " + generateTableNameGlobal(0, TransDate.ToString("yyyy-MM-dd HH:mm:ss")) + " WHERE (KPTNNo = @kptn) AND IsClaimed = 0 AND IsCancelled = 0 and IF(IsRemote, RemoteBranch, BranchCode) = @BranchCode and ZoneCode = @ZoneCode;";
                    command.CommandText = query;
                    command.Parameters.AddWithValue("kptn", kptn);
                    command.Parameters.AddWithValue("BranchCode", BranchCode);
                    command.Parameters.AddWithValue("ZoneCode", ZoneCode);
                    MySqlDataReader dataReader = command.ExecuteReader();

                    if (!dataReader.Read())
                    {
                        kplog.Error(kptn + " - " + getRespMessage(4));
                        dataReader.Close();
                        conn.Close();
                        return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                    }

                    // bool isRemote = (bool)dataReader["IsRemote"];
                    bool isRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                    //throw new Exception("asdf");
                    if (isRemote)
                    {
                        string remotebranch = dataReader["RemoteBranch"].ToString();

                        if (!remotebranch.Equals(BranchCode))
                        {
                            kplog.Error(kptn + " - " + getRespMessage(4));
                            dataReader.Close();
                            conn.Close();
                            return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                        }

                    }
                    string sFName = dataReader["SenderFname"].ToString();
                    string sLName = dataReader["SenderLname"].ToString();
                    string sMName = dataReader["SenderMName"].ToString();
                    string sSt = dataReader["SenderStreet"].ToString();
                    string sPCity = dataReader["SenderProvinceCity"].ToString();
                    string sCtry = dataReader["SenderCountry"].ToString();
                    string sG = dataReader["SenderGender"].ToString();
                    string sCNo = dataReader["SenderContactNo"].ToString();
                    Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                    string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                    string sBID = dataReader["SenderBranchID"].ToString();
                    string sCustID = dataReader["CustID"].ToString();
                    string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                    string SenderName = dataReader["SenderName"].ToString();
                    string rFName = dataReader["ReceiverFname"].ToString();
                    string rLName = dataReader["ReceiverLname"].ToString();
                    string rMName = dataReader["ReceiverMName"].ToString();
                    string rSt = dataReader["ReceiverStreet"].ToString();
                    string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                    string rCtry = dataReader["ReceiverCountry"].ToString();
                    string rG = dataReader["ReceiverGender"].ToString();
                    string rCNo = dataReader["ReceiverContactNo"].ToString();
                    string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();
                    string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                    string ReceiverName = dataReader["ReceiverName"].ToString();

                    string SendoutControlNo = dataReader["ControlNo"].ToString();
                    string KPTNNo = dataReader["KPTNNo"].ToString();
                    //string kptn4 = dataReader["kptn4"].ToString();
                    string OperatorID = dataReader["OperatorID"].ToString();
                    //bool IsPassword = (bool)dataReader["IsPassword"];
                    bool IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                    string TransPassword = dataReader["TransPassword"].ToString();
                    DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"]);

                    string Currency = dataReader["Currency"].ToString();
                    Decimal Principal = (Decimal)dataReader["Principal"];
                    string SenderID = dataReader["CustID"].ToString();
                    Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                    string Relation = dataReader["Relation"].ToString();
                    string Message = dataReader["Message"].ToString();
                    string StationID = dataReader["StationID"].ToString();
                    string SourceOfFund = dataReader["Source"].ToString();
                    string IDType = dataReader["IDType"].ToString();
                    string IDNo = dataReader["IDNo"].ToString();

                    string ExpiryDate = (dataReader["ExpiryDate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ExpiryDate"].ToString();

                    Decimal Total = (Decimal)dataReader["Total"];
                    String ORNo = dataReader["ORNo"].ToString();
                    Decimal Charge = (Decimal)dataReader["Charge"];
                    Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                    Decimal CancelCharge = (dataReader["CancelCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["CancelCharge"];
                    string Purpose = dataReader["Purpose"].ToString();

                    dataReader.Close();
                    //Decimal DormantCharge = CalculateDormantChargeGlobal(syscreated);
                    Decimal DormantCharge = 0.0M;
                    conn.Close();
                    SenderInfo si = new SenderInfo
                    {
                        FirstName = sFName,
                        LastName = sLName,
                        MiddleName = sMName,
                        SenderName = SenderName,
                        Street = sSt,
                        ProvinceCity = sPCity,
                        Country = sCtry,
                        Gender = sG,
                        ContactNo = sCNo,
                        IsSMS = sIsSM,

                        BranchID = sBID,
                        CustID = sCustID,
                        SenderMLCardNo = sMLCardNo,
                        Birthdate = sBdate
                    };

                    ReceiverInfo ri = new ReceiverInfo
                    {
                        FirstName = rFName,
                        LastName = rLName,
                        MiddleName = rMName,
                        ReceiverName = ReceiverName,
                        Street = rSt,
                        ProvinceCity = rPCity,
                        Country = rCtry,
                        Gender = rG,
                        ContactNo = rCNo,
                        BirthDate = rBdate,
                        MLCardNo = rMLCardNo
                    };

                    SendoutInfo soi = new SendoutInfo
                    {
                        SendoutControlNo = SendoutControlNo,
                        KPTNNo = KPTNNo,
                        OperatorID = OperatorID,
                        IsPassword = IsPassword,
                        TransPassword = TransPassword,
                        syscreated = syscreated,
                        Currency = Currency,
                        Principal = Principal,
                        SenderID = SenderID,
                        SenderIsSMS = SenderIsSMS,
                        Relation = Relation,
                        Message = Message,
                        StationID = StationID,
                        SourceOfFund = SourceOfFund,
                        //kptn4 = kptn4,
                        IDNo = IDNo,
                        IDType = IDType,
                        ExpiryDate = ExpiryDate,
                        DormantCharge = DormantCharge,
                        Total = Total,
                        ORNo = ORNo,
                        Charge = Charge,
                        OtherCharge = OtherCharge,
                        Purpose = Purpose,
                        CancelCharge = CancelCharge,
                        ZoneCode = ZoneCode

                    };
                    kplog.Info(kptn + " - Search Success");
                    return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };

                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(kptn + " - " + ex.ToString());
                conn.Close();
                return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
            }
        }
    }


    [WebMethod(BufferResponse = false)]
    public SearchResponse kptnSendoutCancelSearchAdmin(String Username, String Password, String kptn, String BranchCode, int ZoneCode, Double version, String stationcode)
    {
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new SearchResponse { respcode = 10, message = getRespMessage(10) };
        //}
        if (!authenticate(Username, Password))
        {
            return new SearchResponse { respcode = 7, message = getRespMessage(7) };
        }
        using (MySqlConnection conn = dbconGlobal.getConnection())
        {
            DateTime TransDate;
            try
            {
                conn.Open();
                using (command = conn.CreateCommand())
                {
                    String query = "Select TransDate, IsClaimed, IsCancelled from " + generateTableNameGlobal(2, null) + " WHERE (KPTN6 = @kptn OR MLKP4TN = @kptn) AND IsClaimed = 0 AND IsCancelled = 0;";
                    command.CommandText = query;

                    command.Parameters.AddWithValue("kptn", kptn);
                    MySqlDataReader dataReader = command.ExecuteReader();
                    if (dataReader.Read())
                    {

                        //throw new Exception(dataReader["TransDate"].GetType().ToString());
                        TransDate = Convert.ToDateTime(dataReader["TransDate"]);
                        dataReader.Close();
                    }
                    else
                    {
                        dataReader.Close();

                        using (command = conn.CreateCommand())
                        {
                            String querylocal = "Select TransDate, IsClaimed, IsCancelled from " + generateTableNameGlobal(2, null) + " WHERE (KPTN6 = @kptn OR MLKP4TN = @kptn);";
                            command.CommandText = querylocal;
                            command.Parameters.AddWithValue("kptn", kptn);

                            MySqlDataReader dataReaderlocal = command.ExecuteReader();
                            //throw new Exception(dataReaderlocal.Read().ToString());
                            if (dataReaderlocal.Read())
                            {
                                //throw new Exception(dataReaderlocal["IsClaimed"].ToString());
                                Int32 claimed = Convert.ToInt32(dataReaderlocal["IsClaimed"]);
                                Int32 cancel = Convert.ToInt32(dataReaderlocal["IsCancelled"]);

                                if (claimed == 1)
                                {
                                    kplog.Error(getRespMessage(3));
                                    dataReaderlocal.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 3, message = getRespMessage(3) };
                                }
                                if (cancel == 1)
                                {
                                    kplog.Error(getRespMessage(8));
                                    dataReaderlocal.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 8, message = getRespMessage(8) };
                                }
                            }

                        }



                        conn.Close();
                        return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                    }
                }
                using (command = conn.CreateCommand())
                {
                    List<object> a = new List<object>();

                    SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();
                    //String query = "SELECT c.FirstName AS SenderFname, c.LastName AS SenderLname, c.MiddleName AS SenderMName, c.Street AS SenderStreet, c.ProvinceCity AS SenderProvCity, c.Country AS SenderCountry, c.Gender AS SenderGender, c.ContactNo AS SenderContactNo, c.IsSMS AS SenderSMS,c.Birthdate AS SenderBDate, c.BranchID AS SenderBID, c.CustID AS SenderCustID , c.MLCardNo as SenderMLCardNo, cr.CustID as ReceiverCustID, cr.FirstName AS ReceiverFname, cr.LastName AS ReceiverLName, cr.MiddleName AS ReceiverMName, cr.Street AS ReceiverStreet, cr.ProvinceCity AS ReceiverProvCity, cr.Country AS ReceiverCountry, cr.Gender AS ReceiverGender, cr.ContactNo AS ReceiverContactNo, cr.IsSMS AS ReceiverSMS, cr.Birthdate AS ReceiverBDate, cr.BranchID AS ReceiverBID, cr.MLCardNo as ReceiverMLCardNo, s.ControlNo, s.KPTNNo, s.OperatorID, s.IsPassword, s.TransPassword, s.syscreated, s.Currency, s.Principal, s.SenderID, s.SenderIsSMS, s.ReceiverID, s.ReceiverIsSMS, s.Relation, s.Message, s.StationID, s.Source, s.kptn4, s.IDType, s.IDNo, s.ExpiryDate, s.ORNo, s.Purpose, s.Charge, s.OtherCharge, s.Total FROM " + generateTableName(0) + " s INNER JOIN kpcustomersglobal.customers c ON s.SenderID = c.CustID  INNER JOIN kpcustomersglobal.customers cr ON s.ReceiverID = cr.CustID WHERE (s.KPTNNo = @kptn OR s.kptn4 = @kptn) and s.IsClaimed = 0 and s.BranchCode = @BranchCode and s.ZoneCode = @ZoneCode;";
                    String query = "SELECT IsRemote, Reason, RemoteBranch, BranchCode, RemoteOperatorID, ZoneCode, CancelCharge, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, Total, ORNo, Charge, OtherCharge, Purpose FROM " + generateTableNameGlobal(0, TransDate.ToString("yyyy-MM-dd HH:mm:ss")) + " WHERE (KPTNNo = @kptn) AND IsClaimed = 0 AND IsCancelled = 0 ORDER BY transdate DESC LIMIT 1;";
                    command.CommandText = query;
                    command.Parameters.AddWithValue("kptn", kptn);

                    MySqlDataReader dataReader = command.ExecuteReader();

                    if (!dataReader.Read())
                    {
                        kplog.Error(getRespMessage(4));
                        dataReader.Close();
                        conn.Close();
                        return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                    }

                    //  bool isRemote = (bool)dataReader["IsRemote"];
                    bool isRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                    //throw new Exception("asdf");
                    //if (isRemote)
                    //{
                    //    string remotebranch = dataReader["RemoteBranch"].ToString();

                    //    if (!remotebranch.Equals(BranchCode))
                    //    {
                    //        dataReader.Close();
                    //        conn.Close();
                    //        return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                    //    }

                    //}
                    string sFName = dataReader["SenderFname"].ToString();
                    string sLName = dataReader["SenderLname"].ToString();
                    string sMName = dataReader["SenderMName"].ToString();
                    string sSt = dataReader["SenderStreet"].ToString();
                    string sPCity = dataReader["SenderProvinceCity"].ToString();
                    string sCtry = dataReader["SenderCountry"].ToString();
                    string sG = dataReader["SenderGender"].ToString();
                    string sCNo = dataReader["SenderContactNo"].ToString();
                    Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                    string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                    string sBID = dataReader["SenderBranchID"].ToString();
                    string sCustID = dataReader["CustID"].ToString();
                    string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                    string SenderName = dataReader["SenderName"].ToString();
                    string rFName = dataReader["ReceiverFname"].ToString();
                    string rLName = dataReader["ReceiverLname"].ToString();
                    string rMName = dataReader["ReceiverMName"].ToString();
                    string rSt = dataReader["ReceiverStreet"].ToString();
                    string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                    string rCtry = dataReader["ReceiverCountry"].ToString();
                    string rG = dataReader["ReceiverGender"].ToString();
                    string rCNo = dataReader["ReceiverContactNo"].ToString();
                    string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();
                    string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                    string ReceiverName = dataReader["ReceiverName"].ToString();

                    string SendoutControlNo = dataReader["ControlNo"].ToString();
                    string KPTNNo = dataReader["KPTNNo"].ToString();
                    //string kptn4 = dataReader["kptn4"].ToString();
                    string OperatorID = dataReader["OperatorID"].ToString();
                    //    bool IsPassword = (bool)dataReader["IsPassword"];
                    bool IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                    string TransPassword = dataReader["TransPassword"].ToString();
                    DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"]);

                    string Currency = dataReader["Currency"].ToString();
                    Decimal Principal = (Decimal)dataReader["Principal"];
                    string SenderID = dataReader["CustID"].ToString();
                    Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                    string Relation = dataReader["Relation"].ToString();
                    string Message = dataReader["Message"].ToString();
                    string StationID = dataReader["StationID"].ToString();
                    string SourceOfFund = dataReader["Source"].ToString();
                    string IDType = dataReader["IDType"].ToString();
                    string IDNo = dataReader["IDNo"].ToString();

                    string ExpiryDate = (dataReader["ExpiryDate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ExpiryDate"].ToString();

                    Decimal Total = (Decimal)dataReader["Total"];
                    String ORNo = dataReader["ORNo"].ToString();
                    Decimal Charge = (Decimal)dataReader["Charge"];
                    Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                    Decimal CancelCharge = (dataReader["CancelCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["CancelCharge"];
                    string Purpose = dataReader["Purpose"].ToString();
                    string RemoteBranch = dataReader["RemoteBranch"].ToString();
                    string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                    string BCode = dataReader["BranchCode"].ToString();
                    string Reason = dataReader["Reason"].ToString();
                    dataReader.Close();
                    //Decimal DormantCharge = CalculateDormantChargeGlobal(syscreated);
                    Decimal DormantCharge = 0.0M;
                    conn.Close();
                    SenderInfo si = new SenderInfo
                    {
                        FirstName = sFName,
                        LastName = sLName,
                        MiddleName = sMName,
                        SenderName = SenderName,
                        Street = sSt,
                        ProvinceCity = sPCity,
                        Country = sCtry,
                        Gender = sG,
                        ContactNo = sCNo,
                        IsSMS = sIsSM,

                        BranchID = sBID,
                        CustID = sCustID,
                        SenderMLCardNo = sMLCardNo,
                        Birthdate = sBdate
                    };

                    ReceiverInfo ri = new ReceiverInfo
                    {
                        FirstName = rFName,
                        LastName = rLName,
                        MiddleName = rMName,
                        ReceiverName = ReceiverName,
                        Street = rSt,
                        ProvinceCity = rPCity,
                        Country = rCtry,
                        Gender = rG,
                        ContactNo = rCNo,
                        BirthDate = rBdate,
                        MLCardNo = rMLCardNo
                    };

                    SendoutInfo soi = new SendoutInfo
                    {
                        SendoutControlNo = SendoutControlNo,
                        KPTNNo = KPTNNo,
                        OperatorID = OperatorID,
                        IsPassword = IsPassword,
                        TransPassword = TransPassword,
                        syscreated = syscreated,
                        Currency = Currency,
                        Principal = Principal,
                        SenderID = SenderID,
                        SenderIsSMS = SenderIsSMS,
                        Relation = Relation,
                        Message = Message,
                        StationID = StationID,
                        SourceOfFund = SourceOfFund,
                        //kptn4 = kptn4,
                        IDNo = IDNo,
                        IDType = IDType,
                        ExpiryDate = ExpiryDate,
                        DormantCharge = DormantCharge,
                        Total = Total,
                        ORNo = ORNo,
                        Charge = Charge,
                        OtherCharge = OtherCharge,
                        Purpose = Purpose,
                        CancelCharge = CancelCharge,
                        ZoneCode = ZoneCode,
                        IsRemote = isRemote,
                        RemoteBranch = RemoteBranch,
                        RemoteOperatorID = RemoteOperatorID,
                        BranchCode = BCode,
                        RemoteReason = Reason



                    };

                    return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };

                }
            }
            catch (Exception ex)
            {
                kplog.Error(ex.ToString());
                conn.Close();
                return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
            }
        }
    }


    [WebMethod]
    public RePrintResponse saveReprintDomestic(String Username, String Password, String KPTNNo, String OperatorID, String reprintBcode, Int32 reprintZcode, String Reason, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new RePrintResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new RePrintResponse { respcode = 10, message = getRespMessage(10) };
        //}
        using (MySqlConnection conn = dbconDomestic.getConnection())
        {
            try
            {
                conn.Open();
                using (command = conn.CreateCommand())
                {
                    dt = getServerDateGlobal(true);
                    command.CommandText = "Insert into kpdomestic.reprint (`KPTNNo`,`ReprintDate`,`OperatorID`,`BranchCode`,`ZoneCode`, `Reason`) values (@KPTNNo,@ReprintDate,@OperatorID,@BranchCode,@ZoneCode,@Reason)";
                    command.Parameters.AddWithValue("KPTNNo", KPTNNo);
                    //command.Parameters.AddWithValue("kptn4", kptn4);
                    command.Parameters.AddWithValue("ReprintDate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                    command.Parameters.AddWithValue("OperatorID", OperatorID);
                    command.Parameters.AddWithValue("BranchCode", reprintBcode);
                    command.Parameters.AddWithValue("ZoneCode", reprintZcode);
                    command.Parameters.AddWithValue("Reason", Reason);
                    command.ExecuteNonQuery();
                    conn.Close();
                    kplog.Info(KPTNNo + " - Reprint Successfully Saved to kpdomestic.reprint");
                    return new RePrintResponse { respcode = 1, message = getRespMessage(1) };
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(KPTNNo + " - " + ex.ToString());
                conn.Close();
                return new RePrintResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }

    }


    [WebMethod(BufferResponse = false)]
    public SearchResponse rePrintDomestic(String Username, String Password, String kptn, Int32 type, Double version, String stationcode, String shortkptn)
    {
        try
        {
            if (!authenticate(Username, Password))
            {
                return new SearchResponse { respcode = 7, message = getRespMessage(7) };
            }

            if (shortkptn == "")
            {
                if (kptn.Substring(0, 3) == "MCD")
                {
                    if (type == 0)
                    {
                        return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                    }
                    try
                    {
                        CloudService.SearchResponse resp = new CloudService.SearchResponse();
                        CloudService.MLhuillier client = new CloudService.MLhuillier();

                        resp = client.rePrintDomestic(Username, Password, kptn, type, version, stationcode, shortkptn);
                        var senderinfo = new SenderInfo();
                        var receiverinfo = new ReceiverInfo();
                        var payoutinfo = new PayoutInfo();
                        if (resp.respcode == 1)
                        {
                            senderinfo = new SenderInfo
                            {
                                BranchID = resp.SenderInfo.BranchID,
                                ContactNo = resp.SenderInfo.ContactNo,
                                Country = resp.SenderInfo.Country,
                                CustID = resp.SenderInfo.CustID,
                                FirstName = resp.SenderInfo.FirstName,
                                Gender = resp.SenderInfo.Gender,
                                IsSMS = resp.SenderInfo.IsSMS,
                                LastName = resp.SenderInfo.LastName,
                                MiddleName = resp.SenderInfo.MiddleName,
                                ProvinceCity = resp.SenderInfo.ProvinceCity,
                                SenderMLCardNo = resp.SenderInfo.SenderMLCardNo,
                                SenderName = resp.SenderInfo.SenderName,
                                Street = resp.SenderInfo.Street
                            };

                            receiverinfo = new ReceiverInfo
                            {
                                BirthDate = resp.ReceiverInfo.BirthDate,
                                ContactNo = resp.ReceiverInfo.ContactNo,
                                Country = resp.ReceiverInfo.Country,
                                FirstName = resp.ReceiverInfo.FirstName,
                                Gender = resp.ReceiverInfo.Gender,
                                LastName = resp.ReceiverInfo.LastName,
                                MiddleName = resp.ReceiverInfo.MiddleName,
                                MLCardNo = resp.ReceiverInfo.MLCardNo,
                                ProvinceCity = resp.ReceiverInfo.ProvinceCity,
                                ReceiverName = resp.ReceiverInfo.ReceiverName,
                                Street = resp.ReceiverInfo.Street
                            };

                            payoutinfo = new PayoutInfo
                            {
                                SendoutControlNo = resp.PayoutInfo.SendoutControlNo,
                                KPTNNo = resp.PayoutInfo.KPTNNo,
                                OperatorID = resp.PayoutInfo.OperatorID,
                                TransPassword = resp.PayoutInfo.TransPassword,
                                Currency = resp.PayoutInfo.Currency,
                                Principal = resp.PayoutInfo.Principal,
                                SenderID = resp.PayoutInfo.SenderID,
                                SenderIsSMS = resp.PayoutInfo.SenderIsSMS,
                                Relation = resp.PayoutInfo.Relation,
                                Message = resp.PayoutInfo.Message,
                                StationID = resp.PayoutInfo.StationID,
                                SourceOfFund = resp.PayoutInfo.SourceOfFund,
                                IDNo = resp.PayoutInfo.IDNo,
                                IDType = resp.PayoutInfo.IDType,
                                ExpiryDate = resp.PayoutInfo.ExpiryDate,
                                DormantCharge = resp.PayoutInfo.DormantCharge,
                                RemoteOperatorID = resp.PayoutInfo.RemoteOperatorID,
                                RemoteBranch = resp.PayoutInfo.RemoteBranch,
                                BranchCode = resp.PayoutInfo.BranchCode,
                                ControlNo = resp.PayoutInfo.ControlNo,
                                ClaimedDate = resp.PayoutInfo.ClaimedDate,
                                SODate = resp.PayoutInfo.SODate,
                                SOORNo = resp.PayoutInfo.SOORNo,
                                Charge = resp.PayoutInfo.Charge,
                                OtherCharge = resp.PayoutInfo.OtherCharge,
                                Total = resp.PayoutInfo.Total,
                                Purpose = resp.PayoutInfo.Purpose,
                                SOMessage = resp.PayoutInfo.SOMessage,
                                ZoneCode = resp.PayoutInfo.ZoneCode,
                                IsRemote = resp.PayoutInfo.IsRemote,
                                Balance = resp.PayoutInfo.Balance,
                                RemoteZone = resp.PayoutInfo.RemoteZone
                            };
                        }
                        kplog.Info(kptn + " - Cloud Response: " + resp.message);
                        return new SearchResponse { respcode = resp.respcode, message = resp.message, SenderInfo = senderinfo, ReceiverInfo = receiverinfo, PayoutInfo = payoutinfo };
                    }
                    catch (Exception ex)
                    {
                        kplog.Fatal(kptn + " - Cloud Catch: " + ex.ToString());
                        return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                    }

                }
                else
                {
                    if (decodeKPTNDomestic(0, kptn) == "4" || (!istablevalid(decodeKPTNDomestic(0, kptn))))
                    {
                        kplog.Error(kptn + " - Invalid KPTN number");
                        return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
                    }
                }
            }

            if (kptn != "")
            {

            }

            if (type > 1 || 1 < 0)
            {
                kplog.Error(kptn + " - Type must not be greater or less than 1 and 0");
                return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = "Type must not be greater or less than 1 and 0" };
            }
            using (MySqlConnection conn = dbconDomestic.getConnection())
            {
                //DateTime TransDate;
                DateTime ClaimDate = DateTime.Now;
                //Boolean isClaimed;
                try
                {
                    conn.Open();
                    //trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (command = conn.CreateCommand())
                    {
                        if (shortkptn != "")
                        {
                            command.CommandText = "SELECT kptnno FROM kpadminlogs.shortenKPTN WHERE shortkptnno=@shortkptnno";
                            command.CommandType = CommandType.Text;
                            command.Parameters.AddWithValue("shortkptnno", shortkptn);
                            MySqlDataReader rdr = command.ExecuteReader();
                            if (rdr.Read())
                            {
                                kptn = rdr["kptnno"].ToString();
                            }
                            rdr.Close();
                        }

                        List<object> a = new List<object>();

                        //SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();
                        //String query = "SELECT SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, kptn4, IDType, IDNo, ExpiryDate, SenderName, ReceiverName FROM " + generateTableName(2) + " as t INNER JOIN ON " + generateTableName(0) + " s ON t.KPTN6 = s.KPTNNo and t.MLKP4TN = s.kptn4 WHERE (MLKP4TN = @kptn OR MLKP4TN = @kptn) and IsClaimed = 0;";
                        SendoutInfo soi;
                        SenderInfo si;
                        ReceiverInfo ri;
                        PayoutInfo poi;
                        if (type == 0)
                        {
                            //String query = "SELECT SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, kptn4, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, RemoteBranch, RemoteOperatorID, ControlNo, BranchCode, Redeem, ORNo FROM " + generateTableName(0, TransDate.ToString("yyyy-MM-dd HH:mm:ss")) + " WHERE (KPTNNo = @kptn OR kptn4 = @kptn);";
                            String query = "SELECT ControlNo, KPTNNo, ORNo, IRNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, IsPassword, TransPassword, Purpose, OLDKPTNNo, IsClaimed, IsCancelled, syscreated, syscreator, sysmodified, sysmodifier, Source, Currency, Principal, Charge, OtherCharge, Redeem, Total, Promo, SenderIsSMS, Relation, Message, IDType, IDNo, ExpiryDate, CancelledDate, BranchCode, ZoneCode, TransDate, CancelledByOperatorID, CancelledByBranchCode, CancelledByZoneCode, CancelledByStationID, CancelReason, CancelDetails, CustID, SenderMLCardNo, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderBirthdate, SenderBranchID, ReceiverMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthDate, CancelCharge, ChargeTo,remotezonecode FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn;";
                            command.CommandText = query;
                            command.Parameters.AddWithValue("kptn", kptn);
                            MySqlDataReader dataReader = command.ExecuteReader();

                            if (dataReader.HasRows)
                            {
                                dataReader.Read();

                                //gi-comment na pd ni ky dapat japun dw maka reprint giatay na sila yaw klaro mo findings ipabalik na pd shit egit!
                                //if (dataReader["iscancelled"].ToString().Trim() == "True")
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 101, message = "Unable to reprint sendout... \nTransaction were cancelled!", ErrorDetail = "Dili na pwde maka-sendout reprint ky gi-cancel mn ang transaction!" };
                                //}

                                //string test = dataReader["isclaimed"].ToString();
                                //if (dataReader["isclaimed"].ToString().Trim() == "True")
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 101, message = "Unable to reprint sendout... \nTransaction were already claimed!", ErrorDetail = "Dili na pwde maka-sendout reprint kun na-claimed na!" };
                                //}
                                string test1 = dataReader["iscancelled"].ToString();

                                string sFName = dataReader["SenderFname"].ToString();
                                string sLName = dataReader["SenderLname"].ToString();
                                string sMName = dataReader["SenderMName"].ToString();
                                string sSt = dataReader["SenderStreet"].ToString();
                                string sPCity = dataReader["SenderProvinceCity"].ToString();
                                string sCtry = dataReader["SenderCountry"].ToString();
                                string sG = dataReader["SenderGender"].ToString();
                                string sCNo = dataReader["SenderContactNo"].ToString();
                                Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                                string sBID = dataReader["SenderBranchID"].ToString();
                                string sCustID = dataReader["CustID"].ToString();
                                string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                                string SenderName = dataReader["SenderName"].ToString();

                                string rFName = dataReader["ReceiverFname"].ToString();
                                string rLName = dataReader["ReceiverLname"].ToString();
                                string rMName = dataReader["ReceiverMName"].ToString();
                                string rSt = dataReader["ReceiverStreet"].ToString();
                                string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                                string rCtry = dataReader["ReceiverCountry"].ToString();
                                string rG = dataReader["ReceiverGender"].ToString();
                                string rCNo = dataReader["ReceiverContactNo"].ToString();
                                string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                                string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                                string ReceiverName = dataReader["ReceiverName"].ToString();

                                string SendoutControlNo = dataReader["ControlNo"].ToString();
                                string KPTNNo = dataReader["KPTNNo"].ToString();
                                //string kptn4 = dataReader["kptn4"].ToString();
                                string OperatorID = dataReader["OperatorID"].ToString();
                                // bool IsPassword = (bool)dataReader["IsPassword"];
                                bool IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                                string TransPassword = dataReader["TransPassword"].ToString();
                                DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"].ToString());
                                string Currency = dataReader["Currency"].ToString();
                                Decimal Principal = (Decimal)dataReader["Principal"];
                                string SenderID = dataReader["CustID"].ToString();
                                Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string Relation = dataReader["Relation"].ToString();
                                string Message = dataReader["Message"].ToString();
                                string StationID = dataReader["StationID"].ToString();
                                string SourceOfFund = dataReader["Source"].ToString();
                                string IDType = dataReader["IDType"].ToString();
                                string IDNo = dataReader["IDNo"].ToString();
                                string ExpiryDate = dataReader["ExpiryDate"].ToString();
                                //RemoteBranch, RemoteOperatorID, IDType, IDNo, ExpiryDate,ControlNo
                                string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                                string ControlNo = dataReader["ControlNo"].ToString();
                                string BranchCode = dataReader["BranchCode"].ToString();
                                Decimal Redeem = (Decimal)dataReader["Redeem"];
                                string ORNo = dataReader["ORNo"].ToString();
                                Decimal Total = (Decimal)dataReader["Total"];
                                Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                                Decimal Charge = (Decimal)dataReader["Charge"];
                                string Purpose = dataReader["Purpose"].ToString();
                                Int32 ZoneCode = Convert.ToInt32(dataReader["ZoneCode"]);
                                //bool IsRemote = (bool)dataReader["IsRemote"];
                                bool IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                                Decimal CancelCharge = (dataReader["CancelCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["CancelCharge"];
                                //bool x = (bool)dataReader["IsCancelled"];
                                //bool IsClaimed = (bool)dataReader["IsClaimed"];
                                bool x = Convert.ToBoolean(dataReader["IsCancelled"]);
                                bool IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                                String reason = dataReader["Reason"].ToString();
                                String cancelReason = dataReader["CancelReason"].ToString();
                                //Int32 remotezone = Convert.ToInt32(dataReader["remotezonecode"]);
                                Int32 remotezone = (dataReader["remotezonecode"] == DBNull.Value) ? 0 : Convert.ToInt32(dataReader["remotezonecode"].ToString());

                                // BETA for testing
                                //if (x && !cancelReason.Equals("Return to Sender"))
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 8, message = getRespMessage(8), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                //}

                                //if (!IsClaimed)
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                //}

                                //string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                //string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();

                                dataReader.Close();

                                Decimal DormantCharge = CalculateDormantChargeDomestic(syscreated);


                                //command.Transaction = trans;
                                command.Parameters.Clear();
                                command.CommandText = "kpadminlogs.savelog53";
                                command.CommandType = CommandType.StoredProcedure;

                                command.Parameters.AddWithValue("kptnno", KPTNNo);
                                command.Parameters.AddWithValue("action", "SO REPRINT");
                                command.Parameters.AddWithValue("isremote", IsRemote);
                                command.Parameters.AddWithValue("txndate", syscreated);
                                command.Parameters.AddWithValue("stationcode", stationcode);
                                command.Parameters.AddWithValue("stationno", StationID);
                                command.Parameters.AddWithValue("zonecode", ZoneCode);
                                command.Parameters.AddWithValue("branchcode", BranchCode);
                                command.Parameters.AddWithValue("branchname", DBNull.Value);
                                command.Parameters.AddWithValue("operatorid", OperatorID);
                                command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                                command.Parameters.AddWithValue("remotereason", reason);
                                command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                                command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                                command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                                command.Parameters.AddWithValue("remotezonecode", remotezone);
                                command.Parameters.AddWithValue("type", "N");
                                try
                                {
                                    command.ExecuteNonQuery();
                                    //trans.Commit();
                                    conn.Close();
                                }
                                catch (MySqlException ex)
                                {
                                    kplog.Fatal(kptn + " - " + ex.ToString());
                                    //trans.Rollback();
                                    conn.Close();
                                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                                }

                                si = new SenderInfo
                                {
                                    FirstName = sFName,
                                    LastName = sLName,
                                    MiddleName = sMName,
                                    SenderName = SenderName,
                                    Street = sSt,
                                    ProvinceCity = sPCity,
                                    Country = sCtry,
                                    Gender = sG,
                                    ContactNo = sCNo,
                                    IsSMS = sIsSM,
                                    BranchID = sBID,
                                    CustID = sCustID,
                                    SenderMLCardNo = sMLCardNo
                                };

                                ri = new ReceiverInfo
                                {
                                    FirstName = rFName,
                                    LastName = rLName,
                                    MiddleName = rMName,
                                    ReceiverName = ReceiverName,
                                    Street = rSt,
                                    ProvinceCity = rPCity,
                                    Country = rCtry,
                                    Gender = rG,
                                    ContactNo = rCNo,
                                    BirthDate = rBdate,
                                    MLCardNo = rMLCardNo
                                };

                                soi = new SendoutInfo
                                {
                                    SendoutControlNo = SendoutControlNo,
                                    KPTNNo = KPTNNo,
                                    OperatorID = OperatorID,
                                    IsPassword = IsPassword,
                                    TransPassword = TransPassword,
                                    syscreated = syscreated,
                                    Currency = Currency,
                                    Principal = Principal,
                                    SenderID = SenderID,
                                    SenderIsSMS = SenderIsSMS,
                                    Relation = Relation,
                                    Message = Message,
                                    StationID = StationID,
                                    SourceOfFund = SourceOfFund,
                                    //kptn4 = kptn4,
                                    IDNo = IDNo,
                                    IDType = IDType,
                                    ExpiryDate = ExpiryDate,
                                    DormantCharge = DormantCharge,
                                    RemoteOperatorID = RemoteOperatorID,
                                    RemoteBranch = RemoteBranch,
                                    BranchCode = BranchCode,
                                    Redeem = Redeem,
                                    ORNo = ORNo,
                                    Charge = Charge,
                                    OtherCharge = OtherCharge,
                                    Purpose = Purpose,
                                    Total = Total,
                                    ZoneCode = ZoneCode,
                                    IsRemote = IsRemote,
                                    CancelCharge = CancelCharge,
                                    RemoteReason = reason,
                                    RemoteZone = remotezone
                                };
                                kplog.Info(kptn + " - Reprinting Success");
                                return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                            }
                            else
                            {
                                kplog.Error(kptn + " - " + getRespMessage(4));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                            }
                        }
                        else
                        {
                            using (command = conn.CreateCommand())
                            {
                                String query1 = "SELECT date(sysmodified) as sysmodified FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn1 and isCancelled = 0;";
                                command.CommandText = query1;
                                command.Parameters.AddWithValue("kptn1", kptn);
                                MySqlDataReader dataReader1 = command.ExecuteReader();

                                if (dataReader1.HasRows)
                                {
                                    dataReader1.Read();
                                    string dat = dataReader1["sysmodified"].ToString();
                                    // throw new Exception(dataReader1["sysmodified"].GetType());
                                    if (!(dataReader1["sysmodified"].GetType().ToString().Equals("System.DBNull") || dat == "0/0/0000"))
                                    {

                                        ClaimDate = Convert.ToDateTime(dataReader1["sysmodified"].ToString());
                                        //TransDate = Convert.ToDateTime(dataReader1["TransDate"]);
                                        dataReader1.Close();
                                    }
                                    else
                                    {
                                        kplog.Error(kptn + " - " + getRespMessage(9));
                                        dataReader1.Close();
                                        conn.Close();
                                        return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                    }
                                }
                                else
                                {
                                    kplog.Error(kptn + " - " + getRespMessage(4));
                                    dataReader1.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                                }
                            }

                            //String query = "SELECT if(cancelledtype is null or cancelledtype='','xxx','yyy') as iscancelled,Reason, DormantCharge, Balance, IsRemote, ZoneCode, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SOBranch, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, KPTNNo, OperatorID, Currency, Principal, Relation, StationID,  IDType, IDNo, ExpiryDate, SenderName, ReceiverName, RemoteBranch, RemoteOperatorID, ControlNo, BranchCode, ClaimedDate, SODate, SOORNo, (SELECT TransPassword FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as TransPass, (SELECT Charge FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Charge, (SELECT OtherCharge FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as OtherCharge, (SELECT Total FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Total, (SELECT Purpose FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Purpose, (SELECT Source FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Source, (SELECT Message FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Message, (SELECT IsClaimed FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as IsClaimed,"
                            //    + "(SELECT ControlNo FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as SendoutControl, remotezonecode FROM " + generateTableNameDomestic(1, ClaimDate.ToString("yyyy-MM-dd HH:mm:ss")) + " WHERE KPTNNo = @kptn OR oldKPTNNo = @kptn ORDER BY ClaimedDate DESC LIMIT 1;";
                            String query = "SELECT if(cancelledtype is null or cancelledtype='','xxx','yyy') as iscancelled,Reason, DormantCharge, Balance, IsRemote, ZoneCode, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SOBranch, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, if(KPTNNo like '%99999%',oldkptnno,kptnno) as KPTNNo, OperatorID, Currency, Principal, Relation, StationID,  IDType, IDNo, ExpiryDate, SenderName, ReceiverName, RemoteBranch, RemoteOperatorID, ControlNo, BranchCode, ClaimedDate, SODate, SOORNo, (SELECT TransPassword FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as TransPass, (SELECT Charge FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Charge, (SELECT OtherCharge FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as OtherCharge, (SELECT Total FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Total, (SELECT Purpose FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Purpose, (SELECT Source FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Source, (SELECT Message FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Message, (SELECT IsClaimed FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as IsClaimed,"
                               + "(SELECT ControlNo FROM " + decodeKPTNDomestic(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as SendoutControl, remotezonecode FROM " + generateTableNameDomestic(1, ClaimDate.ToString("yyyy-MM-dd HH:mm:ss")) + " WHERE KPTNNo = @kptn OR oldKPTNNo = @kptn ORDER BY ClaimedDate DESC LIMIT 1;";
                            command.CommandText = query;
                            command.Parameters.AddWithValue("kptn", kptn);

                            MySqlDataReader dataReader = command.ExecuteReader();
                            if (dataReader.HasRows)
                            {
                                dataReader.Read();
                                //if (dataReader["iscancelled"].ToString() == "xxx")
                                //{
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 101, message = "Unable to reprint payout... \nTransaction was cancelled!", ErrorDetail = "Dili na pwde maka-payout reprint ky gi-cancel ang transaction!" };
                                //}

                                string sFName = dataReader["SenderFname"].ToString();
                                string sLName = dataReader["SenderLname"].ToString();
                                string sMName = dataReader["SenderMName"].ToString();
                                string sSt = dataReader["SenderStreet"].ToString();
                                string sPCity = dataReader["SenderProvinceCity"].ToString();
                                string sCtry = dataReader["SenderCountry"].ToString();
                                string sG = dataReader["SenderGender"].ToString();
                                string sCNo = dataReader["SenderContactNo"].ToString();
                                Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                                string sBID = dataReader["SOBranch"].ToString();
                                string sCustID = dataReader["CustID"].ToString();
                                string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                                string SenderName = dataReader["SenderName"].ToString();
                                string rFName = dataReader["ReceiverFname"].ToString();
                                string rLName = dataReader["ReceiverLname"].ToString();
                                string rMName = dataReader["ReceiverMName"].ToString();
                                string rSt = dataReader["ReceiverStreet"].ToString();
                                string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                                string rCtry = dataReader["ReceiverCountry"].ToString();
                                string rG = dataReader["ReceiverGender"].ToString();
                                string rCNo = dataReader["ReceiverContactNo"].ToString();

                                string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                                string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                                string ReceiverName = dataReader["ReceiverName"].ToString();

                                string SendoutControlNo = dataReader["SendoutControl"].ToString();
                                string KPTNNo = dataReader["KPTNNo"].ToString();
                                //string kptn4 = null;
                                string OperatorID = dataReader["OperatorID"].ToString();
                                //bool IsPassword = (bool)dataReader["IsPassword"];
                                string TransPassword = dataReader["TransPass"].ToString();
                                //DateTime syscreated = (DateTime)dataReader["TransDate "];
                                string Currency = dataReader["Currency"].ToString();
                                Decimal Principal = (Decimal)dataReader["Principal"];
                                string SenderID = dataReader["CustID"].ToString();
                                Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string Relation = dataReader["Relation"].ToString();
                                string Message = null;
                                string StationID = dataReader["StationID"].ToString();
                                string SourceOfFund = dataReader["Source"].ToString();
                                string IDType = dataReader["IDType"].ToString();
                                string IDNo = dataReader["IDNo"].ToString();
                                string ExpiryDate = dataReader["ExpiryDate"].ToString();
                                string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                                string ControlNo = dataReader["ControlNo"].ToString();
                                string BranchCode = dataReader["BranchCode"].ToString();

                                string ClaimedDate = Convert.ToDateTime(dataReader["ClaimedDate"]).ToString("yyyy-MM-dd HH:mm:ss");
                                string SODate = Convert.ToDateTime(dataReader["SODate"]).ToString("yyyy-MM-dd HH:mm:ss");
                                string SOORNo = dataReader["SOORNo"].ToString();
                                string reason = dataReader["Reason"].ToString();


                                //Decimal Redeem = (Decimal)dataReader["Redeem"];

                                Decimal Total = (Decimal)dataReader["Total"];

                                Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                                Decimal Charge = (Decimal)dataReader["Charge"];
                                string Purpose = dataReader["Purpose"].ToString();
                                string message = dataReader["Message"].ToString();
                                Int32 ZoneCode = Convert.ToInt32(dataReader["ZoneCode"]);
                                //throw new Exception(dataReader["DormantCharge"].GetType().ToString());
                                Decimal Dormant = (dataReader["DormantCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["DormantCharge"];
                                Decimal Balance = (dataReader["Balance"] == DBNull.Value) ? 0 : (Decimal)dataReader["Balance"]; ;
                                // bool IsRemote = (bool)dataReader["IsRemote"];
                                bool IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                                //throw new Exception(dataReader["IsClaimed"].ToString());
                                String IsClaimed = dataReader["IsClaimed"].ToString();
                                // Int32 remotezone = Convert.ToInt32(dataReader["remotezonecode"]);
                                Int32 remotezone = (dataReader["remotezonecode"] == DBNull.Value) ? 0 : Convert.ToInt32(dataReader["remotezonecode"].ToString());

                                //if (!IsClaimed.Equals("1"))
                                //{
                                //    kplog.Error(getRespMessage(9));
                                //    dataReader.Close();
                                //    conn.Close();
                                //    return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                //}

                                dataReader.Close();
                                //Decimal DormantCharge = CalculateDormantCharge(syscreated);


                                //trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                                //command.Transaction = trans;
                                command.Parameters.Clear();
                                command.CommandText = "kpadminlogs.savelog53";
                                command.CommandType = CommandType.StoredProcedure;

                                command.Parameters.AddWithValue("kptnno", KPTNNo);
                                command.Parameters.AddWithValue("action", "PO REPRINT");
                                command.Parameters.AddWithValue("isremote", IsRemote);
                                command.Parameters.AddWithValue("txndate", ClaimedDate);
                                command.Parameters.AddWithValue("stationcode", stationcode);
                                command.Parameters.AddWithValue("stationno", StationID);
                                command.Parameters.AddWithValue("zonecode", ZoneCode);
                                command.Parameters.AddWithValue("branchcode", BranchCode);
                                command.Parameters.AddWithValue("branchname", DBNull.Value);
                                command.Parameters.AddWithValue("operatorid", OperatorID);
                                command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                                command.Parameters.AddWithValue("remotereason", reason);
                                command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                                command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                                command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                                command.Parameters.AddWithValue("remotezonecode", remotezone);
                                command.Parameters.AddWithValue("type", "N");
                                try
                                {
                                    command.ExecuteNonQuery();
                                    //trans.Commit();
                                    conn.Close();
                                }
                                catch (MySqlException ex)
                                {
                                    kplog.Fatal(kptn + " - " + ex.ToString());
                                    //trans.Rollback();
                                    conn.Close();
                                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                                }
                                si = new SenderInfo
                                {
                                    FirstName = sFName,
                                    LastName = sLName,
                                    MiddleName = sMName,
                                    SenderName = SenderName,
                                    Street = sSt,
                                    ProvinceCity = sPCity,
                                    Country = sCtry,
                                    Gender = sG,
                                    ContactNo = sCNo,
                                    IsSMS = sIsSM,
                                    BranchID = sBID,
                                    CustID = sCustID,
                                    SenderMLCardNo = sMLCardNo
                                };

                                ri = new ReceiverInfo
                                {
                                    FirstName = rFName,
                                    LastName = rLName,
                                    MiddleName = rMName,
                                    ReceiverName = ReceiverName,
                                    Street = rSt,
                                    ProvinceCity = rPCity,
                                    Country = rCtry,
                                    Gender = rG,
                                    ContactNo = rCNo,
                                    BirthDate = rBdate,
                                    MLCardNo = rMLCardNo
                                };

                                poi = new PayoutInfo
                                {
                                    SendoutControlNo = SendoutControlNo,
                                    KPTNNo = KPTNNo,
                                    OperatorID = OperatorID,
                                    //IsPassword = IsPassword,
                                    TransPassword = TransPassword,
                                    //syscreated = syscreated,
                                    Currency = Currency,
                                    Principal = Principal,
                                    SenderID = SenderID,
                                    SenderIsSMS = SenderIsSMS,
                                    Relation = Relation,
                                    Message = Message,
                                    StationID = StationID,
                                    SourceOfFund = SourceOfFund,
                                    //kptn4 = kptn4,
                                    IDNo = IDNo,
                                    IDType = IDType,
                                    ExpiryDate = ExpiryDate,
                                    RemoteBranch = RemoteBranch,
                                    RemoteOperatorID = RemoteOperatorID,
                                    ControlNo = ControlNo,
                                    BranchCode = BranchCode,
                                    ClaimedDate = ClaimedDate,
                                    SODate = SODate,
                                    SOORNo = SOORNo,
                                    Charge = Charge,
                                    OtherCharge = OtherCharge,
                                    Total = Total,
                                    Purpose = Purpose,
                                    SOMessage = message,
                                    ZoneCode = ZoneCode,
                                    IsRemote = IsRemote,
                                    Balance = Balance,
                                    DormantCharge = Dormant,
                                    RemoteZone = remotezone
                                    //DormantCharge = DormantCharge
                                };

                                kplog.Info(kptn + " - Reprinting Success");
                                return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, PayoutInfo = poi };
                            }
                            else
                            {
                                kplog.Error(kptn + " - " + getRespMessage(4));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(kptn + " - " + ex.ToString());
                    conn.Close();
                    if (ex.Message.Equals("4"))
                    {
                        kplog.Error(kptn + " - Debug: ex.message == 4");
                        return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                    }
                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(kptn + " - Outer exception catched!", ex);
            return new SearchResponse { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
        }
    }

    [WebMethod(BufferResponse = false)]
    public SearchResponse rePrintWallet(String Username, String Password, String kptn, Int32 type, Double version, String stationcode)
    {
        try
        {
            if (!authenticate(Username, Password))
            {
                return new SearchResponse { respcode = 7, message = getRespMessage(7) };
            }
            if (decodeKPTNWallet(0, kptn) == "4" || (!istablevalid(decodeKPTNWallet(0, kptn))))
            {
                return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
            }
            if (type > 1 || 1 < 0)
            {
                kplog.Error("Type must not be greater or less than 1 and 0");
                return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = "Type must not be greater or less than 1 and 0" };
            }
            using (MySqlConnection conn = dbconWallet.getConnection())
            {
                DateTime ClaimDate = DateTime.Now;
                try
                {
                    conn.Open();
                    //trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (command = conn.CreateCommand())
                    {
                        List<object> a = new List<object>();

                        SendoutInfo soi;
                        SenderInfo si;
                        ReceiverInfo ri;
                        PayoutInfo poi;
                        if (type == 0)
                        {
                            String query = "SELECT ControlNo, KPTNNo, ORNo, IRNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, IsPassword, TransPassword, Purpose, OLDKPTNNo, IsClaimed, IsCancelled, syscreated, syscreator, sysmodified, sysmodifier, Source, Currency, Principal, Charge, OtherCharge, Redeem, Total, Promo, SenderIsSMS, Relation, Message, IDType, IDNo, ExpiryDate, CancelledDate, BranchCode, ZoneCode, TransDate, CancelledByOperatorID, CancelledByBranchCode, CancelledByZoneCode, CancelledByStationID, CancelReason, CancelDetails, CustID, SenderMLCardNo, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderBirthdate, SenderBranchID, ReceiverMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthDate, CancelCharge, ChargeTo,remotezonecode FROM " + decodeKPTNWallet(0, kptn) + " WHERE KPTNNo = @kptn;";
                            command.CommandText = query;
                            command.Parameters.AddWithValue("kptn", kptn);
                            MySqlDataReader dataReader = command.ExecuteReader();

                            if (dataReader.HasRows)
                            {
                                dataReader.Read();
                                string test1 = dataReader["iscancelled"].ToString();

                                string sFName = dataReader["SenderFname"].ToString();
                                string sLName = dataReader["SenderLname"].ToString();
                                string sMName = dataReader["SenderMName"].ToString();
                                string sSt = dataReader["SenderStreet"].ToString();
                                string sPCity = dataReader["SenderProvinceCity"].ToString();
                                string sCtry = dataReader["SenderCountry"].ToString();
                                string sG = dataReader["SenderGender"].ToString();
                                string sCNo = dataReader["SenderContactNo"].ToString();
                                Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                                string sBID = dataReader["SenderBranchID"].ToString();
                                string sCustID = dataReader["CustID"].ToString();
                                string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                                string SenderName = dataReader["SenderName"].ToString();

                                string rFName = dataReader["ReceiverFname"].ToString();
                                string rLName = dataReader["ReceiverLname"].ToString();
                                string rMName = dataReader["ReceiverMName"].ToString();
                                string rSt = dataReader["ReceiverStreet"].ToString();
                                string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                                string rCtry = dataReader["ReceiverCountry"].ToString();
                                string rG = dataReader["ReceiverGender"].ToString();
                                string rCNo = dataReader["ReceiverContactNo"].ToString();
                                string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                                string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                                string ReceiverName = dataReader["ReceiverName"].ToString();

                                string SendoutControlNo = dataReader["ControlNo"].ToString();
                                string KPTNNo = dataReader["KPTNNo"].ToString();
                                string OperatorID = dataReader["OperatorID"].ToString();
                                bool IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                                string TransPassword = dataReader["TransPassword"].ToString();
                                DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"].ToString());
                                string Currency = dataReader["Currency"].ToString();
                                Decimal Principal = (Decimal)dataReader["Principal"];
                                string SenderID = dataReader["CustID"].ToString();
                                Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string Relation = dataReader["Relation"].ToString();
                                string Message = dataReader["Message"].ToString();
                                string StationID = dataReader["StationID"].ToString();
                                string SourceOfFund = dataReader["Source"].ToString();
                                string IDType = dataReader["IDType"].ToString();
                                string IDNo = dataReader["IDNo"].ToString();
                                string ExpiryDate = dataReader["ExpiryDate"].ToString();
                                string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                                string ControlNo = dataReader["ControlNo"].ToString();
                                string BranchCode = dataReader["BranchCode"].ToString();
                                Decimal Redeem = (Decimal)dataReader["Redeem"];
                                string ORNo = dataReader["ORNo"].ToString();
                                Decimal Total = (Decimal)dataReader["Total"];
                                Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                                Decimal Charge = (Decimal)dataReader["Charge"];
                                string Purpose = dataReader["Purpose"].ToString();
                                Int32 ZoneCode = Convert.ToInt32(dataReader["ZoneCode"]);
                                bool IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                                Decimal CancelCharge = (dataReader["CancelCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["CancelCharge"];
                                bool x = Convert.ToBoolean(dataReader["IsCancelled"]);
                                bool IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                                String reason = dataReader["Reason"].ToString();
                                String cancelReason = dataReader["CancelReason"].ToString();
                                Int32 remotezone = (dataReader["remotezonecode"] == DBNull.Value) ? 0 : Convert.ToInt32(dataReader["remotezonecode"].ToString());

                                dataReader.Close();

                                //Decimal DormantCharge = CalculateDormantChargeDomestic(syscreated);


                                //command.Transaction = trans;
                                command.Parameters.Clear();
                                //command.CommandText = "kpadminlogs.savelog53";
                                //command.CommandType = CommandType.StoredProcedure;
                                command.CommandText = "INSERT INTO kpadminlogs.transactionlogs (kptnno,`action`,`isremote`,txndate,`stationcode`,stationno,zonecode,branchcode,branchname,operatorid,cancelledreason,remotereason,remotebranch,remoteoperator,oldkptnno,remotezonecode,`type`) VALUES (@kptnno,@action,@isremote,@txndate,@stationcode,@stationno,@zonecode,@branchcode,@branchname,@operatorid,@cancelledreason,@remotereason,@remotebranch,@remoteoperator,@oldkptnno,@remotezonecode,@type)";

                                command.Parameters.AddWithValue("kptnno", KPTNNo);
                                command.Parameters.AddWithValue("action", "SO REPRINT");
                                command.Parameters.AddWithValue("isremote", IsRemote);
                                command.Parameters.AddWithValue("txndate", syscreated);
                                command.Parameters.AddWithValue("stationcode", stationcode);
                                command.Parameters.AddWithValue("stationno", StationID);
                                command.Parameters.AddWithValue("zonecode", ZoneCode);
                                command.Parameters.AddWithValue("branchcode", BranchCode);
                                command.Parameters.AddWithValue("branchname", DBNull.Value);
                                command.Parameters.AddWithValue("operatorid", OperatorID);
                                command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                                command.Parameters.AddWithValue("remotereason", reason);
                                command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                                command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                                command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                                command.Parameters.AddWithValue("remotezonecode", remotezone);
                                command.Parameters.AddWithValue("type", "N");
                                try
                                {
                                    command.ExecuteNonQuery();
                                    //trans.Commit();
                                    conn.Close();
                                }
                                catch (MySqlException ex)
                                {
                                    kplog.Fatal(ex.ToString());
                                    //trans.Rollback();
                                    conn.Close();
                                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                                }

                                si = new SenderInfo
                                {
                                    FirstName = sFName,
                                    LastName = sLName,
                                    MiddleName = sMName,
                                    SenderName = SenderName,
                                    Street = sSt,
                                    ProvinceCity = sPCity,
                                    Country = sCtry,
                                    Gender = sG,
                                    ContactNo = sCNo,
                                    IsSMS = sIsSM,
                                    BranchID = sBID,
                                    CustID = sCustID,
                                    SenderMLCardNo = sMLCardNo
                                };

                                ri = new ReceiverInfo
                                {
                                    FirstName = rFName,
                                    LastName = rLName,
                                    MiddleName = rMName,
                                    ReceiverName = ReceiverName,
                                    Street = rSt,
                                    ProvinceCity = rPCity,
                                    Country = rCtry,
                                    Gender = rG,
                                    ContactNo = rCNo,
                                    BirthDate = rBdate,
                                    MLCardNo = rMLCardNo
                                };

                                soi = new SendoutInfo
                                {
                                    SendoutControlNo = SendoutControlNo,
                                    KPTNNo = KPTNNo,
                                    OperatorID = OperatorID,
                                    IsPassword = IsPassword,
                                    TransPassword = TransPassword,
                                    syscreated = syscreated,
                                    Currency = Currency,
                                    Principal = Principal,
                                    SenderID = SenderID,
                                    SenderIsSMS = SenderIsSMS,
                                    Relation = Relation,
                                    Message = Message,
                                    StationID = StationID,
                                    SourceOfFund = SourceOfFund,
                                    //kptn4 = kptn4,
                                    IDNo = IDNo,
                                    IDType = IDType,
                                    ExpiryDate = ExpiryDate,
                                    //DormantCharge = DormantCharge,
                                    RemoteOperatorID = RemoteOperatorID,
                                    RemoteBranch = RemoteBranch,
                                    BranchCode = BranchCode,
                                    Redeem = Redeem,
                                    ORNo = ORNo,
                                    Charge = Charge,
                                    OtherCharge = OtherCharge,
                                    Purpose = Purpose,
                                    Total = Total,
                                    ZoneCode = ZoneCode,
                                    IsRemote = IsRemote,
                                    CancelCharge = CancelCharge,
                                    RemoteReason = reason,
                                    RemoteZone = remotezone
                                };
                                return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                            }
                            else
                            {
                                kplog.Error(getRespMessage(4));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                            }
                        }
                        else
                        {
                            using (command = conn.CreateCommand())
                            {
                                String query1 = "SELECT date(sysmodified) as sysmodified FROM " + decodeKPTNWallet(0, kptn) + " WHERE KPTNNo = @kptn1 and isCancelled = 0;";
                                command.CommandText = query1;
                                command.Parameters.AddWithValue("kptn1", kptn);
                                MySqlDataReader dataReader1 = command.ExecuteReader();

                                if (dataReader1.HasRows)
                                {
                                    dataReader1.Read();
                                    string dat = dataReader1["sysmodified"].ToString();
                                    if (!(dataReader1["sysmodified"].GetType().ToString().Equals("System.DBNull") || dat == "0/0/0000"))
                                    {

                                        ClaimDate = Convert.ToDateTime(dataReader1["sysmodified"].ToString());
                                        dataReader1.Close();
                                    }
                                    else
                                    {
                                        kplog.Error(getRespMessage(9));
                                        dataReader1.Close();
                                        conn.Close();
                                        return new SearchResponse { respcode = 3, message = getRespMessage(9), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                                    }
                                }
                                else
                                {
                                    kplog.Error(getRespMessage(4));
                                    dataReader1.Close();
                                    conn.Close();
                                    return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                                }
                            }

                            String query = "SELECT if(cancelledtype is null or cancelledtype='','xxx','yyy') as iscancelled,Reason, DormantCharge, Balance, IsRemote, ZoneCode, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SOBranch, CustID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ReceiverMLCardNo, ControlNo, if(KPTNNo like '%99999%',oldkptnno,kptnno) as KPTNNo, OperatorID, Currency, Principal, Relation, StationID,  IDType, IDNo, ExpiryDate, SenderName, ReceiverName, RemoteBranch, RemoteOperatorID, ControlNo, BranchCode, ClaimedDate, SODate, SOORNo, (SELECT TransPassword FROM " + decodeKPTNWallet(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as TransPass, (SELECT Charge FROM " + decodeKPTNWallet(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Charge, (SELECT OtherCharge FROM " + decodeKPTNWallet(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as OtherCharge, (SELECT Total FROM " + decodeKPTNWallet(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Total, (SELECT Purpose FROM " + decodeKPTNWallet(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Purpose, (SELECT Source FROM " + decodeKPTNWallet(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Source, (SELECT Message FROM " + decodeKPTNWallet(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as Message, (SELECT IsClaimed FROM " + decodeKPTNWallet(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as IsClaimed,"
                               + "(SELECT ControlNo FROM " + decodeKPTNWallet(0, kptn) + " WHERE KPTNNo = @kptn and isCancelled = 0) as SendoutControl, remotezonecode FROM " + generateTableNameWallet(1, ClaimDate.ToString("yyyy-MM-dd HH:mm:ss")) + " WHERE KPTNNo = @kptn OR oldKPTNNo = @kptn ORDER BY ClaimedDate DESC LIMIT 1;";
                            command.CommandText = query;
                            command.Parameters.AddWithValue("kptn", kptn);

                            MySqlDataReader dataReader = command.ExecuteReader();
                            if (dataReader.HasRows)
                            {
                                dataReader.Read();

                                string sFName = dataReader["SenderFname"].ToString();
                                string sLName = dataReader["SenderLname"].ToString();
                                string sMName = dataReader["SenderMName"].ToString();
                                string sSt = dataReader["SenderStreet"].ToString();
                                string sPCity = dataReader["SenderProvinceCity"].ToString();
                                string sCtry = dataReader["SenderCountry"].ToString();
                                string sG = dataReader["SenderGender"].ToString();
                                string sCNo = dataReader["SenderContactNo"].ToString();
                                Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                                string sBID = dataReader["SOBranch"].ToString();
                                string sCustID = dataReader["CustID"].ToString();
                                string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                                string SenderName = dataReader["SenderName"].ToString();
                                string rFName = dataReader["ReceiverFname"].ToString();
                                string rLName = dataReader["ReceiverLname"].ToString();
                                string rMName = dataReader["ReceiverMName"].ToString();
                                string rSt = dataReader["ReceiverStreet"].ToString();
                                string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                                string rCtry = dataReader["ReceiverCountry"].ToString();
                                string rG = dataReader["ReceiverGender"].ToString();
                                string rCNo = dataReader["ReceiverContactNo"].ToString();

                                string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                                string rMLCardNo = dataReader["ReceiverMLCardNo"].ToString();
                                string ReceiverName = dataReader["ReceiverName"].ToString();

                                string SendoutControlNo = dataReader["SendoutControl"].ToString();
                                string KPTNNo = dataReader["KPTNNo"].ToString();
                                string OperatorID = dataReader["OperatorID"].ToString();
                                string TransPassword = dataReader["TransPass"].ToString();
                                string Currency = dataReader["Currency"].ToString();
                                Decimal Principal = (Decimal)dataReader["Principal"];
                                string SenderID = dataReader["CustID"].ToString();
                                Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                                string Relation = dataReader["Relation"].ToString();
                                string Message = null;
                                string StationID = dataReader["StationID"].ToString();
                                string SourceOfFund = dataReader["Source"].ToString();
                                string IDType = dataReader["IDType"].ToString();
                                string IDNo = dataReader["IDNo"].ToString();
                                string ExpiryDate = dataReader["ExpiryDate"].ToString();
                                string RemoteBranch = dataReader["RemoteBranch"].ToString();
                                string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                                string ControlNo = dataReader["ControlNo"].ToString();
                                string BranchCode = dataReader["BranchCode"].ToString();

                                string ClaimedDate = Convert.ToDateTime(dataReader["ClaimedDate"]).ToString("yyyy-MM-dd HH:mm:ss");
                                string SODate = Convert.ToDateTime(dataReader["SODate"]).ToString("yyyy-MM-dd HH:mm:ss");
                                string SOORNo = dataReader["SOORNo"].ToString();
                                string reason = dataReader["Reason"].ToString();

                                Decimal Total = (Decimal)dataReader["Total"];

                                Decimal OtherCharge = (Decimal)dataReader["OtherCharge"];
                                Decimal Charge = (Decimal)dataReader["Charge"];
                                string Purpose = dataReader["Purpose"].ToString();
                                string message = dataReader["Message"].ToString();
                                Int32 ZoneCode = Convert.ToInt32(dataReader["ZoneCode"]);
                                //Decimal Dormant = (dataReader["DormantCharge"] == DBNull.Value) ? 0 : (Decimal)dataReader["DormantCharge"];
                                Decimal Balance = (dataReader["Balance"] == DBNull.Value) ? 0 : (Decimal)dataReader["Balance"]; ;
                                bool IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                                String IsClaimed = dataReader["IsClaimed"].ToString();
                                Int32 remotezone = (dataReader["remotezonecode"] == DBNull.Value) ? 0 : Convert.ToInt32(dataReader["remotezonecode"].ToString());

                                dataReader.Close();
                                //command.Transaction = trans;
                                command.Parameters.Clear();
                                //command.CommandText = "kpadminlogs.savelog53";
                                //command.CommandType = CommandType.StoredProcedure;
                                command.CommandText = "INSERT INTO kpadminlogs.transactionlogs (kptnno,`action`,`isremote`,txndate,`stationcode`,stationno,zonecode,branchcode,branchname,operatorid,cancelledreason,remotereason,remotebranch,remoteoperator,oldkptnno,remotezonecode,`type`) VALUES (@kptnno,@action,@isremote,@txndate,@stationcode,@stationno,@zonecode,@branchcode,@branchname,@operatorid,@cancelledreason,@remotereason,@remotebranch,@remoteoperator,@oldkptnno,@remotezonecode,@type)";

                                command.Parameters.AddWithValue("kptnno", KPTNNo);
                                command.Parameters.AddWithValue("action", "PO REPRINT");
                                command.Parameters.AddWithValue("isremote", IsRemote);
                                command.Parameters.AddWithValue("txndate", ClaimedDate);
                                command.Parameters.AddWithValue("stationcode", stationcode);
                                command.Parameters.AddWithValue("stationno", StationID);
                                command.Parameters.AddWithValue("zonecode", ZoneCode);
                                command.Parameters.AddWithValue("branchcode", BranchCode);
                                command.Parameters.AddWithValue("branchname", DBNull.Value);
                                command.Parameters.AddWithValue("operatorid", OperatorID);
                                command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                                command.Parameters.AddWithValue("remotereason", reason);
                                command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                                command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                                command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                                command.Parameters.AddWithValue("remotezonecode", remotezone);
                                command.Parameters.AddWithValue("type", "N");
                                try
                                {
                                    command.ExecuteNonQuery();
                                    //trans.Commit();
                                    conn.Close();
                                }
                                catch (MySqlException ex)
                                {
                                    kplog.Fatal(ex.ToString());
                                    //trans.Rollback();
                                    conn.Close();
                                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                                }
                                si = new SenderInfo
                                {
                                    FirstName = sFName,
                                    LastName = sLName,
                                    MiddleName = sMName,
                                    SenderName = SenderName,
                                    Street = sSt,
                                    ProvinceCity = sPCity,
                                    Country = sCtry,
                                    Gender = sG,
                                    ContactNo = sCNo,
                                    IsSMS = sIsSM,
                                    BranchID = sBID,
                                    CustID = sCustID,
                                    SenderMLCardNo = sMLCardNo
                                };

                                ri = new ReceiverInfo
                                {
                                    FirstName = rFName,
                                    LastName = rLName,
                                    MiddleName = rMName,
                                    ReceiverName = ReceiverName,
                                    Street = rSt,
                                    ProvinceCity = rPCity,
                                    Country = rCtry,
                                    Gender = rG,
                                    ContactNo = rCNo,
                                    BirthDate = rBdate,
                                    MLCardNo = rMLCardNo
                                };

                                poi = new PayoutInfo
                                {
                                    SendoutControlNo = SendoutControlNo,
                                    KPTNNo = KPTNNo,
                                    OperatorID = OperatorID,
                                    //IsPassword = IsPassword,
                                    TransPassword = TransPassword,
                                    //syscreated = syscreated,
                                    Currency = Currency,
                                    Principal = Principal,
                                    SenderID = SenderID,
                                    SenderIsSMS = SenderIsSMS,
                                    Relation = Relation,
                                    Message = Message,
                                    StationID = StationID,
                                    SourceOfFund = SourceOfFund,
                                    //kptn4 = kptn4,
                                    IDNo = IDNo,
                                    IDType = IDType,
                                    ExpiryDate = ExpiryDate,
                                    RemoteBranch = RemoteBranch,
                                    RemoteOperatorID = RemoteOperatorID,
                                    ControlNo = ControlNo,
                                    BranchCode = BranchCode,
                                    ClaimedDate = ClaimedDate,
                                    SODate = SODate,
                                    SOORNo = SOORNo,
                                    Charge = Charge,
                                    OtherCharge = OtherCharge,
                                    Total = Total,
                                    Purpose = Purpose,
                                    SOMessage = message,
                                    ZoneCode = ZoneCode,
                                    IsRemote = IsRemote,
                                    Balance = Balance,
                                    //DormantCharge = Dormant,
                                    RemoteZone = remotezone
                                    //DormantCharge = DormantCharge
                                };


                                return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, PayoutInfo = poi };

                            }
                            else
                            {
                                kplog.Error(getRespMessage(4));
                                dataReader.Close();
                                conn.Close();
                                return new SearchResponse { respcode = 4, message = getRespMessage(4) };
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(ex.ToString());
                    conn.Close();
                    if (ex.Message.Equals("4"))
                    {
                        kplog.Error("Debug: ex.message == 4");
                        return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                    }
                    return new SearchResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal("Outer exception catched!", ex);
            return new SearchResponse { respcode = 0, message = ex.Message, ErrorDetail = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
        }
    }

    [WebMethod]
    public KYCResponse retrieveCustomer(string mlcardno)
    {
        string retrieve = "select * from kpcustomersglobal.customer where MLCardNo = @cardno";
        string lastname = null;
        string firstname = null;
        string middlename = null;
        string primary_street = null;
        string primary_province = null;
        string primary_country = null;
        string birthdate = null;
        string gender = null;
        string mobileno = null;
        string id1_idno = null;
        string id1_expirydate = null;
        string id1_idtype = null;
        //string id1_idtype;
        using (MySqlConnection conn = dbconGlobal.getConnection())
        {
            try
            {
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(retrieve, conn);
                MySqlDataReader dataReaderretrieve = cmd.ExecuteReader();
                if (dataReaderretrieve.Read())
                {
                    if ((int)dataReaderretrieve["state"] == 1)
                    {
                        string retrieveCustomer = "select * from mlkyc.customer where custno = " + dataReaderretrieve["custid"] + "";
                        dataReaderretrieve.Close();
                        MySqlCommand cmdcustomer = new MySqlCommand(retrieveCustomer, dbconGlobal.getConnection());
                        MySqlDataReader dataReadercustomer = cmdcustomer.ExecuteReader();
                        while (dataReadercustomer.Read())
                        {
                            lastname = dataReadercustomer["lastname"].ToString();
                            firstname = dataReadercustomer["firstname"].ToString();
                            middlename = dataReadercustomer["middlename"].ToString();
                            primary_street = dataReadercustomer["primary_street"].ToString();
                            primary_province = dataReadercustomer["primary_province"].ToString();
                            primary_country = dataReadercustomer["primary_country"].ToString();
                            birthdate = dataReadercustomer["birthdate"].ToString();
                            gender = dataReadercustomer["gender"].ToString();
                            mobileno = dataReadercustomer["mobileno"].ToString();
                            id1_idno = dataReadercustomer["id1_idno"].ToString();
                            id1_expirydate = dataReadercustomer["id1_expirydate"].ToString();
                            id1_idtype = dataReadercustomer["id1_idtype"].ToString();
                        }
                        //throw new Exception(lastname);
                        dbconGlobal.CloseConnection();
                        return new KYCResponse(1, "SUCCESS", lastname, firstname, middlename, primary_street, primary_province, primary_country, birthdate, gender, mobileno, id1_idno, id1_expirydate, id1_idtype);
                    }

                }
                else
                {
                    dbconGlobal.CloseConnection();
                    return new KYCResponse(0, "FAILED", "MLCARD NO NOT FOUND");
                }

            }
            catch (Exception ex)
            {
                kplog.Fatal(mlcardno + " - " + ex.ToString());
                return new KYCResponse(0, "FAILED", ex.ToString());
            }
        }
        return null;
    }


    [WebMethod]
    public ControlResponse generateControlDomestic(String Username, String Password, String branchcode, Int32 type, String OperatorID, Int32 ZoneCode, String StationNumber, Double version, String stationcode, String transtype)
    {
        kplog.Info(branchcode + "|" + type + "|" + OperatorID + "|" + ZoneCode + "|" + StationNumber + "|" + version + "|" + stationcode + "|" + transtype);
        if (transtype.ToLower() == "cloud")
        {
            try
            {
                CloudService.ControlResponse resp = new CloudService.ControlResponse();
                CloudService.MLhuillier client = new CloudService.MLhuillier();

                resp = client.generateControlDomestic(Username, Password, branchcode, type, OperatorID, ZoneCode, StationNumber, version, stationcode, transtype);
                if (resp.respcode == 1)
                {
                    kplog.Info("Success in generating controlno: " + resp.controlno + " | nseries: " + resp.nseries);
                    return new ControlResponse { respcode = resp.respcode, message = resp.message, controlno = resp.controlno, nseries = resp.nseries };
                }
                else
                {
                    kplog.Info("Failed in generating controlno: " + resp.ErrorDetail);
                    return new ControlResponse { respcode = resp.respcode, message = resp.message, ErrorDetail = resp.ErrorDetail };
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal("Cloud Catch: " + ex.ToString());
                return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
        if (transtype.ToLower() == "wallet cloud")
        {
            try
            {
                CloudService.ControlResponse resp = new CloudService.ControlResponse();
                CloudService.MLhuillier client = new CloudService.MLhuillier();

                resp = client.generateControlWallet(Username, Password, branchcode, type, OperatorID, ZoneCode, StationNumber, version, stationcode);
                if (resp.respcode == 1)
                {
                    kplog.Info("Success in generating controlno: " + resp.controlno + " | nseries: " + resp.nseries);
                    return new ControlResponse { respcode = resp.respcode, message = resp.message, controlno = resp.controlno, nseries = resp.nseries };
                }
                else
                {
                    kplog.Info("Failed in generating controlno: " + resp.ErrorDetail);
                    return new ControlResponse { respcode = resp.respcode, message = resp.message, ErrorDetail = resp.ErrorDetail };
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal("Cloud Catch: " + ex.ToString());
                return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }
        if (transtype.ToLower() == "wallet network")
        {
            try
            {
                ControlResponse walletcontrol = new ControlResponse();
                walletcontrol = generateControlWallet(Username, Password, branchcode, type, OperatorID, ZoneCode, StationNumber, version, stationcode);

                if (walletcontrol.respcode == 1)
                {
                    kplog.Info("Success in generating controlno: " + walletcontrol.controlno + " | nseries: " + walletcontrol.nseries);
                    return new ControlResponse { respcode = walletcontrol.respcode, message = walletcontrol.message, controlno = walletcontrol.controlno, nseries = walletcontrol.nseries };
                }
                else
                {
                    kplog.Info("Failed in generating controlno: " + walletcontrol.ErrorDetail);
                    return new ControlResponse { respcode = walletcontrol.respcode, message = walletcontrol.message, ErrorDetail = walletcontrol.ErrorDetail };
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal("network Catch: " + ex.ToString());
                return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
            }
        }

        if (StationNumber.ToString().Equals("0"))
        {
            kplog.Error(getRespMessage(13));
            return new ControlResponse { respcode = 13, message = getRespMessage(13) };
        }
        if (!authenticate(Username, Password))
        {
            return new ControlResponse { respcode = 7, message = getRespMessage(7) };
        }
        //if (!compareVersions(getVersion(stationcode), version))
        //{
        //    return new ControlResponse { respcode = 10, message = getRespMessage(10) };
        //}
        try
        {
            using (MySqlConnection conn = dbconDomestic.getConnection())
            {
                using (command = conn.CreateCommand())
                {
                    conn.Open();
                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    command.Transaction = trans;
                    try
                    {
                        String query = "CALL `kpforms`.`getseries`('" + branchcode + "','" + ZoneCode + "','" + type + "','" + StationNumber + "');";
                        command.CommandText = query;
                        command.CommandType = CommandType.Text;
                        command.ExecuteNonQuery();
                        //MySqlDataReader reader = command.ExecuteReader();
                        //if (reader.Read())
                        //{
                        //    series = reader["series"].ToString();
                        //    reader.Close();
                        //}

                        dt = getServerDateDomestic(true);
                        String control;

                        //command.CommandText = "Select station, bcode, userid, nseries, zcode, type from kpformsglobal.control where station = @st and bcode = @bcode and zcode = @zcode and type = @tp FOR UPDATE";
                        command.CommandText = "Select station, bcode, userid, nseries, zcode, type from kpforms.control where station = @st and bcode = @bcode and zcode = @zcode and `type` = @tp";
                        command.Parameters.AddWithValue("st", StationNumber);
                        command.Parameters.AddWithValue("bcode", branchcode);
                        command.Parameters.AddWithValue("zcode", ZoneCode);
                        command.Parameters.AddWithValue("tp", type);
                        MySqlDataReader Reader = command.ExecuteReader();

                        if (Reader.HasRows)
                        {
                            //throw new Exception("Invalid type value");
                            Reader.Read();
                            //throw new Exception(Reader["station"].ToString() + " " + Reader["bcode"].ToString() + " " + Reader["type"].ToString());
                            if (type == 0)
                            {
                                control = "S0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 1)
                            {
                                control = "P0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 2)
                            {
                                control = "S0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else if (type == 3)
                            {
                                control = "P0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else
                            {
                                kplog.Error("Invalid type value");
                                throw new Exception("Invalid type value");
                            }

                            String s = Reader["Station"].ToString();
                            String nseries = Reader["nseries"].ToString().PadLeft(6, '0');
                            Reader.Close();
                            trans.Commit();
                            conn.Close();
                            //if (isSameYear2(dt))
                            //{
                            //    return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("yy") + "-" + nseries, nseries = nseries };
                            //}
                            //else
                            //{
                            //    return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("yy") + "-" + "000001", nseries = "000001" };
                            //}
                            kplog.Info("Success in generating control: " + control + "-" + dt.ToString("MMyy") + "-" + nseries);
                            return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("MMyy") + "-" + nseries, nseries = nseries };
                        }
                        else
                        {
                            Reader.Close();
                            command.CommandText = "Insert into kpforms.control (`station`,`bcode`,`userid`,`nseries`,`zcode`, `type`) values (@station,@branchcode,@uid,1,@zonecode,@type)";
                            if (type == 0)
                            {
                                control = "S0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 1)
                            {
                                control = "P0" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }
                            else if (type == 2)
                            {
                                control = "S0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else if (type == 3)
                            {
                                control = "P0" + ZoneCode.ToString() + "-" + StationNumber + "-R" + branchcode;
                            }
                            else
                            {
                                kplog.Error("Invalid type value");
                                throw new Exception("Invalid type value");
                            }
                            command.Parameters.AddWithValue("station", StationNumber);
                            command.Parameters.AddWithValue("branchcode", branchcode);
                            command.Parameters.AddWithValue("uid", OperatorID);
                            command.Parameters.AddWithValue("zonecode", ZoneCode);
                            command.Parameters.AddWithValue("type", type);
                            int x = command.ExecuteNonQuery();
                            //if (x < 1) {
                            //    conn.Close();
                            //    throw new Exception("asdfsadfds");
                            //}
                            trans.Commit();
                            conn.Close();

                            kplog.Info("Success in generating control: " + control + "-" + dt.ToString("MMyy") + "-" + "000001");
                            return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("MMyy") + "-" + "000001", nseries = "000001" };
                        }
                    }
                    catch (MySqlException ex)
                    {
                        kplog.Fatal(ex.ToString());
                        trans.Rollback();
                        conn.Close();
                        return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                    }
                }
            }
        }
        catch (MySqlException ex)
        {
            kplog.Fatal(ex.ToString());
            dbconDomestic.CloseConnection();
            return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }

        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            dbconDomestic.CloseConnection();
            return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }
    }

    [WebMethod]
    public ControlResponse generateControlWallet(String Username, String Password, String branchcode, Int32 type, String OperatorID, Int32 ZoneCode, String StationNumber, Double version, String stationcode)
    {
        if (StationNumber.ToString().Equals("0"))
        {
            kplog.Error(getRespMessage(13));
            return new ControlResponse { respcode = 13, message = getRespMessage(13) };
        }
        if (!authenticate(Username, Password))
        {
            return new ControlResponse { respcode = 7, message = getRespMessage(7) };
        }
        try
        {
            using (MySqlConnection conn = dbconDomestic.getConnection())
            {
                using (command = conn.CreateCommand())
                {
                    conn.Open();
                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    command.Transaction = trans;
                    try
                    {
                        String query = "CALL `kpforms`.`getseries`('" + branchcode + "','" + ZoneCode + "','" + type + "','" + StationNumber + "');";
                        command.CommandText = query;
                        command.CommandType = CommandType.Text;
                        command.ExecuteNonQuery();

                        dt = getServerDateDomestic(true);
                        String control;

                        command.CommandText = "Select station, bcode, userid, nseries, zcode, type from kpforms.control where station = @st and bcode = @bcode and zcode = @zcode and `type` = @tp";
                        command.Parameters.AddWithValue("st", StationNumber);
                        command.Parameters.AddWithValue("bcode", branchcode);
                        command.Parameters.AddWithValue("zcode", ZoneCode);
                        command.Parameters.AddWithValue("tp", type);
                        MySqlDataReader Reader = command.ExecuteReader();

                        if (Reader.HasRows)
                        {
                            Reader.Read();
                            String zone = Reader["zcode"].ToString();
                            String branch = Reader["bcode"].ToString();
                            String station = Reader["station"].ToString();

                            if (type == 1)
                            {
                                control = "MP" + zone + "-" + station + "-" + branch;
                            }

                            else if (type == 3)
                            {
                                control = "MP" + zone + "-" + station + "-" + "R" + branch;
                            }
                            else
                            {
                                kplog.Error("Invalid type value");
                                throw new Exception("Invalid type value");
                            }

                            String s = Reader["Station"].ToString();
                            String nseries = Reader["nseries"].ToString().PadLeft(6, '0');
                            Reader.Close();
                            trans.Commit();
                            conn.Close();
                            return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("MMyy") + "-" + nseries, nseries = nseries };
                        }
                        else
                        {
                            Reader.Close();
                            command.CommandText = "Insert into kpforms.control (`station`,`bcode`,`userid`,`nseries`,`zcode`, `type`) values (@station,@branchcode,@uid,1,@zonecode,@type)";
                            if (type == 1)
                            {
                                control = "MP" + ZoneCode.ToString() + "-" + StationNumber + "-" + branchcode;
                            }

                            else if (type == 3)
                            {
                                control = "MP" + ZoneCode.ToString() + "-" + StationNumber + "-" + "R" + branchcode;
                            }
                            else
                            {
                                kplog.Error("Invalid type value");
                                throw new Exception("Invalid type value");
                            }
                            command.Parameters.AddWithValue("station", StationNumber);
                            command.Parameters.AddWithValue("branchcode", branchcode);
                            command.Parameters.AddWithValue("uid", OperatorID);
                            command.Parameters.AddWithValue("zonecode", ZoneCode);
                            command.Parameters.AddWithValue("type", type);
                            int x = command.ExecuteNonQuery();

                            trans.Commit();
                            conn.Close();

                            return new ControlResponse { respcode = 1, message = getRespMessage(1), controlno = control + "-" + dt.ToString("MMyy") + "-" + "000001", nseries = "000001" };
                        }
                    }
                    catch (MySqlException ex)
                    {
                        kplog.Fatal(ex.ToString());
                        trans.Rollback();
                        conn.Close();
                        return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                    }
                }
            }
        }
        catch (MySqlException ex)
        {
            kplog.Fatal(ex.ToString());
            dbconDomestic.CloseConnection();
            return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }

        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            dbconDomestic.CloseConnection();
            return new ControlResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }
    }

    [WebMethod]
    public String generateORNODomestic(string branchcode, string zonecode, Double version, String stationcode)
    {
        try
        {
            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    throw new Exception("Version does not match!");
            //}
            using (MySqlConnection conn = dbconDomestic.getConnection())
            {
                conn.Open();
                trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                try
                {
                    using (command = conn.CreateCommand())
                    {
                        command.Transaction = trans;
                        dt = getServerDateGlobal(true);
                        string query = "select oryear,branchcode,zonecode,series from kpforms.resibo where branchcode = @bcode1 and zonecode = @zcode1";
                        command.CommandText = query;
                        command.Parameters.AddWithValue("bcode1", branchcode);
                        command.Parameters.AddWithValue("zcode1", zonecode);
                        //trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                        using (MySqlDataReader dataReader = command.ExecuteReader())
                        {
                            if (dataReader.HasRows)
                            {

                                dataReader.Read();
                                Int32 series = Convert.ToInt32(dataReader["series"]) + 1;
                                String oryear = dataReader["oryear"].ToString().Substring(2);
                                dataReader.Close();
                                //if (isSameYear2(dt))
                                //{
                                //    command.Parameters.Clear();
                                //    command.CommandText = "update kpforms.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                                //    command.Parameters.AddWithValue("bcode2", branchcode);
                                //    command.Parameters.AddWithValue("zcode2", zonecode);
                                //    command.Parameters.AddWithValue("series", series);
                                //    command.ExecuteNonQuery();
                                //    trans.Commit();
                                //    conn.Close();
                                //    return oryear + "-" + series.ToString().PadLeft(6, '0');
                                //}
                                //else
                                //{
                                //    kplog.Info("SERIES RESETTED");
                                //    command.Parameters.Clear();
                                //    command.CommandText = "update kpforms.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                                //    command.Parameters.AddWithValue("bcode2", branchcode);
                                //    command.Parameters.AddWithValue("zcode2", zonecode);
                                //    command.Parameters.AddWithValue("series", 1);
                                //    command.ExecuteNonQuery();
                                //    trans.Commit();
                                //    conn.Close();
                                //    return dt.ToString("yy") + "-" + series.ToString().PadLeft(6, '0');
                                //}

                                command.Parameters.Clear();
                                command.CommandText = "update kpforms.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                                command.Parameters.AddWithValue("bcode2", branchcode);
                                command.Parameters.AddWithValue("zcode2", zonecode);
                                command.Parameters.AddWithValue("series", series);
                                command.ExecuteNonQuery();
                                trans.Commit();
                                conn.Close();
                                //return oryear + "-" + series.ToString().PadLeft(6, '0');
                                return dt.ToString("yy") + "-" + series.ToString().PadLeft(6, '0');

                            }
                            else
                            {
                                dataReader.Close();
                                //String oryear = dataReader["oryear"].ToString().Substring(2);
                                //dataReader.Close();
                                command.Parameters.Clear();
                                command.CommandText = "update kpforms.resibo set `lock` = 1 where branchcode = @bcode2 and zonecode = @zcode2";
                                command.Parameters.AddWithValue("bcode2", branchcode);
                                command.Parameters.AddWithValue("zcode2", zonecode);
                                command.ExecuteNonQuery();

                                command.Parameters.Clear();
                                command.CommandText = "insert into kpforms.resibo (oryear, branchcode, zonecode, series) values (@year, @bcode2, @zcode2, @ser)";
                                command.Parameters.AddWithValue("year", dt.ToString("yyyy"));
                                command.Parameters.AddWithValue("bcode2", branchcode);
                                command.Parameters.AddWithValue("zcode2", zonecode);
                                command.Parameters.AddWithValue("ser", 1);
                                command.ExecuteNonQuery();
                                trans.Commit();
                                int ser = 1;
                                conn.Close();
                                return dt.ToString("yy") + "-" + ser.ToString().PadLeft(6, '0');
                            }
                        }
                    }
                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(ex.ToString());
                    trans.Rollback();
                    conn.Close();
                    throw new Exception(ex.ToString());
                }

            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }

    }


    private String generateResiboDomestic(string branchcode, Int32 zonecode, MySqlCommand command, String Rewardsredeemcode, String Rewardscustomerid, String Rewardslastname)
    {
        int respcoderesp = 0;
        String respmsgresp = "", custidresp = "", redeemcoderesp = "";
        try
        {

            dt = getServerDateDomestic(true);
            string query = "select oryear,branchcode,zonecode,series from kpforms.resibo where branchcode = @bcode1 and zonecode = @zcode1";
            command.CommandText = query;
            command.Parameters.AddWithValue("bcode1", branchcode);
            command.Parameters.AddWithValue("zcode1", zonecode);

            using (MySqlDataReader dataReader = command.ExecuteReader())
            {
                if (dataReader.HasRows)
                {
                    dataReader.Read();
                    Int32 series = Convert.ToInt32(dataReader["series"]) + 1;
                    String oryear = dataReader["oryear"].ToString().Substring(2);
                    dataReader.Close();
                    //if (isSameYear2(dt))
                    //{
                    //    //command.Parameters.Clear();
                    //    //command.CommandText = "update kpformsglobal.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                    //    //command.Parameters.AddWithValue("bcode2", branchcode);
                    //    //command.Parameters.AddWithValue("zcode2", zonecode);
                    //    //command.Parameters.AddWithValue("series", series);
                    //    //command.ExecuteNonQuery();
                    //    //command.Parameters.Clear();
                    //    return oryear + "-" + series.ToString().PadLeft(6, '0');
                    //}
                    //else
                    //{
                    //    kplog.Info("SERIES RESETTED");
                    //    //command.Parameters.Clear();
                    //    //command.CommandText = "update kpformsglobal.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                    //    //command.Parameters.AddWithValue("bcode2", branchcode);
                    //    //command.Parameters.AddWithValue("zcode2", zonecode);
                    //    //command.Parameters.AddWithValue("series", 1);
                    //    //command.ExecuteNonQuery();
                    //    //command.Parameters.Clear();
                    //    return dt.ToString("yy") + "-" + series.ToString().PadLeft(6, '0');

                    //}

                    return dt.ToString("yy") + "-" + series.ToString().PadLeft(6, '0');

                }
                else
                {
                    dataReader.Close();
                    //String oryear = dataReader["oryear"].ToString().Substring(2);
                    //dataReader.Close();
                    command.Parameters.Clear();
                    command.CommandText = "update kpforms.resibo set `lock` = 1 where branchcode = @bcode2 and zonecode = @zcode2";
                    command.Parameters.AddWithValue("bcode2", branchcode);
                    command.Parameters.AddWithValue("zcode2", zonecode);
                    command.ExecuteNonQuery();

                    command.Parameters.Clear();
                    command.CommandText = "insert into kpforms.resibo (oryear, branchcode, zonecode, series) values (@year, @bcode2, @zcode2, @ser)";
                    command.Parameters.AddWithValue("year", dt.ToString("yyyy"));
                    command.Parameters.AddWithValue("bcode2", branchcode);
                    command.Parameters.AddWithValue("zcode2", zonecode);
                    command.Parameters.AddWithValue("ser", 1);
                    command.ExecuteNonQuery();
                    int ser = 1;

                    return dt.ToString("yy") + "-" + ser.ToString().PadLeft(6, '0');
                }
            }

        }
        catch (MySqlException myx)
        {
            kplog.Fatal(myx.ToString());
            try
            {
                kplog.Info(" - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                MLRewards.MLRewardsRedeem rewards;
                MLRewards.UnsuccessfulRedeem redeemresp;

                using (rewards = new MLRewards.MLRewardsRedeem())
                {
                    rewards.Url = redemurl;
                    redeemresp = new MLRewards.UnsuccessfulRedeem();

                    redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                    respcoderesp = redeemresp.respcode;
                    respmsgresp = redeemresp.respmsg;
                    custidresp = redeemresp.CustomerID_;
                    redeemcoderesp = redeemresp.RedeemCode_;

                    kplog.Info(Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
            }
            throw new Exception(myx.ToString());
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            try
            {
                kplog.Info("Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                MLRewards.MLRewardsRedeem rewards;
                MLRewards.UnsuccessfulRedeem redeemresp;

                using (rewards = new MLRewards.MLRewardsRedeem())
                {
                    rewards.Url = redemurl;
                    redeemresp = new MLRewards.UnsuccessfulRedeem();

                    redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                    respcoderesp = redeemresp.respcode;
                    respmsgresp = redeemresp.respmsg;
                    custidresp = redeemresp.CustomerID_;
                    redeemcoderesp = redeemresp.RedeemCode_;

                    kplog.Info(Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                }
            }
            catch (Exception ex1)
            {
                kplog.Fatal(Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex1.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
            }
            throw new Exception(ex.ToString());
        }

    }

    private Boolean updateResiboDomestic(string branchcode, Int32 zonecode, String resibo, ref MySqlCommand command, String Rewardsredeemcode, String Rewardscustomerid, String Rewardslastname)
    {
        int respcoderesp = 0;
        String respmsgresp = "", custidresp = "", redeemcoderesp = "";
        try
        {
            MySqlCommand cmdReader;
            using (cmdReader = dbconDomestic.getConnection().CreateCommand())
            {

                dt = getServerDateDomestic(true);

                Int32 series = Convert.ToInt32(resibo.Substring(3, resibo.Length - 3));

                //if (isSameYear2(dt))
                //{
                command.Parameters.Clear();
                command.CommandText = "update kpforms.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                command.Parameters.AddWithValue("bcode2", branchcode);
                command.Parameters.AddWithValue("zcode2", zonecode);
                command.Parameters.AddWithValue("series", series);
                command.ExecuteNonQuery();
                command.Parameters.Clear();
                return true;
                //}
                //else
                //{
                //    command.Parameters.Clear();
                //    command.CommandText = "update kpforms.resibo set series = @series where branchcode = @bcode2 and zonecode = @zcode2";
                //    command.Parameters.AddWithValue("bcode2", branchcode);
                //    command.Parameters.AddWithValue("zcode2", zonecode);
                //    command.Parameters.AddWithValue("series", 1);
                //    command.ExecuteNonQuery();
                //    command.Parameters.Clear();
                //    //return dt.ToString("yy") + "-" + series.ToString().PadLeft(6, '0');
                //    return true;
                //}


            }
        }
        catch (MySqlException myx)
        {
            kplog.Fatal(myx.ToString());
            try
            {
                kplog.Info("Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                MLRewards.MLRewardsRedeem rewards;
                MLRewards.UnsuccessfulRedeem redeemresp;

                using (rewards = new MLRewards.MLRewardsRedeem())
                {
                    rewards.Url = redemurl;
                    redeemresp = new MLRewards.UnsuccessfulRedeem();

                    redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                    respcoderesp = redeemresp.respcode;
                    respmsgresp = redeemresp.respmsg;
                    custidresp = redeemresp.CustomerID_;
                    redeemcoderesp = redeemresp.RedeemCode_;

                    kplog.Info(Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
            }
            throw new Exception(myx.ToString());
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            try
            {
                kplog.Info("Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                MLRewards.MLRewardsRedeem rewards;
                MLRewards.UnsuccessfulRedeem redeemresp;

                using (rewards = new MLRewards.MLRewardsRedeem())
                {
                    rewards.Url = redemurl;
                    redeemresp = new MLRewards.UnsuccessfulRedeem();

                    redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                    respcoderesp = redeemresp.respcode;
                    respmsgresp = redeemresp.respmsg;
                    custidresp = redeemresp.CustomerID_;
                    redeemcoderesp = redeemresp.RedeemCode_;

                    kplog.Info(Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                }
            }
            catch (Exception ex1)
            {
                kplog.Fatal(Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex1.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
            }
            throw new Exception(ex.ToString());
        }

    }

    private String generateCustID(MySqlCommand command, DateTime datenow)
    {
        //DateTime dt = DateTime.Now;

        try
        {
            //using (command = conn.CreateCommand())
            //{
            //conn.Open();

            //dt = getServerDateDomestic(true, command);

            String query = "select series from kpforms.customerseries";
            command.CommandText = query;
            MySqlDataReader Reader = command.ExecuteReader();

            Reader.Read();
            String series = Reader["series"].ToString();
            Reader.Close();

            //String updatesender = "update kpforms.customerseries set series = series + 1";
            //custcommand.CommandText = updatesender;
            //custcommand.ExecuteNonQuery();
            kplog.Info("new series: " + series);
            return datenow.ToString("yy") + datenow.ToString("MM") + series.PadLeft(9, '0') + "N1";


            //}
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
            //return null;
            //conn.Close();
            //return new ChargeResponse(0, ex.ToString(), 0);
        }

    }

    private DateTime getServerDateDomestic(bool p, MySqlCommand mycommand)
    {
        try
        {
            //throw new Exception(isOpenConnection.ToString());
            if (!p)
            {
                using (MySqlConnection conn = dbconDomestic.getConnection())
                {
                    conn.Open();
                    using (MySqlCommand command = conn.CreateCommand())
                    {

                        DateTime serverdate;

                        command.CommandText = "Select NOW() as serverdt;";
                        using (MySqlDataReader Reader = command.ExecuteReader())
                        {
                            Reader.Read();

                            serverdate = Convert.ToDateTime(Reader["serverdt"]);
                            Reader.Close();
                            conn.Close();

                            return serverdate;
                        }

                    }
                }
            }
            else
            {

                DateTime serverdate;

                mycommand.CommandText = "Select NOW() as serverdt;";

                using (MySqlDataReader Reader = mycommand.ExecuteReader())
                {
                    Reader.Read();
                    serverdate = Convert.ToDateTime(Reader["serverdt"]);
                    Reader.Close();
                    return serverdate;
                }


            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.Message);
        }
    }



    private String generateKPTNDomestic(String branchcode, Int32 zonecode)
    {
        try
        {
            //String guid = Guid.NewGuid().GetHashCode().ToString();
            //jp.takel.PseudoRandom.MersenneTwister rand = new jp.takel.PseudoRandom.MersenneTwister();


            dt = getServerDateDomestic(false);
            jp.takel.PseudoRandom.MersenneTwister randGen = new jp.takel.PseudoRandom.MersenneTwister((uint)HiResDateTime.UtcNow.Ticks);
            return branchcode + dt.ToString("dd") + zonecode.ToString() + randGen.Next(1000000000, Int32.MaxValue).ToString() + dt.ToString("MM"); ;
        }
        catch (Exception a)
        {
            kplog.Fatal(a.ToString());
            throw new Exception(a.ToString());
        }
    }


    private String generateKPTN(String branchcode, String zonecode, String initiatior)
    {
        String guid = Guid.NewGuid().GetHashCode().ToString();
        Random rand = new Random();

        if (initiatior == String.Empty)
        {
            dt = getServerDateGlobal(true);
        }
        else
        {
            dt = getServerDateGlobal(false);
        }
        int x = System.Convert.ToInt32(guid);
        if (guid.Length < 10)
        {
            if (guid.StartsWith("-"))
            {
                //throw new Exception("Less 10:" + bid + rand.Next(1, 9).ToString() + "" + (x * -1));
                //if (guid.Substring(1, guid.Length-1).Length < 10)
                //{
                //throw new Exception(x.ToString());
                //}
                //else {
                if (guid.Length == 8)
                {
                    //throw new Exception("Starts width -:" + bid + rand.Next(10, 99).ToString() + "" + x);
                    return branchcode + dt.ToString("dd") + zonecode + rand.Next(100, 999).ToString() + "" + (x * -1) + dt.ToString("MM");
                }
                else if (guid.Length == 7)
                {
                    //throw new Exception("Starts width -:" + bid + rand.Next(10, 99).ToString() + "" + x);
                    return branchcode + dt.ToString("dd") + zonecode + rand.Next(100, 999).ToString() + "" + (x * -1) + dt.ToString("MM");
                }
                else
                {
                    //return branchcode + dt.ToString("dd") + zonecode + rand.Next(1, 9).ToString() + "" + x + dt.ToString("MM");
                    return branchcode + dt.ToString("dd") + zonecode + rand.Next(10, 99).ToString() + "" + (x * -1) + dt.ToString("MM");
                }


                //}
            }
            else
            {
                if (guid.Length == 8)
                {
                    //throw new Exception("Starts width -:" + bid + rand.Next(10, 99).ToString() + "" + x);
                    return branchcode + dt.ToString("dd") + zonecode + rand.Next(10, 99).ToString() + "" + x + dt.ToString("MM");
                }

                else if (guid.Length == 7)
                {
                    //throw new Exception("Starts width -:" + bid + rand.Next(10, 99).ToString() + "" + x);
                    return branchcode + dt.ToString("dd") + zonecode + rand.Next(100, 999).ToString() + "" + x + dt.ToString("MM");
                }
                else
                {
                    return branchcode + dt.ToString("dd") + zonecode + rand.Next(1, 9).ToString() + "" + x + dt.ToString("MM");
                }
                //else {
                //    throw new Exception("Less 10:" + bid + rand.Next(1, 9).ToString() + "" + x);
                //}
                //throw new Exception("Less 10:" + bid + rand.Next(1, 9).ToString() + "" + x);

            }
            //return bid + rand.Next(1, 9).ToString() + "" + (x * -1);
        }
        else if (guid.Length > 10)
        {
            //throw new Exception("Greater 10:" + bid + (x * -1));
            return branchcode + dt.ToString("dd") + zonecode + (x * -1) + dt.ToString("MM");
        }
        else
        {
            if (guid.StartsWith("-"))
            {
                //throw new Exception("Starts with: " + bid + rand.Next(1, 9).ToString() + "" + (x*-1));
                return branchcode + dt.ToString("dd") + zonecode + rand.Next(1, 9).ToString() + "" + (x * -1) + dt.ToString("MM");
            }
            else if (guid.Length == 9)
            {
                //throw new Exception("Starts width -:" + bid + rand.Next(10, 99).ToString() + "" + x);
                return branchcode + dt.ToString("dd") + zonecode + rand.Next(1, 9).ToString() + "" + (x * -1) + dt.ToString("MM");
            }
            else if (guid.Length == 8)
            {
                //throw new Exception("Starts width -:" + bid + rand.Next(10, 99).ToString() + "" + x);
                return branchcode + dt.ToString("dd") + zonecode + rand.Next(10, 99).ToString() + "" + x + dt.ToString("MM");
            }

            else
            {
                //throw new Exception(guid);
                return branchcode + dt.ToString("dd") + zonecode + guid + dt.ToString("MM");
            }
        }
    }

    public string getChargeObj(string branchid)
    {
        {
            String query = "SELECT * FROM (	SELECT c.objid, b.objid AS strbranchid, c.strcurrencyid, IFNULL(c.strchargecurrencyid, c.strcurrencyid) AS strchargecurrencyid, c.dteffectivefrom, IFNULL(c.dteffectiveto, NOW()) AS dteffectiveto, NOW() AS dtcurrent FROM mlkp.tblbranch b INNER JOIN mlkp.tblcharge c ON b.strorganizationid=c.strorganizationid WHERE b.objid='" + branchid + "' AND c.strcurrencyid='PHP')c0 WHERE dtcurrent BETWEEN dteffectivefrom AND dteffectiveto ORDER BY dteffectivefrom DESC LIMIT 1";
            String objid;

            //throw new Exception(query);
            try
            {
                MySqlCommand cmd = new MySqlCommand(query, dbconGlobal.getConnection());
                MySqlDataReader dataReader = cmd.ExecuteReader();
                dataReader.Read();
                objid = (String)dataReader["objid"];

                dataReader.Close();
                return objid;
            }
            catch (MySqlException)
            {
                dbconGlobal.CloseConnection();
                //   throw new Exception("getcharge");
                return null;
            }

            //return null;
        }
    }

    //public class Example
    //{
    //    public string Name { get; set; }
    //    public int Value { get; set; }
    //}
    //[WebMethod]
    //public Example[] GetExamples()
    //{
    //    return new Example[]{
    //      new Example { Name = "Test", Value = 7 },
    //      new Example { Name = "Test 2", Value = 500 }
    //  };
    //}

    private Int32 ConvertSeries(String series)
    {
        return Convert.ToInt32(series);
    }

    //[WebMethod]
    //public string test()
    //{
    //    using (MySqlConnection checkinglang = dbconDomestic.getConnection())
    //    {
    //        checkinglang.Open();
    //        try
    //        {
    //            //  MySqlCommand cmdchecking = new MySqlCommand();
    //            using (command = checkinglang.CreateCommand())
    //            {

    //                string checkifcontrolexist = "select controlno from " + generateTableNameDomestic(0, null) + " where controlno=@controlno";
    //                command.CommandTimeout = 0;
    //                command.CommandText = checkifcontrolexist;
    //                command.Parameters.AddWithValue("controlno", controlno);
    //                MySqlDataReader controlexistreader = command.ExecuteReader();
    //                if (controlexistreader.HasRows)
    //                {
    //                    controlexistreader.Close();
    //                    Int32 maxontrans = 0;
    //                    string getcontrolmax = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max from " + generateTableNameDomestic(0, null) + " where if(isremote=1,remotebranch,branchcode) = @branchcode and stationid = @stationid and if(remotezonecode=0 or remotezonecode is null, zonecode,remotezonecode) =@zonecode";
    //                    command.CommandText = getcontrolmax;
    //                    command.Parameters.Clear();
    //                    command.Parameters.AddWithValue("branchcode", IsRemote == "1" ? RemoteBranchCode : bcode);
    //                    command.Parameters.AddWithValue("stationid", station);
    //                    command.Parameters.AddWithValue("zonecode", remotezcode == 0 ? zonecode : remotezcode);

    //                    MySqlDataReader controlmaxreader = command.ExecuteReader();
    //                    if (controlmaxreader.Read())
    //                    {
    //                        maxontrans = Convert.ToInt32(controlmaxreader["max"].ToString());
    //                        //controlmaxreader.Close();
    //                    }
    //                    controlmaxreader.Close();

    //                    command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
    //                    command.Parameters.AddWithValue("st", IsRemote == "1" ? "00" : station);
    //                    command.Parameters.AddWithValue("bcode", IsRemote == "1" ? RemoteBranchCode : bcode);
    //                    command.Parameters.AddWithValue("series", maxontrans + 1);
    //                    command.Parameters.AddWithValue("zcode", remotezcode == 0 ? zonecode : remotezcode);
    //                    command.Parameters.AddWithValue("tp", type);
    //                    int abc101 = command.ExecuteNonQuery();
    //                }
    //            }
    //        }
    //        catch (Exception ex)
    //        {
    //            throw new Exception("Error sa pg-update sa control!: " + ex.ToString());
    //        }
    //        checkinglang.Close();
    //    }
    //    return "test";
    //}


    private object saveSendoutDomestic(List<Object> values, String series, int syscreator, String bcode, Int32 zonecode, String custID, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderContactNo, int SenderIsSMS, String SenderBirthdate, String SenderBranchID, String ReceiverMLCardNO, String ReceiverFName, String ReceiverLName, String ReceiverMName, String ReceiverStreet, String ReceiverProvinceCity, String ReceiverCountry, String ReceiverGender, String ReceiverContactNo, String ReceiverBirthdate, Int32 type, String ExpiryDate, String stationcode, String kptn, Int32 remotezcode, String RemoteBranchCode, String Purposeoftransaction,String Rewardsredeemcode,String Rewardscustomerid,String Rewardslastname)
    {
        int respcoderesp = 0;
        String respmsgresp = "", custidresp = "", redeemcoderesp = "";
        try
        {
            //String senderid = "";
            dt = getServerDateDomestic(false);
            DateTime dte = dt;
            int sr = ConvertSeries(series);
            String datenow = dt.ToString("ddMM");

            String controlno = values[0].ToString();
            String OperatorID = values[1].ToString();
            String station = values[2].ToString();
            String IsRemote = values[3].ToString().Trim();
            String RemoteBranch = values[4].ToString();
            String RemoteOperatorID = values[5].ToString();
            Double redeempts = Convert.ToDouble(values[16]);
            String promoname = values[19].ToString();

            if (RemoteBranchCode == string.Empty)
                RemoteBranchCode = RemoteBranch;
            //
            //additional trapping to avoid duplicate control
            //
            using (MySqlConnection checkinglang = dbconDomestic.getConnection())
            {
                checkinglang.Open();
                // Int32 maxontrans = 0;
                try
                {
                    //  MySqlCommand cmdchecking = new MySqlCommand();
                    using (command = checkinglang.CreateCommand())
                    {
                        //checking
                        String promo = "";
                        String checktrans = "SELECT COUNT(custid) AS transAday FROM kpdomestic.sendout" + datenow + " WHERE CustID=@custid AND Promo=@promo";
                        command.CommandText = checktrans;
                        command.Parameters.AddWithValue("custid", custID);
                        command.Parameters.AddWithValue("promo", promoname);
                        MySqlDataReader rdr = command.ExecuteReader();
                        if (rdr.HasRows)
                        {
                            rdr.Read();
                            Int16 transAday = Convert.ToInt16(rdr["transAday"]);
                            rdr.Close();

                            String checkvalidtrans = "SELECT COALESCE(limitperday,0) AS limitperday FROM kpforms.promoratesheader WHERE promoname=@promo " +
                                "AND DATE_FORMAT(NOW(),'%Y-%m-%d') <= DATE_FORMAT(expirydate,'%Y-%m-%d') ORDER BY effectivedate";
                            command.CommandText = checkvalidtrans;
                            command.Parameters.AddWithValue("promo", promoname);
                            MySqlDataReader rdrmax = command.ExecuteReader();
                            if (rdrmax.Read())
                            {
                                Int16 limitperday = Convert.ToInt16(rdrmax["limitperday"]);
                                rdrmax.Close();

                                if (transAday >= limitperday || limitperday != 0)
                                {
                                    checkinglang.Close();
                                    dbconDomestic.CloseConnection();
                                    promo = promoname.Contains("PROMO") ? promoname : promoname + " PROMO";
                                    kplog.Info(kptn + "|" + custID + " - Customer already availed the " + promo + " " + transAday + " time/s");
                                    return new SendoutResponse { respcode = 0, message = "Customer already availed the " + promo + "." };
                                }
                            }
                            else
                            {
                                kplog.Info(kptn + "|" + custID + " - Promo not found " + promo);
                                return new SendoutResponse { respcode = 0, message = "Promo not found." };
                            }
                        }

                        string checkifcontrolexist = "select controlno from " + generateTableNameDomestic(0, null) + " where controlno=@controlno";
                        command.CommandTimeout = 0;
                        command.CommandText = checkifcontrolexist;
                        command.Parameters.AddWithValue("controlno", controlno);
                        MySqlDataReader controlexistreader = command.ExecuteReader();
                        if (controlexistreader.HasRows)
                        {
                            controlexistreader.Close();

                            string query101 = string.Empty;

                            if (IsRemote == "1")
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameDomestic(0, null) + " where remotebranch = @branchcode and stationid = @stationid and remotezonecode =@zonecode";
                            else
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameDomestic(0, null) + " where branchcode = @branchcode and stationid = @stationid and zonecode=@zonecode";

                            //  string getcontrolmax = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max from " + generateTableNameDomestic(0, null) + " where if(isremote=1,remotebranch,branchcode) = @branchcode and stationid = @stationid and if(remotezonecode=0 or remotezonecode is null, zonecode,remotezonecode) =@zonecode";
                            command.CommandText = query101;
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("branchcode", IsRemote == "1" ? RemoteBranchCode : bcode);
                            command.Parameters.AddWithValue("stationid", station);
                            command.Parameters.AddWithValue("zonecode", remotezcode == 0 ? zonecode : remotezcode);

                            MySqlDataReader controlmaxreader = command.ExecuteReader();
                            if (controlmaxreader.Read())
                            {
                                sr = Convert.ToInt32(controlmaxreader["max1"].ToString()) + 1;

                                //controlmaxreader.Close();
                            }
                            controlmaxreader.Close();

                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("st", IsRemote == "1" ? "00" : station);
                            command.Parameters.AddWithValue("bcode", IsRemote == "1" ? RemoteBranchCode : bcode);
                            command.Parameters.AddWithValue("series", sr);
                            command.Parameters.AddWithValue("zcode", remotezcode == 0 ? zonecode : remotezcode);
                            command.Parameters.AddWithValue("tp", type);
                            int abc101 = command.ExecuteNonQuery();

                            //command.Dispose();
                            checkinglang.Close();
                            dbconDomestic.CloseConnection();
                            kplog.Error(kptn + " - " + controlno + " - Problem saving transaction.");

                            try
                            {
                                kplog.Info(kptn + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                                MLRewards.MLRewardsRedeem rewards;
                                MLRewards.UnsuccessfulRedeem redeemresp;

                                using (rewards = new MLRewards.MLRewardsRedeem())
                                {
                                    rewards.Url = redemurl;
                                    redeemresp = new MLRewards.UnsuccessfulRedeem();

                                    redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                                    respcoderesp = redeemresp.respcode;
                                    respmsgresp = redeemresp.respmsg;
                                    custidresp = redeemresp.CustomerID_;
                                    redeemcoderesp = redeemresp.RedeemCode_;

                                    kplog.Info(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                                }
                            }
                            catch (Exception ex)
                            {
                                kplog.Fatal(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                            }
                            return new SendoutResponse { respcode = 0, message = "Problem saving transaction. Please close the sendout window and try again." };

                        }
                    }
                }
                catch (Exception ex)
                {
                    checkinglang.Close();
                    dbconDomestic.CloseConnection();
                    kplog.Fatal(kptn + " - " + ex.ToString());
                    try
                    {
                        kplog.Info(kptn + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                        MLRewards.MLRewardsRedeem rewards;
                        MLRewards.UnsuccessfulRedeem redeemresp;

                        using (rewards = new MLRewards.MLRewardsRedeem())
                        {
                            rewards.Url = redemurl;
                            redeemresp = new MLRewards.UnsuccessfulRedeem();

                            redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                            respcoderesp = redeemresp.respcode;
                            respmsgresp = redeemresp.respmsg;
                            custidresp = redeemresp.CustomerID_;
                            redeemcoderesp = redeemresp.RedeemCode_;

                            kplog.Info(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                        }
                    }
                    catch (Exception ex1)
                    {
                        kplog.Fatal(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex1.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                    }
                    return new SendoutResponse { respcode = 0, message = "Problem saving transaction. Please close the sendout window and try again.. \n" + ex.ToString() };
                }
                checkinglang.Close();
                dbconDomestic.CloseConnection();
            }
            //
            //end of trapping for duplicate control
            //

            

            StringBuilder query = new StringBuilder("Insert into " + generateTableNameDomestic(0, null) + "(");
            List<string> li = new List<string>();
            List<string> param = new List<string>();
            String orno;


            param.Add("ControlNo");
            param.Add("OperatorID");
            param.Add("StationID");
            param.Add("IsRemote");
            param.Add("RemoteBranch");
            param.Add("RemoteOperatorID");
            param.Add("Reason");
            param.Add("IsPassword");
            param.Add("TransPassword");
            param.Add("Purpose");
            param.Add("syscreator");
            param.Add("Source");
            param.Add("Currency");
            param.Add("Principal");
            param.Add("Charge");
            param.Add("OtherCharge");
            param.Add("Redeem");
            param.Add("Total");
            param.Add("Promo");
            param.Add("Relation");
            param.Add("Message");
            param.Add("IDType");
            param.Add("IDNo");
            param.Add("isClaimed");
            param.Add("IsCancelled");
            param.Add("KPTNNo");
            param.Add("ORNo");
            //param.Add("kptn4");
            param.Add("BranchCode");
            param.Add("ZoneCode");
            param.Add("TransDate");
            param.Add("ExpiryDate");
            param.Add("CustID");
            param.Add("SenderMLCardNo");
            param.Add("SenderFName");
            param.Add("SenderLName");
            param.Add("SenderMName");
            param.Add("SenderName");
            param.Add("SenderStreet");
            param.Add("SenderProvinceCity");
            param.Add("SenderCountry");
            param.Add("SenderGender");
            param.Add("SenderContactNo");
            param.Add("SenderBirthDate");
            param.Add("SenderBranchID");
            param.Add("ReceiverMLCardNo");
            param.Add("ReceiverFName");
            param.Add("ReceiverLName");
            param.Add("ReceiverMName");
            param.Add("ReceiverName");
            param.Add("ReceiverStreet");
            param.Add("ReceiverProvinceCity");
            param.Add("ReceiverCountry");
            param.Add("ReceiverGender");
            param.Add("ReceiverContactNo");
            param.Add("ReceiverBirthDate");
            param.Add("SenderIsSMS");
            param.Add("RemoteZoneCode");
            //param.Add("Purpose");
            //param.Add("vat");


            using (MySqlConnection conn = dbconDomestic.getConnection())
            {
                conn.Open();

                trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                //var attempt = 0;
                //do
                //{
                //    attempt++;
                //    kplog.Info(kptn + " - " + "Attempt count inserting MLSendout Database: " + attempt);
                try
                {
                    //throw new Exception("BOOM");
                    using (command = conn.CreateCommand())
                    {
                        if (redeempts > 0.0)
                        {
                            command.Parameters.Clear();
                            string sql = "Insert into kpdomestic.redeemtransactions (kptn, redeempts, txndate) values (@kptn, @redeempts, now());";
                            command.CommandText = sql;
                            command.Parameters.AddWithValue("kptn", kptn);
                            command.Parameters.AddWithValue("redeempts", redeempts);
                            int x = command.ExecuteNonQuery();
                        }
                        command.Parameters.Clear();


                        // trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                        command.CommandText = "SET autocommit=0;";
                        command.ExecuteNonQuery();

                        command.Transaction = trans;


                        for (var f = 0; f < param.Count; f++)
                        {
                            query.Append("`").Append(param[f]).Append("`");
                            if ((f + 1) != param.Count)
                            {
                                query.Append(",");
                            }
                            li.Add(param[f]);

                        }
                        query.Append(") values ( ");

                        for (var f = 0; f < param.Count; f++)
                        {
                            query.Append("@").Append(param[f]);
                            if ((f + 1) != param.Count)
                            {
                                query.Append(", ");
                            }
                            li.Add(param[f]);

                        }
                        query.Append(")");

                        //throw new Exception(query.ToString());
                        //Reader.Close();


                        //return li;
                    }
                    //throw new Exception(query.ToString());
                    using (command = conn.CreateCommand())
                    {
                        //conn.Open();

                        //String kptn;
                        //String controlno = values[0].ToString();
                        //String OperatorID = values[1].ToString();
                        //String station = values[2].ToString();
                        //String IsRemote = values[3].ToString().Trim();
                        //String RemoteBranch = values[4].ToString();
                        //String RemoteOperatorID = values[5].ToString();
                        String RemoteReason;
                        //13 14 17

                        if (Convert.ToDouble(values[13]) == 0 || Convert.ToDouble(values[14]) == 0 || Convert.ToDouble(values[17]) == 0)
                        {
                            kplog.Error(kptn + " - " + getRespMessage(15));
                            try
                            {
                                kplog.Info(kptn + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                                MLRewards.MLRewardsRedeem rewards;
                                MLRewards.UnsuccessfulRedeem redeemresp;

                                using (rewards = new MLRewards.MLRewardsRedeem())
                                {
                                    rewards.Url = redemurl;
                                    redeemresp = new MLRewards.UnsuccessfulRedeem();

                                    redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                                    respcoderesp = redeemresp.respcode;
                                    respmsgresp = redeemresp.respmsg;
                                    custidresp = redeemresp.CustomerID_;
                                    redeemcoderesp = redeemresp.RedeemCode_;

                                    kplog.Info(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                                }
                            }
                            catch (Exception ex)
                            {
                                kplog.Fatal(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                            }
                            return new SendoutResponse { respcode = 15, message = getRespMessage(15) };
                        }

                        try
                        {
                            RemoteReason = values[6].ToString();
                        }
                        catch (Exception ex)
                        {
                            kplog.Error(kptn + " - Remote reason set to null", ex);
                            RemoteReason = null;
                        }

                        //Remove to support seccom trappings
                        if (IsRemote.Equals("1"))
                        {
                            //kptn = validateGeneratedKPTN(RemoteBranch, zonecode, String.Empty);
                            orno = generateResiboDomestic(RemoteBranch, zonecode, command, Rewardsredeemcode, Rewardscustomerid, Rewardslastname);
                        }
                        else
                        {
                            //kptn = validateGeneratedKPTN(bcode, zonecode, String.Empty);
                            orno = generateResiboDomestic(bcode, zonecode, command, Rewardsredeemcode, Rewardscustomerid, Rewardslastname);
                        }

                        command.CommandText = query.ToString();

                        for (var x = 0; x < values.Count; x++)
                        {


                            //Tinyint
                            if (x == 3 || x == 7)
                            {
                                command.Parameters.AddWithValue(li[x], Convert.ToInt32(values[x]));
                            }
                            //Double
                            else if (x == 13 || x == 14 || x == 15 || x == 16 || x == 17)
                            {
                                command.Parameters.AddWithValue(li[x], Convert.ToDecimal(values[x]));
                            }
                            else if (x == 9)
                            {
                                command.Parameters.AddWithValue(li[x], (((Purposeoftransaction.ToString() == string.Empty) || Purposeoftransaction.Equals(""))) ? values[x] : Purposeoftransaction);
                            }
                            else if (x == 10)
                            {
                                command.Parameters.AddWithValue(li[x], Convert.ToInt64(values[x]));
                            }
                            else
                            {
                                command.Parameters.AddWithValue(li[x], values[x]);
                            }

                        }
                        //command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("IsClaimed", 0);
                        command.Parameters.AddWithValue("IsCancelled", 0);
                        //command.Parameters.AddWithValue("IsReturned", 0);
                        command.Parameters.AddWithValue("ORNo", orno);
                        //throw new Exception(kptn);
                        command.Parameters.AddWithValue("KPTNNo", kptn);
                        //command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        //command.Parameters.AddWithValue("kptn4", kptn4);
                        command.Parameters.AddWithValue("BranchCode", bcode);
                        command.Parameters.AddWithValue("ZoneCode", zonecode);
                        command.Parameters.AddWithValue("TransDate", dte.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("ExpiryDate", ExpiryDate);
                        command.Parameters.AddWithValue("CustID", custID);
                        command.Parameters.AddWithValue("SenderMLCardNO", SenderMLCardNO);
                        command.Parameters.AddWithValue("SenderFName", SenderFName);
                        command.Parameters.AddWithValue("SenderLName", SenderLName);
                        command.Parameters.AddWithValue("SenderMName", SenderMName);
                        command.Parameters.AddWithValue("SenderName", SenderLName + ", " + SenderFName + " " + SenderMName);
                        command.Parameters.AddWithValue("SenderStreet", SenderStreet);
                        command.Parameters.AddWithValue("SenderProvinceCity", SenderProvinceCity);
                        command.Parameters.AddWithValue("SenderCountry", SenderCountry);
                        command.Parameters.AddWithValue("SenderGender", SenderGender);
                        command.Parameters.AddWithValue("SenderContactNo", SenderContactNo);
                        command.Parameters.AddWithValue("SenderIsSMS", SenderIsSMS);
                        command.Parameters.AddWithValue("SenderBirthdate", SenderBirthdate);
                        command.Parameters.AddWithValue("SenderBranchID", SenderBranchID);
                        command.Parameters.AddWithValue("ReceiverMLCardNO", ReceiverMLCardNO);
                        command.Parameters.AddWithValue("ReceiverFName", ReceiverFName);
                        command.Parameters.AddWithValue("ReceiverLName", ReceiverLName);
                        command.Parameters.AddWithValue("ReceiverMName", ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverName", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverStreet", ReceiverStreet);
                        command.Parameters.AddWithValue("ReceiverProvinceCity", ReceiverProvinceCity);
                        command.Parameters.AddWithValue("ReceiverCountry", ReceiverCountry);
                        command.Parameters.AddWithValue("ReceiverGender", ReceiverGender);
                        command.Parameters.AddWithValue("ReceiverContactNo", ReceiverContactNo);
                        command.Parameters.AddWithValue("ReceiverBirthdate", ReceiverBirthdate);
                        command.Parameters.AddWithValue("RemoteZoneCode", remotezcode);
                        command.Parameters.AddWithValue("Promo", promoname);
                        //command.Parameters.AddWithValue("Purpose", Purposeoftransaction);
                        //command.Parameters.AddWithValue("vat", vat);

                        //var attemptsendout365table = 0;
                        //do
                        //{
                        //    attemptsendout365table++;
                        //    kplog.Info(kptn + " - " + "Attempt count inserting sendout365 Database: " + attemptsendout365table);
                        try
                        {
                            int xsave = command.ExecuteNonQuery();
                            if (xsave < 1)
                            {
                                trans.Rollback();
                                dbconDomestic.CloseConnection();
                                kplog.Error(kptn + " - Review parameters");
                                try
                                {
                                    kplog.Info(kptn + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                                    MLRewards.MLRewardsRedeem rewards;
                                    MLRewards.UnsuccessfulRedeem redeemresp;

                                    using (rewards = new MLRewards.MLRewardsRedeem())
                                    {
                                        rewards.Url = redemurl;
                                        redeemresp = new MLRewards.UnsuccessfulRedeem();

                                        redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                                        respcoderesp = redeemresp.respcode;
                                        respmsgresp = redeemresp.respmsg;
                                        custidresp = redeemresp.CustomerID_;
                                        redeemcoderesp = redeemresp.RedeemCode_;

                                        kplog.Info(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    kplog.Fatal(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                                }
                                return new SendoutResponse { respcode = 12, message = getRespMessage(12), ErrorDetail = "Review paramerters." };
                            }

                        }
                        catch (MySqlException myyyx)
                        {
                            //if (myyyx.Message.Contains("Duplicate"))
                            try
                            {
                                kplog.Info(kptn + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                                MLRewards.MLRewardsRedeem rewards;
                                MLRewards.UnsuccessfulRedeem redeemresp;

                                using (rewards = new MLRewards.MLRewardsRedeem())
                                {
                                    rewards.Url = redemurl;
                                    redeemresp = new MLRewards.UnsuccessfulRedeem();

                                    redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                                    respcoderesp = redeemresp.respcode;
                                    respmsgresp = redeemresp.respmsg;
                                    custidresp = redeemresp.CustomerID_;
                                    redeemcoderesp = redeemresp.RedeemCode_;

                                    kplog.Info(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                                }
                            }
                            catch (Exception ex)
                            {
                                kplog.Fatal(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                            }
                            kplog.Fatal(kptn + " - " + myyyx.ToString());
                            if (myyyx.Number == 1062)
                            {
                                kplog.Fatal(kptn + " - mysql errcode: 1062", myyyx);
                                command.Parameters.Clear();
                                if (IsRemote.Equals("1"))
                                {
                                    command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                                    command.Parameters.AddWithValue("st", "00");
                                    command.Parameters.AddWithValue("bcode", RemoteBranch);
                                    command.Parameters.AddWithValue("series", sr + 1);
                                    command.Parameters.AddWithValue("zcode", zonecode);
                                    command.Parameters.AddWithValue("tp", type);
                                    int x = command.ExecuteNonQuery();
                                    if (x < 1)
                                    {
                                        kplog.Error(kptn + " - Review Parameters");
                                        trans.Rollback();
                                        dbconDomestic.CloseConnection();

                                        return new SendoutResponse { respcode = 12, message = getRespMessage(12), ErrorDetail = "Review paramerters." };
                                    }
                                }
                                else
                                {
                                    //int intzcode = Convert.ToInt32(zonecode);
                                    //cr = generateControl(loginuser, loginpass, bcode, type, OperatorID, intzcode, station);
                                    command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                                    command.Parameters.AddWithValue("st", station);
                                    command.Parameters.AddWithValue("bcode", bcode);
                                    command.Parameters.AddWithValue("series", sr + 1);
                                    command.Parameters.AddWithValue("zcode", zonecode);
                                    command.Parameters.AddWithValue("tp", type);
                                    command.ExecuteNonQuery();
                                    int x = command.ExecuteNonQuery();
                                    if (x < 1)
                                    {
                                        kplog.Error(kptn + " - Review Parameters");
                                        trans.Rollback();
                                        dbconDomestic.CloseConnection();

                                        return new SendoutResponse { respcode = 12, message = getRespMessage(12), ErrorDetail = "Review paramerters." };
                                    }
                                }

                                trans.Commit();

                                conn.Close();

                                return new SendoutResponse { respcode = 13, message = "Problem saving transaction. Please close the sendout window and open again. Thank you.", ErrorDetail = "Review paramerters." };
                            }
                            else
                            {
                                if (myyyx.Number == 1213)
                                {
                                    kplog.Fatal(kptn + " - mysql errcode: 1213", myyyx);
                                    trans.Rollback();
                                    dbconDomestic.CloseConnection();

                                    return new SendoutResponse { respcode = 11, message = getRespMessage(11), ErrorDetail = "Problem occured during saving. Please resave the transaction." };
                                }
                                else
                                {
                                    trans.Rollback();
                                    dbconDomestic.CloseConnection();

                                    return new SendoutResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = myyyx.ToString() };
                                }
                            }
                        }
                        //} while (true);
                        //command.CommandText = "Insert into " + generateTableName(2, null) + "(`KPTN6`, `MLKP4TN`, `TransDate`, `IsClaimed`, `IsCancelled`) values (@KPTN6, @MLKP4TN, @TransDate1, @IsClaimed1, @IsCancelled1)";
                        //command.Parameters.AddWithValue("KPTN6", kptn);
                        //command.Parameters.AddWithValue("MLKP4TN", kptn4);
                        //command.Parameters.AddWithValue("TransDate1", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        //command.Parameters.AddWithValue("IsClaimed1", 0);
                        //command.Parameters.AddWithValue("IsCancelled1", 0);
                        //command.ExecuteNonQuery();

                        //ControlResponse cr;

                        if (IsRemote.Equals("1"))
                        {
                            //throw new Exception("boom");
                            //int intzcode = Convert.ToInt32(zonecode);
                            //cr = generateControl(loginuser, loginpass, RemoteBranch, type, OperatorID, intzcode, "00");

                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.AddWithValue("st", "00");
                            command.Parameters.AddWithValue("bcode", RemoteBranch);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", remotezcode);
                            command.Parameters.AddWithValue("tp", type);
                            int x = command.ExecuteNonQuery();
                            if (x < 1)
                            {
                                kplog.Error(kptn + " - Review Parameters");
                                trans.Rollback();
                                dbconDomestic.CloseConnection();
                                try
                                {
                                    kplog.Info(kptn + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                                    MLRewards.MLRewardsRedeem rewards;
                                    MLRewards.UnsuccessfulRedeem redeemresp;

                                    using (rewards = new MLRewards.MLRewardsRedeem())
                                    {
                                        rewards.Url = redemurl;
                                        redeemresp = new MLRewards.UnsuccessfulRedeem();

                                        redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                                        respcoderesp = redeemresp.respcode;
                                        respmsgresp = redeemresp.respmsg;
                                        custidresp = redeemresp.CustomerID_;
                                        redeemcoderesp = redeemresp.RedeemCode_;

                                        kplog.Info(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    kplog.Fatal(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                                }
                                return new SendoutResponse { respcode = 12, message = getRespMessage(12), ErrorDetail = "Review paramerters." };
                            }
                        }
                        else
                        {
                            //int intzcode = Convert.ToInt32(zonecode);
                            //cr = generateControl(loginuser, loginpass, bcode, type, OperatorID, intzcode, station);
                            command.CommandText = "update kpforms.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            command.Parameters.AddWithValue("st", station);
                            command.Parameters.AddWithValue("bcode", bcode);
                            command.Parameters.AddWithValue("series", sr + 1);
                            command.Parameters.AddWithValue("zcode", zonecode);
                            command.Parameters.AddWithValue("tp", type);
                            command.ExecuteNonQuery();
                            int x = command.ExecuteNonQuery();
                            if (x < 1)
                            {
                                kplog.Error(kptn + " - Review Parameters");
                                trans.Rollback();
                                dbconDomestic.CloseConnection();
                                try
                                {
                                    kplog.Info(kptn + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                                    MLRewards.MLRewardsRedeem rewards;
                                    MLRewards.UnsuccessfulRedeem redeemresp;

                                    using (rewards = new MLRewards.MLRewardsRedeem())
                                    {
                                        rewards.Url = redemurl;
                                        redeemresp = new MLRewards.UnsuccessfulRedeem();

                                        redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                                        respcoderesp = redeemresp.respcode;
                                        respmsgresp = redeemresp.respmsg;
                                        custidresp = redeemresp.CustomerID_;
                                        redeemcoderesp = redeemresp.RedeemCode_;

                                        kplog.Info(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    kplog.Fatal(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                                }
                                return new SendoutResponse { respcode = 12, message = getRespMessage(12), ErrorDetail = "Review paramerters." };
                            }
                        }


                        if (IsRemote.Equals("1"))
                        {
                            //kptn = validateGeneratedKPTN(RemoteBranch, zonecode, String.Empty);
                            updateResiboDomestic(RemoteBranch, remotezcode, orno, ref command, Rewardsredeemcode, Rewardscustomerid, Rewardslastname);
                        }
                        else
                        {
                            //kptn = validateGeneratedKPTN(bcode, zonecode, String.Empty);
                            updateResiboDomestic(bcode, zonecode, orno, ref command, Rewardsredeemcode, Rewardscustomerid, Rewardslastname);
                        }

                        String shortkptn = "MLD" + kptn.Substring(6, 10);
                        String insertshortkptn = "insert into kpadminlogs.shortenKPTN (kptnno,shortkptnno,txndate)values(@kptnno,@shortkptnno,@txndate)";
                        command.Parameters.Clear();
                        command.CommandText = insertshortkptn;
                        command.CommandType = CommandType.Text;
                        command.Parameters.AddWithValue("kptnno", kptn);
                        command.Parameters.AddWithValue("shortkptnno", shortkptn);
                        command.Parameters.AddWithValue("txndate", dte.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.ExecuteNonQuery();

                        command.Parameters.Clear();
                        command.CommandText = "kpadminlogs.savelog53";
                        command.CommandType = CommandType.StoredProcedure;

                        command.Parameters.AddWithValue("kptnno", kptn);
                        command.Parameters.AddWithValue("action", "SENDOUT");
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("txndate", dte);
                        command.Parameters.AddWithValue("stationcode", stationcode);
                        command.Parameters.AddWithValue("stationno", station);
                        command.Parameters.AddWithValue("zonecode", zonecode);
                        command.Parameters.AddWithValue("branchcode", bcode);
                        command.Parameters.AddWithValue("branchname", SenderBranchID);
                        command.Parameters.AddWithValue("operatorid", OperatorID);
                        command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                        command.Parameters.AddWithValue("remotereason", RemoteReason);
                        command.Parameters.AddWithValue("remotebranch", (RemoteBranchCode.Equals(DBNull.Value)) ? null : RemoteBranchCode);
                        command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                        command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                        command.Parameters.AddWithValue("remotezonecode", remotezcode);
                        command.Parameters.AddWithValue("type", "N");

                        command.ExecuteNonQuery();


                        trans.Commit();
                        //custtrans.Commit();

                        conn.Close();
                        kplog.Info(kptn + " - Successfully Saved");
                        return new SendoutResponse { respcode = 1, message = getRespMessage(1), kptn = kptn, orno = orno, transdate = dte, shortkptn = shortkptn };
                    }
                }
                catch (MySqlException myx)
                {
                    try
                    {
                        kplog.Info(kptn + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                        MLRewards.MLRewardsRedeem rewards;
                        MLRewards.UnsuccessfulRedeem redeemresp;

                        using (rewards = new MLRewards.MLRewardsRedeem())
                        {
                            rewards.Url = redemurl;
                            redeemresp = new MLRewards.UnsuccessfulRedeem();

                            redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                            respcoderesp = redeemresp.respcode;
                            respmsgresp = redeemresp.respmsg;
                            custidresp = redeemresp.CustomerID_;
                            redeemcoderesp = redeemresp.RedeemCode_;

                            kplog.Info(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                        }
                    }
                    catch (Exception ex)
                    {
                        kplog.Fatal(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                    }
                    kplog.Fatal(kptn + " - " + myx.ToString());
                    if (myx.Number == 1213)
                    {
                        kplog.Fatal(kptn + " - mysql errcode: 1213");
                        trans.Rollback();
                        dbconDomestic.CloseConnection();

                        return new SendoutResponse { respcode = 11, message = getRespMessage(11), ErrorDetail = "Problem occured during saving. Please resave the transaction." };
                    }
                    else
                    {
                        trans.Rollback();
                        dbconDomestic.CloseConnection();

                        return new SendoutResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = myx.ToString() };
                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(kptn + " - mysql exception catched");
                    trans.Rollback();
                    dbconDomestic.CloseConnection();
                    try
                    {
                        kplog.Info(kptn + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                        MLRewards.MLRewardsRedeem rewards;
                        MLRewards.UnsuccessfulRedeem redeemresp;

                        using (rewards = new MLRewards.MLRewardsRedeem())
                        {
                            rewards.Url = redemurl;
                            redeemresp = new MLRewards.UnsuccessfulRedeem();

                            redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                            respcoderesp = redeemresp.respcode;
                            respmsgresp = redeemresp.respmsg;
                            custidresp = redeemresp.CustomerID_;
                            redeemcoderesp = redeemresp.RedeemCode_;

                            kplog.Info(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                        }
                    }
                    catch (Exception ex1)
                    {
                        kplog.Fatal(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex1.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                    }
                    return new SendoutResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                }
                //} while (true);
                
            }
            //using (MySqlConnection conn = dbcon.getConnection())
            //{

            //}
        }
        catch (Exception ex)
        {
            kplog.Fatal(kptn + " - Outer exception catched.", ex);
            //trans.Rollback();
            dbconDomestic.CloseConnection();
            try
            {
                kplog.Info(kptn + " - Attempt UndoRedemption: " + Rewardscustomerid + " | " + Rewardsredeemcode + " | " + Rewardslastname);
                MLRewards.MLRewardsRedeem rewards;
                MLRewards.UnsuccessfulRedeem redeemresp;

                using (rewards = new MLRewards.MLRewardsRedeem())
                {
                    rewards.Url = redemurl;
                    redeemresp = new MLRewards.UnsuccessfulRedeem();

                    redeemresp = rewards.UndoRedemption(Rewardscustomerid, Rewardsredeemcode, Rewardslastname);
                    respcoderesp = redeemresp.respcode;
                    respmsgresp = redeemresp.respmsg;
                    custidresp = redeemresp.CustomerID_;
                    redeemcoderesp = redeemresp.RedeemCode_;

                    kplog.Info(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints response: " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
                }
            }
            catch (Exception ex1)
            {
                kplog.Fatal(kptn + " | " + Rewardscustomerid + " - UndoRedeemPoints Catch response: " + ex1.ToString() + " - " + respcoderesp + " | " + respmsgresp + " | " + custidresp + " | " + redeemcoderesp);
            }
            return new SendoutResponse { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }

    }

    public String getcustomertable(String lastname)
    {
        String customers = "";
        if (lastname.StartsWith("A") || lastname.StartsWith("B") || lastname.StartsWith("C"))
        {
            customers = "AtoC";
        }
        else if (lastname.StartsWith("D") || lastname.StartsWith("E") || lastname.StartsWith("F"))
        {
            customers = "DtoF";
        }
        else if (lastname.StartsWith("G") || lastname.StartsWith("H") || lastname.StartsWith("I"))
        {
            customers = "GtoI";
        }
        else if (lastname.StartsWith("J") || lastname.StartsWith("K") || lastname.StartsWith("L"))
        {
            customers = "JtoL";
        }
        else if (lastname.StartsWith("M") || lastname.StartsWith("N") || lastname.StartsWith("O"))
        {
            customers = "MtoO";
        }
        else if (lastname.StartsWith("P") || lastname.StartsWith("Q") || lastname.StartsWith("R"))
        {
            customers = "PtoR";
        }
        else if (lastname.StartsWith("S") || lastname.StartsWith("T") || lastname.StartsWith("U"))
        {
            customers = "StoU";
        }
        else if (lastname.StartsWith("V") || lastname.StartsWith("W") || lastname.StartsWith("X"))
        {
            customers = "VtoX";
        }
        else if (lastname.StartsWith("Y") || lastname.StartsWith("Z"))
        {
            customers = "YtoZ";
        }
        return customers;
    }


    private DateTime getCustServerDateDomestic(Boolean isOpenConnection)
    {
        try
        {
            if (!isOpenConnection)
            {
                using (MySqlConnection conn = custconDomestic.getConnection())
                {
                    conn.Open();
                    using (MySqlCommand command = conn.CreateCommand())
                    {

                        DateTime serverdate;

                        command.CommandText = "Select NOW() as serverdt;";
                        using (MySqlDataReader Reader = command.ExecuteReader())
                        {
                            Reader.Read();
                            serverdate = Convert.ToDateTime(Reader["serverdt"]);
                            Reader.Close();
                            conn.Close();

                            return serverdate;
                        }

                    }
                }
            }
            else
            {

                DateTime serverdate;

                command.CommandText = "Select NOW() as serverdt;";

                using (MySqlDataReader Reader = command.ExecuteReader())
                {
                    Reader.Read();
                    serverdate = (DateTime)Reader["serverdt"];
                    Reader.Close();
                    return serverdate;
                }


            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.Message);
        }
    }

    [WebMethod]
    public CustomerUpdateResponse updateCustInfo(String Username, String Password, String CustId, String NatureOfWork, String Nationality, String PlaceOfBirth, String CompanyOrEmployer, String BusinessOrProfession, String Modifier)
    {
        if (!authenticate(Username, Password))
        {
            return new CustomerUpdateResponse { respcode = 7, message = getRespMessage(7) };
        }
        try
        {
            using (MySqlConnection con = custconDomestic.getConnection())
            {
                con.Open();
                using (MySqlCommand com = con.CreateCommand())
                {
                    MySqlTransaction trans = con.BeginTransaction(IsolationLevel.ReadCommitted);
                    ////////////String query = "Update kpcustomers.customers a set a.PlaceofBirth = @PlaceofBirth, a.NatureOfWork = @NatureOfWork, a.Nationality = @Nationality, a.CompanyOrEmployer = @CompanyOrEmployer,a.BusinessOrProfession = @BusinessOrProfession WHERE a.CustID = @CustID;";
                    ////////////com.CommandText = query;
                    ////////////com.Parameters.Clear();
                    ////////////com.Parameters.AddWithValue("PlaceOfBirth", PlaceOfBirth);
                    ////////////com.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
                    ////////////com.Parameters.AddWithValue("Nationality", Nationality);
                    ////////////com.Parameters.AddWithValue("CustId", CustId);
                    ////////////com.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
                    ////////////com.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
                    ////////////int i = com.ExecuteNonQuery();

                    string custinfo = "INSERT INTO kpcustomers.CustomerInfo (CustID, PlaceofBirth, NatureOfWork, " +
                        "PermanentAddress, Nationality, CompanyOrEmployer, BusinessOrProfession, DTModified, DTModifier) " +
                        "VALUES (@CustId, @PlaceofBirth, @NatureOfWork, @PermanentAddress, @Nationality , " +
                        "@CompanyOrEmployer, @BusinessOrProfession, now(),@DTModifier) ON DUPLICATE KEY UPDATE " +
                        "PlaceofBirth = @PlaceofBirth, NatureOfWork = @NatureOfWork, PermanentAddress = @PermanentAddress, " +
                        "Nationality = @Nationality, CompanyOrEmployer = @CompanyOrEmployer, " +
                        "BusinessOrProfession = @BusinessOrProfession, DTModified=now(), DTModifier=@DTModifier;";
                    com.CommandText = custinfo;
                    com.Parameters.Clear();
                    com.Parameters.AddWithValue("CustId", CustId);
                    com.Parameters.AddWithValue("PlaceofBirth", PlaceOfBirth);
                    com.Parameters.AddWithValue("NatureOfWork", NatureOfWork);
                    com.Parameters.AddWithValue("PermanentAddress", "");
                    com.Parameters.AddWithValue("Nationality", Nationality);
                    com.Parameters.AddWithValue("CompanyOrEmployer", CompanyOrEmployer);
                    com.Parameters.AddWithValue("BusinessOrProfession", BusinessOrProfession);
                    com.Parameters.AddWithValue("DTModifier", Modifier);
                    int i = com.ExecuteNonQuery();

                    if (i == -1)
                    {
                        trans.Rollback();
                        con.Close();
                        kplog.Error(CustId + " - Error in updating customer");
                        return new CustomerUpdateResponse { respcode = 0, message = "Error in updating customer." };
                    }
                    trans.Commit();
                    con.Close();
                    kplog.Info(CustId + " - Customer Successfully Saved");
                    return new CustomerUpdateResponse { respcode = 1, message = getRespMessage(1) };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(CustId + " - " + ex.ToString());
            return new CustomerUpdateResponse { respcode = 0, message = ex.Message.ToString() };
        }
    }

    [WebMethod]
    public Decimal getAmountSend(String fname, String lname, String mname, String bdate)
    {
        Decimal totalamount = 0;
        try
        {
            DateTime dt = getServerDateDomestic(false);
            using (MySqlConnection con = dbconDomestic.getConnection())
            {
                con.Open();
                using (MySqlCommand com = con.CreateCommand())
                {

                    String query = "select if(sum(principal) is null,0,sum(principal)) as totalamount from kpdomestic.sendout" + dt.ToString("MMdd") + "  where senderfname=@fname and senderlname = @lname and sendermname = @mname and  senderbirthdate = @bdate;";
                    //String newquery = query;
                    com.CommandText = query;
                    com.Parameters.Clear();
                    com.Parameters.AddWithValue("fname", fname);
                    com.Parameters.AddWithValue("lname", lname);
                    com.Parameters.AddWithValue("mname", mname);
                    com.Parameters.AddWithValue("bdate", bdate);
                    MySqlDataReader dr = com.ExecuteReader();
                    if (dr.HasRows)
                    {
                        dr.Read();
                        totalamount = Convert.ToDecimal(dr["totalamount"].ToString());
                        dr.Close();
                        con.Close();
                        return totalamount;
                    }
                    dr.Close();
                    con.Close();
                    return totalamount;
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return totalamount;
        }
    }

    private DateTime getServerDateDomesticCustomer()
    {
        try
        {
            using (MySqlConnection conn = custconDomestic.getConnection())
            {
                conn.Open();
                using (MySqlCommand command = conn.CreateCommand())
                {

                    DateTime serverdate;

                    command.CommandText = "Select NOW() as serverdt;";
                    using (MySqlDataReader Reader = command.ExecuteReader())
                    {
                        Reader.Read();

                        serverdate = Convert.ToDateTime(Reader["serverdt"]);
                        Reader.Close();
                        conn.Close();
                        custconDomestic.CloseConnection();
                        return serverdate;
                    }

                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.Message);
        }
    }

    private DateTime getServerDateDomesticKiosk(Boolean isOpenConnection)
    {
        try
        {
            if (!isOpenConnection)
            {
                using (MySqlConnection conn = dbconkiosk.getConnection())
                {
                    conn.Open();
                    using (MySqlCommand command = conn.CreateCommand())
                    {

                        DateTime serverdate;

                        command.CommandText = "Select NOW() as serverdt;";
                        using (MySqlDataReader Reader = command.ExecuteReader())
                        {
                            Reader.Read();

                            serverdate = Convert.ToDateTime(Reader["serverdt"]);
                            Reader.Close();
                            conn.Close();

                            return serverdate;
                        }

                    }
                }
            }
            else
            {

                DateTime serverdate;

                command.CommandText = "Select NOW() as serverdt;";

                using (MySqlDataReader Reader = command.ExecuteReader())
                {
                    Reader.Read();
                    serverdate = Convert.ToDateTime(Reader["serverdt"]);
                    Reader.Close();
                    return serverdate;
                }


            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.Message);
        }
    }
    [WebMethod]
    public DateTime getServerDateDomestic(Boolean isOpenConnection)
    {

        try
        {
            //throw new Exception(isOpenConnection.ToString());
            if (!isOpenConnection)
            {
                using (MySqlConnection conn = dbconDomestic.getConnection())
                {
                    conn.Open();
                    using (MySqlCommand command = conn.CreateCommand())
                    {

                        DateTime serverdate;

                        command.CommandText = "Select now() as serverdt;";
                        using (MySqlDataReader Reader = command.ExecuteReader())
                        {
                            Reader.Read();

                            serverdate = Convert.ToDateTime(Reader["serverdt"]);
                            Reader.Close();
                            conn.Close();

                            return serverdate;
                        }

                    }
                }
            }
            else
            {

                DateTime serverdate;

                command.CommandText = "Select NOW() as serverdt;";

                using (MySqlDataReader Reader = command.ExecuteReader())
                {
                    Reader.Read();
                    serverdate = Convert.ToDateTime(Reader["serverdt"]);
                    Reader.Close();
                    return serverdate;
                }


            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.Message);
        }
    }

    private DateTime getServerDateWallet(Boolean isOpenConnection)
    {

        try
        {
            if (!isOpenConnection)
            {
                using (MySqlConnection conn = dbconWallet.getConnection())
                {
                    conn.Open();
                    using (MySqlCommand command = conn.CreateCommand())
                    {

                        DateTime serverdate;

                        command.CommandText = "Select NOW() as serverdt;";
                        using (MySqlDataReader Reader = command.ExecuteReader())
                        {
                            Reader.Read();

                            serverdate = Convert.ToDateTime(Reader["serverdt"]);
                            Reader.Close();
                            conn.Close();

                            return serverdate;
                        }

                    }
                }
            }
            else
            {

                DateTime serverdate;

                command.CommandText = "Select NOW() as serverdt;";

                using (MySqlDataReader Reader = command.ExecuteReader())
                {
                    Reader.Read();
                    serverdate = Convert.ToDateTime(Reader["serverdt"]);
                    Reader.Close();
                    return serverdate;
                }


            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.Message);
        }
    }


    [WebMethod]
    public String testGenerateTable(Int32 type)
    {
        dt = getServerDateGlobal(false);
        return generateTableNameGlobal(type, null);
    }

    [WebMethod]
    public String generateTableNameDomestic(Int32 type, String TransDate)
    {
        //DateTime dt = getServerDate(false);
        //DateTime dt = getServerDateDomestic(false);
        //return dt.ToString("MM") + dt.ToString("dd");
        if (TransDate == null)
        {
            if (type == 0)
            {
                return (isUse365Domestic == 0) ? "kpdomestic.sendout" : "kpdomestic.sendout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Domestic == 0) ? "kpdomestic.payout" : "kpdomestic.payout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else if (type == 2)
            {
                return (isUse365Domestic == 0) ? "kpdomestic.tempkptn" : "kpdomestic.tempkptn";
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
        else
        {
            DateTime TransDatetoDate = Convert.ToDateTime(TransDate);
            if (type == 0)
            {
                return (isUse365Domestic == 0) ? "kpdomestic.sendout" : "kpdomestic.sendout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Domestic == 0) ? "kpdomestic.payout" : "kpdomestic.payout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else if (type == 2)
            {
                return (isUse365Domestic == 0) ? "kpdomestic.tempkptn" : "kpdomestic.tempkptn";
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
    }

    private String generateTableNameDomesticKiosk(Int32 type, String TransDate)
    {
        if (TransDate == null)
        {
            if (type == 0)
            {
                return (isUse365Domestic == 0) ? dbconkiosk.getDB() + ".sendout" : dbconkiosk.getDB() + ".sendout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Domestic == 0) ? dbconkiosk.getDB() + ".payout" : dbconkiosk.getDB() + ".payout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
        else
        {
            DateTime TransDatetoDate = Convert.ToDateTime(TransDate);
            if (type == 0)
            {
                return (isUse365Domestic == 0) ? dbconkiosk.getDB() + ".sendout" : dbconkiosk.getDB() + ".sendout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Domestic == 0) ? dbconkiosk.getDB() + ".payout" : dbconkiosk.getDB() + ".payout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
    }

    private String generateTableNameWallet(Int32 type, String TransDate)
    {
        if (TransDate == null)
        {
            if (type == 0)
            {
                return (isUse365Wallet == 0) ? "kpmobiletransactions.sendout" : "kpmobiletransactions.sendout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Wallet == 0) ? "kpmobiletransactions.payout" : "kpmobiletransactions.payout" + dt.ToString("MM") + dt.ToString("dd");
            }
            else if (type == 2)
            {
                return (isUse365Wallet == 0) ? "kpmobiletransactions.tempkptn" : "kpmobiletransactions.tempkptn";
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
        else
        {
            DateTime TransDatetoDate = Convert.ToDateTime(TransDate);
            if (type == 0)
            {
                return (isUse365Domestic == 0) ? "kpmobiletransactions.sendout" : "kpmobiletransactions.sendout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else if (type == 1)
            {
                return (isUse365Domestic == 0) ? "kpmobiletransactions.payout" : "kpmobiletransactions.payout" + TransDatetoDate.ToString("MM") + TransDatetoDate.ToString("dd");
            }
            else if (type == 2)
            {
                return (isUse365Domestic == 0) ? "kpmobiletransactions.tempkptn" : "kpmobiletransactions.tempkptn";
            }
            else
            {
                kplog.Error("Invalid transaction type");
                throw new Exception("Invalid transaction type");
            }
        }
    }


    private Boolean validateKPTN4(String kptn4)
    {
        try
        {
            using (MySqlConnection conn = dbconGlobal.getConnection())
            {
                using (MySqlCommand command = conn.CreateCommand())
                {
                    conn.Open();
                    //DateTime dt;
                    command.CommandText = "select MLKP4TN from " + generateTableNameGlobal(2, null) + " where MLKP4TN = @kptn4;";
                    command.Parameters.AddWithValue("kptn4", kptn4);
                    using (MySqlDataReader Reader = command.ExecuteReader())
                    {

                        if (Reader.Read())
                        {
                            Reader.Close();
                            conn.Close();
                            return true;
                        }
                        else
                        {
                            Reader.Close();
                            conn.Close();
                            return false;
                        }
                    }

                }
            }

        }
        catch (Exception ex)
        {
            kplog.Fatal(kptn4 + " - " + ex.ToString());
            throw new Exception(ex.Message);
        }
    }

    [WebMethod]
    public Boolean testValidatekptn4(String kptn4)
    {
        return validateKPTN4(kptn4);
    }


    private Decimal CalculateDormantChargeDomestic(DateTime SODate)
    {

        try
        {
            //conn.Open();
            //using (command = conn.CreateCommand())
            //{
            //String queryDormant = "SELECT " +
            //                      "IF(@SODate > DATE_SUB(NOW(), " +
            //                      "INTERVAL (30 * (SELECT ChargeMonth " +
            //                                       "FROM kpforms.syscharges " +
            //                                       "WHERE ChargeCode = 'Dormant')) DAY), " +
            //                                       "0, " +
            //                                       "(SELECT ROUND(" +
            //                                            "DATEDIFF(DATE_SUB(NOW(), INTERVAL (30 * (SELECT ChargeMonth FROM kpforms.syscharges WHERE ChargeCode = 'Dormant')) DAY),@SODate) / 30,0) * (SELECT ChargeAmount FROM kpforms.syscharges WHERE ChargeCode = 'Dormant')))  AS charge; ";

            //String queryDormant = "select ((TIMESTAMPDIFF(MONTH, @SODate, now()) - (SELECT ChargeMonth FROM kpforms.syscharges WHERE ChargeCode = 'Dormant')) * (SELECT ChargeAmount FROM kpforms.syscharges WHERE ChargeCode = 'Dormant')) as charge;";

            String queryDormant = "select if(TIMESTAMPDIFF(MONTH,@SODate, now()) > 3, " +
                    "(TIMESTAMPDIFF(MONTH,@SODate, now()) - (SELECT ChargeMonth FROM kpforms.syscharges WHERE ChargeCode = 'Dormant')) * (SELECT ChargeAmount FROM kpforms.syscharges WHERE ChargeCode = 'Dormant'),0.00) as charge ;";

            command.CommandText = queryDormant;
            command.Parameters.AddWithValue("SODate", SODate.ToString("yyyy-MM-dd HH:mm:ss"));
            MySqlDataReader ReaderDormant = command.ExecuteReader();
            Decimal ChargeAmount;
            if (ReaderDormant.HasRows)
            {
                ReaderDormant.Read();

                ChargeAmount = ReaderDormant["charge"].Equals(DBNull.Value) ? 0 : (Decimal)ReaderDormant["charge"];
                ReaderDormant.Close();
                return ChargeAmount;
            }
            else
            {
                ChargeAmount = 0;
                ReaderDormant.Close();
                return ChargeAmount;
            }
        }
        //}
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }


    [WebMethod]
    public String duplicateTest(string d)
    {
        //String guid = Guid.NewGuid().GetHashCode().ToString();
        //jp.takel.PseudoRandom.MersenneTwister a = new jp.takel.PseudoRandom.MersenneTwister(Convert.ToUInt32(Convert.ToInt32(guid).GetHashCode()));
        jp.takel.PseudoRandom.MersenneTwister rand = new jp.takel.PseudoRandom.MersenneTwister((uint)DateTime.Now.Ticks);
        //list<int32> atay = new list<int32>();
        //for (int i = 0; i < 10000; ++i)
        //{
        //    atay.add(randgen.next(1000000000, int.maxvalue));
        //    //if (i % 5 == 4) console.writeline("");
        //}
        return rand.Next(1000000000, int.MaxValue).ToString();
        //return a.Next().ToString();
        //return generateKPTNGlobal("004",1);
        //int shorthash = "test".GetHashCode() % 10000000; // 8 zeros
        //if (shorthash < 0) shorthash *= -1;
        //return generateKPTN("023","2","asdf");
        //String[] a = new String[1000];
        //for (int x = 0; x < 1000;x++){
        //    a[x] = validateGeneratedKPTN("356", "1", String.Empty);
        //}
        //return a;
        //return decodeKPTN(0, "004091727258269705");
        //if (d.Contains("duplicate"))
        //{
        //    return "yes";
        //}
        //else
        //{
        //    return "no";
        //}

    }


    public String getRespMessage(Int32 code)
    {
        String x = "SYSTEM_ERROR";
        switch (code)
        {
            case 1:
                return x = "Success";
            case 2:
                return x = "Duplicate kptn";
            case 3:
                return x = "KPTN already claimed";
            case 4:
                return x = "KPTN not found";
            case 5:
                return x = "Customer not found";
            case 6:
                return x = "Customer already exist";
            case 7:
                return x = "Invalid credentials";
            case 8:
                return x = "KPTN already cancelled";
            case 9:
                return x = "Transaction is not yet claimed";
            case 10:
                return x = "Version does not match";
            case 11:
                return x = "Problem occured during saving. Please resave the transaction.";
            case 12:
                return x = "Problem saving transaction. Please close the sendout form and open it again. Thank you.";
            case 13:
                return x = "Invalid station number.";
            case 14:
                return x = "Error generating receipt number.";
            case 15:
                return x = "Unable to save transaction. Invalid amount provided.";
            case 16:
                return x = "Branch does not exist in Branch Charges.";
            case 17:
                return x = "This transaction is already beyond 3 months. Please call MIS-HELPDESK at 09479991948 for assistance. Thank you!";
            case 18:
                return x = "Failed to Save Customer in Cash Card.";
            case 19:
                return x = "Failed to Update Customer in Cash Card.";
            default:
                return x;
        }
    }

    [WebMethod]
    public string testini()
    {
        String a = Server.MapPath("boskpws.ini");
        IniFile ini = new IniFile(a);
        String aaa = ini.IniReadValue("DBConfig", "SERVER");
        return aaa;
    }

    [WebMethod]
    public String[] testDir()
    {
        DirectoryInfo directoryInfo = new DirectoryInfo(Server.MapPath("app_code/utils"));
        FileInfo[] rgFiles = directoryInfo.GetFiles("*");
        string[] a = new string[rgFiles.Length];

        int x = 0;
        foreach (FileInfo fi in rgFiles)
        {
            a[x] = fi.Name;
            x++;
        }
        return a;
    }

    private Boolean authenticate(String username, String password)
    {
        if (loginuser.Equals(username) && loginpass.Equals(password))
        {
            return true;
        }
        else
        {
            kplog.Error("Invalid credentials");
            return false;
        }
    }

    private void ConnectDomestic()
    {
        try
        {
            //string path = httpcontext.current.server.mappath("boskpws.ini");
            IniFile ini = new IniFile(pathDomestic);


            String partner_Serv = ini.IniReadValue("partner_DBConfig Transaction", "server");
            String partner_DB = ini.IniReadValue("partner_DBConfig Transaction", "database"); ;
            String partner_UID = ini.IniReadValue("partner_DBConfig Transaction", "uid"); ;
            String partner_Password = ini.IniReadValue("partner_DBConfig Transaction", "password"); ;
            String partner_pool = ini.IniReadValue("partner_DBConfig Transaction", "pool");
            Int32 partner_maxcon = Convert.ToInt32(ini.IniReadValue("partner_DBConfig Transaction", "maxcon"));
            Int32 partner_mincon = Convert.ToInt32(ini.IniReadValue("partner_DBConfig Transaction", "mincon"));
            Int32 partner_tout = Convert.ToInt32(ini.IniReadValue("partner_DBConfig Transaction", "tout"));
            dbconPartners = new DBConnect(partner_Serv, partner_DB, partner_UID, partner_Password, partner_pool, partner_maxcon, partner_mincon, partner_tout);

            String Serv = ini.IniReadValue("DBConfig Transaction", "server");
            String DB = ini.IniReadValue("DBConfig Transaction", "database"); ;
            String UID = ini.IniReadValue("DBConfig Transaction", "uid"); ;
            String Password = ini.IniReadValue("DBConfig Transaction", "password"); ;
            String pool = ini.IniReadValue("DBConfig Transaction", "pool");
            Int32 maxcon = Convert.ToInt32(ini.IniReadValue("DBConfig Transaction", "maxcon"));
            Int32 mincon = Convert.ToInt32(ini.IniReadValue("DBConfig Transaction", "mincon"));
            Int32 tout = Convert.ToInt32(ini.IniReadValue("DBConfig Transaction", "tout"));
            dbconDomestic = new DBConnect(Serv, DB, UID, Password, pool, maxcon, mincon, tout);


            String CustServ = ini.IniReadValue("DBConfig Customer", "Server");
            String CustDB = ini.IniReadValue("DBConfig Customer", "Database"); ;
            String CustUID = ini.IniReadValue("DBConfig Customer", "UID"); ;
            String CustPassword = ini.IniReadValue("DBConfig Customer", "Password"); ;
            String Custpool = ini.IniReadValue("DBConfig Customer", "Pool");
            Int32 Custmaxcon = Convert.ToInt32(ini.IniReadValue("DBConfig Customer", "MaxCon"));
            Int32 Custmincon = Convert.ToInt32(ini.IniReadValue("DBConfig Customer", "MinCon"));
            Int32 Custtout = Convert.ToInt32(ini.IniReadValue("DBConfig Customer", "Tout"));
            custconDomestic = new DBConnect(CustServ, CustDB, CustUID, CustPassword, Custpool, Custmaxcon, Custmincon, Custtout);

            //String CustimgServ = ini.IniReadValue("DBConfig Customerimage", "Server");
            //String CustimgDB = ini.IniReadValue("DBConfig Customerimage", "Database"); ;
            //String CustimgUID = ini.IniReadValue("DBConfig Customerimage", "UID"); ;
            //String CustimgPassword = ini.IniReadValue("DBConfig Customerimage", "Password"); ;
            //String Custimgpool = ini.IniReadValue("DBConfig Customerimage", "Pool");
            //Int32 Custimgmaxcon = Convert.ToInt32(ini.IniReadValue("DBConfig Customerimage", "MaxCon"));
            //Int32 Custimgmincon = Convert.ToInt32(ini.IniReadValue("DBConfig Customerimage", "MinCon"));
            //Int32 Custimgtout = Convert.ToInt32(ini.IniReadValue("DBConfig Customerimage", "Tout"));
            //custconImages = new DBConnect(CustimgServ, CustimgDB, CustimgUID, CustimgPassword, Custimgpool, Custimgmaxcon, Custimgmincon, Custimgtout);


            String cmmsServ = ini.IniReadValue("DBConfig CMMS", "server");
            String cmmsDB = ini.IniReadValue("DBConfig CMMS", "database"); ;
            String cmmsUID = ini.IniReadValue("DBConfig CMMS", "uid"); ;
            String cmmsPassword = ini.IniReadValue("DBConfig CMMS", "password"); ;
            String cmmspool = ini.IniReadValue("DBConfig CMMS", "pool");
            Int32 cmmsmaxcon = Convert.ToInt32(ini.IniReadValue("DBConfig CMMS", "maxcon"));
            Int32 cmmsmincon = Convert.ToInt32(ini.IniReadValue("DBConfig CMMS", "mincon"));
            Int32 cmmstout = Convert.ToInt32(ini.IniReadValue("DBConfig CMMS", "tout"));
            CMMSConnectDomestic = new DBConnect(cmmsServ, cmmsDB, cmmsUID, cmmsPassword, cmmspool, cmmsmaxcon, cmmsmincon, cmmstout);

            String togoServ = ini.IniReadValue("DBConfig KptogoClient", "Server");
            String togoDB = ini.IniReadValue("DBConfig KptogoClient", "Database"); ;
            String togoUID = ini.IniReadValue("DBConfig KptogoClient", "UID"); ;
            String togoPassword = ini.IniReadValue("DBConfig KptogoClient", "Password"); ;
            String togopool = ini.IniReadValue("DBConfig KptogoClient", "Pool");
            Int32 togomaxcon = Convert.ToInt32(ini.IniReadValue("DBConfig KptogoClient", "MaxCon"));
            Int32 togomincon = Convert.ToInt32(ini.IniReadValue("DBConfig KptogoClient", "MinCon"));
            Int32 togotout = Convert.ToInt32(ini.IniReadValue("DBConfig KptogoClient", "Tout"));
            custconKPTOGO = new DBConnect(togoServ, togoDB, togoUID, togoPassword, togopool, togomaxcon, togomincon, togotout);

            redemurl = ini.IniReadValue("DBConfig RedeemUrl", "URL");
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }

    private void ConnectWallet()
    {
        try
        {
            IniFile ini = new IniFile(pathWallet);
            String wallet_Serv = ini.IniReadValue("DBConfig mobile", "server");
            String wallet_DB = ini.IniReadValue("DBConfig mobile", "database");
            String wallet_UID = ini.IniReadValue("DBConfig mobile", "uid");
            String wallet_Password = ini.IniReadValue("DBConfig mobile", "password");
            String wallet_pool = ini.IniReadValue("DBConfig mobile", "pool");
            Int32 wallet_maxcon = Convert.ToInt32(ini.IniReadValue("DBConfig mobile", "maxcon"));
            Int32 wallet_mincon = Convert.ToInt32(ini.IniReadValue("DBConfig mobile", "mincon"));
            Int32 wallet_tout = Convert.ToInt32(ini.IniReadValue("DBConfig mobile", "tout"));
            dbconWallet = new DBConnect(wallet_Serv, wallet_DB, wallet_UID, wallet_Password, wallet_pool, wallet_maxcon, wallet_mincon, wallet_tout);

            IniFile iniCcard = new IniFile(pathccard);
            String ccard_Serv = iniCcard.IniReadValue("DBConfig kpcashcard", "Server");
            String ccard_DB = iniCcard.IniReadValue("DBConfig kpcashcard", "Database");
            String ccard_UID = iniCcard.IniReadValue("DBConfig kpcashcard", "UID");
            String ccard_Password = iniCcard.IniReadValue("DBConfig kpcashcard", "Password");
            String ccard_pool = iniCcard.IniReadValue("DBConfig kpcashcard", "Pool");
            Int32 ccard_maxcon = Convert.ToInt32(iniCcard.IniReadValue("DBConfig kpcashcard", "MaxCon"));
            Int32 ccard_mincon = Convert.ToInt32(iniCcard.IniReadValue("DBConfig kpcashcard", "MinCon"));
            Int32 ccard_tout = Convert.ToInt32(iniCcard.IniReadValue("DBConfig kpcashcard", "Tout"));
            dbconCCard = new DBConnect(ccard_Serv, ccard_DB, ccard_UID, ccard_Password, ccard_pool, ccard_maxcon, ccard_mincon, ccard_tout);
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }
    private void connectkiosk()
    {
        try
        {
            IniFile ini = new IniFile(pathkiosk);

            String kiosk_Serv = ini.IniReadValue("kiosk_config", "Server");
            String kiosk_DB = ini.IniReadValue("kiosk_config", "Database"); ;
            String kiosk_UID = ini.IniReadValue("kiosk_config", "UID"); ;
            String kiosk_Password = ini.IniReadValue("kiosk_config", "Password"); ;
            String kiosk_pool = ini.IniReadValue("kiosk_config", "Pool");
            Int32 kiosk_maxcon = Convert.ToInt32(ini.IniReadValue("kiosk_config", "MaxCon"));
            Int32 kiosk_mincon = Convert.ToInt32(ini.IniReadValue("kiosk_config", "MinCon"));
            Int32 kiosk_tout = Convert.ToInt32(ini.IniReadValue("kiosk_config", "Tout"));
            dbconkiosk = new DBConnect(kiosk_Serv, kiosk_DB, kiosk_UID, kiosk_Password, kiosk_pool, kiosk_maxcon, kiosk_mincon, kiosk_tout);

            String kioskglobal_Serv = ini.IniReadValue("kiosk_Global", "Server");
            String kioskglobal_DB = ini.IniReadValue("kiosk_Global", "Database"); ;
            String kioskglobal_UID = ini.IniReadValue("kiosk_Global", "UID"); ;
            String kioskglobal_Password = ini.IniReadValue("kiosk_Global", "Password"); ;
            String kioskglobal_pool = ini.IniReadValue("kiosk_Global", "Pool");
            Int32 kioskglobal_maxcon = Convert.ToInt32(ini.IniReadValue("kiosk_Global", "MaxCon"));
            Int32 kioskglobal_mincon = Convert.ToInt32(ini.IniReadValue("kiosk_Global", "MinCon"));
            Int32 kioskglobal_tout = Convert.ToInt32(ini.IniReadValue("kiosk_Global", "Tout"));
            dbconGlobalkiosk = new DBConnect(kioskglobal_Serv, kioskglobal_DB, kioskglobal_UID, kioskglobal_Password, kioskglobal_pool, kioskglobal_maxcon, kioskglobal_mincon, kioskglobal_tout);
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }

    private Boolean verifyCustomer(String fname, String lname, String mname, String bdate)
    {
        try
        {
            using (MySqlConnection custconn = custconGlobal.getConnection())
            {
                try
                {

                    custconn.Open();
                    using (MySqlCommand custcommand = custconn.CreateCommand())
                    {
                        custcommand.CommandText = "Select FirstName from kpcustomersglobal.customers where FirstName = @fname and LastName = @lname and MiddleName = @mname and BirthDate = @bdate LIMIT 1";
                        custcommand.Parameters.AddWithValue("fname", fname);
                        custcommand.Parameters.AddWithValue("lname", lname);
                        custcommand.Parameters.AddWithValue("mname", mname);
                        custcommand.Parameters.AddWithValue("bdate", bdate);

                        using (MySqlDataReader Reader = custcommand.ExecuteReader())
                        {
                            Reader.Read();
                            if (Reader.HasRows)
                            {
                                Reader.Close();
                                custconn.Close();
                                //throw new Exception("asdf");
                                return true;
                            }
                            else
                            {

                                Reader.Close();
                                custconn.Close();
                                return false;
                            }
                        }
                    }
                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(ex.ToString());
                    custconn.Close();
                    return false;
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return false;
        }

    }

    private Boolean compareVersions(Double versionHO, Double versionDev)
    {
        //throw new Exception(versionHO.ToString() + " " + versionDev.ToString());
        if (versionHO == versionDev)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private Double getVersion(String stationcode)
    {
        using (MySqlConnection conn = CMMSConnectGlobal.getConnection())
        {
            try
            {
                conn.Open();
                using (MySqlCommand command = conn.CreateCommand())
                {
                    String getVersion = "SELECT version FROM kpusersglobal.mlbranchesstations where StationCode = @stationcode LIMIT 1";
                    command.CommandText = getVersion;
                    command.Parameters.AddWithValue("stationcode", stationcode);
                    using (MySqlDataReader ReaderVersion = command.ExecuteReader())
                    {
                        ReaderVersion.Read();
                        Double version = Convert.ToDouble(ReaderVersion["version"]);
                        ReaderVersion.Close();
                        conn.Close();

                        return version;
                    }
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString());
                conn.Close();
                return 0.0;
            }
        }
    }

    private String decodeKPTNDomestic(int type, String kptn)
    {
        try
        {
            if (type == 0)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(3, 2));
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                else if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                else
                {
                    return "kpdomestic.sendout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(3, 2);
                }

            }
            else if (type == 1)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(3, 2));
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                else if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                else
                {
                    return "kpdomestic.payout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(3, 2);
                }
            }
            else
            {
                throw new Exception("invalid type");
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return "4";
            //throw new Exception("4");
        }
    }

    private String decodeKPTNDomesticKiosk(int type, String kptn)
    {
        try
        {
            if (type == 0)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(6, 2));
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                else if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                else
                {
                    return dbconkiosk.getDB() + ".sendout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(6, 2);
                }

            }
            else if (type == 1)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(6, 2));
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                else if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                else
                {
                    return dbconkiosk.getDB() + ".payout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(6, 2);
                }
            }
            else
            {
                throw new Exception("invalid type");
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return "4";
            //throw new Exception("4");
        }
    }
    
    private String decodeKPTNGlobalKIOSK(int type, String kptn)
    {
        try
        {
            if (type == 0)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(6, 2));
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                else if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                else
                {
                    return "kpkioskglobal.sendout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(6, 2);
                }

            }
            else if (type == 1)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(6, 2));
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                else if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                else
                {
                    return "kpkioskglobal.payout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(6, 2);
                }
            }
            else
            {
                throw new Exception("invalid type");
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return "4";
            //throw new Exception("4");
        }
    }

    private String decodeKPTNWallet(int type, String kptn)
    {
        try
        {
            if (type == 0)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(3, 2));
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                else if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                else
                {
                    return "kpmobiletransactions.sendout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(3, 2);
                }

            }
            else if (type == 1)
            {
                int x = Convert.ToInt32(kptn.Substring(kptn.Length - 2, 2));
                int y = Convert.ToInt32(kptn.Substring(3, 2));
                if (x > 12 || x < 0 || x == 0)
                {
                    return "4";
                    //throw new Exception("4");
                }
                else if (y > 31 || y < 0 || y == 0)
                {
                    return "4";
                    // throw new Exception("4");
                }
                else
                {
                    return "kpmobiletransactions.payout" + kptn.Substring(kptn.Length - 2, 2) + kptn.Substring(3, 2);
                }
            }
            else
            {
                throw new Exception("invalid type");
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            return "4";
            //throw new Exception("4");
        }
    }

    [WebMethod(Description = "Check customer in watchlist table.")]
    public SeccomResponse verifyCustomer(String Username, String Password)
    {
        if (!authenticate(Username, Password))
        {
            return new SeccomResponse { respcode = 7, message = getRespMessage(7) };
        }
        return null;
    }


    //public Boolean verifyMLCardNo(String mlcard)
    //{
    //    try
    //    {
    //        using (MySqlConnection custconn = custcon.getConnection())
    //        {
    //            try
    //            {
    //                custconn.Open();
    //                using (custcommand = custconn.CreateCommand())
    //                {
    //                    if (mlcard.Equals(string.Empty)) {
    //                        return true;
    //                    }else{
    //                        command.CommandText = "Select mlcard from kpcustomer.";
    //                    }
    //                }
    //            }
    //            catch (MySqlException ex)
    //            {
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {

    //    }


    //}

    [WebMethod]
    public int newGenerationOFKPTM(String branchcode, String zonecode)
    {
        Random rand = new Random();
        return rand.Next(10, 99);
        //dt = getServerDate(false);

        //String guid = Guid.NewGuid().GetHashCode().ToString();
        //Random rand = new Random();
        //int shorthash = guid.GetHashCode() % 100000000; // 8 zeros
        //if (shorthash < 0) shorthash *= -1;
        //return shorthash;
        //return branchcode + dt.ToString("dd") + zonecode + rand.Next(10, 99).ToString() + "" + shorthash.ToString() + dt.ToString("MM");;


    }


    private Boolean isSameYear2(DateTime date)
    {
        try
        {
            //throw new Exception(date.Year.ToString());
            if (GetYesterday2(date).Year.Equals(date.Year))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }

    }




    private DateTime GetYesterday2(DateTime date)
    {
        return date.AddDays(-1);
    }


    [WebMethod]
    public Boolean testISyear()
    {
        dt = getServerDateGlobal(false);
        return isSameYear2(dt);
    }

    [WebMethod]
    public PeepLog saveLog(String Username, String Password, String kptnno, String action, Boolean isremote, String stationcode, String stationno, int zonecode, String branchcode, String branchname, String operatorid, Double version, String cancelledreason, String remotereason, String remotebranchcode, String remoteoperator, String oldkptnno)
    {
        try
        {
            if (!authenticate(Username, Password))
            {
                return new PeepLog { respcode = 7, message = getRespMessage(7) };
            }
            //if (!compareVersions(getVersion(stationcode), version))
            //{
            //    return new PeepLog { respcode = 10, message = getRespMessage(10) };
            //}
            using (MySqlConnection conn = dbconDomestic.getConnection())
            {
                using (command = conn.CreateCommand())
                {
                    conn.Open();
                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);

                    command.Transaction = trans;
                    command = new MySqlCommand("kpadminlogs.savelog53", conn);
                    command.CommandType = CommandType.StoredProcedure;

                    command.Parameters.AddWithValue("kptnno", kptnno);
                    command.Parameters.AddWithValue("action", action);
                    command.Parameters.AddWithValue("isremote", isremote);
                    command.Parameters.AddWithValue("txndate", DBNull.Value);
                    command.Parameters.AddWithValue("stationcode", stationcode);
                    command.Parameters.AddWithValue("stationno", stationno);
                    command.Parameters.AddWithValue("zonecode", zonecode);
                    command.Parameters.AddWithValue("branchcode", branchcode);
                    command.Parameters.AddWithValue("branchname", branchname);
                    command.Parameters.AddWithValue("operatorid", operatorid);
                    command.Parameters.AddWithValue("cancelledreason", cancelledreason);
                    command.Parameters.AddWithValue("remotereason", remotereason);
                    command.Parameters.AddWithValue("remotebranch", remotebranchcode);
                    command.Parameters.AddWithValue("remoteoperator", remoteoperator);
                    command.Parameters.AddWithValue("remotezonecode", DBNull.Value);
                    command.Parameters.AddWithValue("oldkptnno", DBNull.Value);

                    command.Parameters.AddWithValue("type", "N");

                    try
                    {
                        command.ExecuteNonQuery();
                        trans.Commit();
                        conn.Close();
                        kplog.Info(kptnno + " - Successfully Saved");
                        return new PeepLog { respcode = 1, message = getRespMessage(1) };
                    }
                    catch (MySqlException ex)
                    {
                        kplog.Fatal(kptnno + " - " + ex.ToString());
                        trans.Rollback();
                        conn.Close();
                        return new PeepLog { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
                    }
                }
            }
        }
        catch (MySqlException ex)
        {
            kplog.Fatal(kptnno + " - " + ex.ToString());
            dbconDomestic.CloseConnection();
            return new PeepLog { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }
        catch (Exception ex)
        {
            kplog.Fatal(kptnno + " - " + ex.ToString());
            dbconDomestic.CloseConnection();
            return new PeepLog { respcode = 0, message = getRespMessage(0), ErrorDetail = ex.ToString() };
        }
    }


    private String validateGeneratedKPTN(String bcode, String zonecode, String initiator)
    {

        try
        {
            String kptn = String.Empty;
            kptn = generateKPTN(bcode, zonecode, initiator);
            while (kptn.Length < 18 || kptn.Length > 18)
            {
                kptn = generateKPTN(bcode, zonecode, String.Empty);

            }
            return kptn;

        }
        catch (Exception ex)
        {
            kplog.Fatal(ex.ToString());
            throw new Exception(ex.ToString());
        }
    }

    private Boolean verifyValidity(DateTime now, DateTime end)
    {
        // 0 = equals, -1 = greater , 1 = less than
        int x = now.CompareTo(end);
        if (x >= 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
    // [WebMethod]
    private bool istablevalid(string decodeddata)
    {
        string getdata = decodeddata.Substring(decodeddata.Length - 4, 4);
        string month = getdata.Substring(0, 2);
        Int32 date = Convert.ToInt32(getdata.Substring(2, 2));

        switch (month)
        {
            case "01":
                if (date > 31)
                    return false;
                else
                    return true;
                break;
            case "02":
                if (date > 29)
                    return false;
                else
                    return true;
                break;
            case "03":
                if (date > 31)
                    return false;
                else
                    return true;
                break;
            case "04":
                if (date > 30)
                    return false;
                else
                    return true;
                break;
            case "05":
                if (date > 31)
                    return false;
                else
                    return true;
                break;
            case "06":
                if (date > 30)
                    return false;
                else
                    return true;
                break;
            case "07":
                if (date > 31)
                    return false;
                else
                    return true;
                break;
            case "08":
                if (date > 31)
                    return false;
                else
                    return true;
                break;
            case "09":
                if (date > 30)
                    return false;
                else
                    return true;
                break;
            case "10":
                if (date > 31)
                    return false;
                else
                    return true;
                break;
            case "11":
                if (date > 30)
                    return false;
                else
                    return true;
                break;
            case "12":
                if (date > 31)
                    return false;
                else
                    return true;
                break;
            default:
                return false;
                break;

        }
    }

    private String getseries(String bcode, Int32 zcode)
    {
        Int64 series = 1;
        try
        {
            using (MySqlConnection conn = custconKPTOGO.getConnection())
            {
                using (command = conn.CreateCommand())
                {
                    conn.Open();
                    command.Transaction = trans;
                    try
                    {
                        command.CommandText = "select series from controlseries where branchcode=@bcode and zonecode=@zcode and type=1";
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("@bcode", bcode);
                        command.Parameters.AddWithValue("@zcode", zcode);
                        MySqlDataReader reader = command.ExecuteReader();
                        if (reader.Read())
                        {
                            series = Convert.ToInt64(reader["series"]);
                            reader.Close();
                            return (Convert.ToString(series));
                        }

                        reader.Close();
                        command.CommandText = "insert into controlseries(`branchcode`,`zonecode`,`series`,`type`) values(@bcode,@zcode,1,1)";
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("@bcode", bcode);
                        command.Parameters.AddWithValue("@zcode", zcode);
                        command.ExecuteNonQuery();
                        return (Convert.ToString(series));
                        //return "PO" + mt + "-" + zcode.ToString() + "-" + bcode + "-" + dt + "-" + series.ToString().PadLeft(6, '0');
                    }
                    catch (MySqlException ex)
                    {
                        kplog.Fatal(ex.ToString());
                        conn.Close();
                        custconKPTOGO.CloseConnection();
                        return ex.ToString();
                    }
                }
            }
        }
        catch (MySqlException mex)
        {
            kplog.Fatal(mex.ToString());
            custconKPTOGO.CloseConnection();
            return mex.ToString();
        }
    }

    [WebMethod(BufferResponse = false)]
    public PayoutResponse payoutKptogo(String Username, String Password, String KPTNNo, String cardno, Decimal denomination, String currency, String recipientfname, String recipientlname, String recipientmname, String payoutdate, String sendermobileno, String brachcode, Int32 zonecode, String operatorid, String stationno, int iscancelled, String oldcontrolno)
    {
        try
        {
            if (!authenticate(Username, Password))
            {
                return new PayoutResponse { respcode = 7, message = getRespMessage(7) };
            }

            //if (decodeKPTNDomestic(0, KPTNNo) == "4" || (!istablevalid(decodeKPTNDomestic(0, KPTNNo))))
            //{
            //    return new PayoutResponse { respcode = 0, message = "Invalid KPTN number" };
            //}
            String date = Convert.ToString(getServerDateDomestic(false));
            String dte = date.Substring(8, 2);
            String month = date.Substring(6, 2);
            using (MySqlConnection conn = custconKPTOGO.getConnection())
            {
                try
                {
                    Int64 series = Convert.ToInt64(getseries(brachcode, zonecode));
                    String controlno = "PO" + month + "-" + zonecode.ToString() + "-" + brachcode + "-" + dte + "-" + series.ToString().PadLeft(6, '0');
                    conn.Open();
                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (command = conn.CreateCommand())
                    {

                        command.CommandText = "SET autocommit = 0;";
                        command.ExecuteNonQuery();

                        command.Transaction = trans;
                        String insert = "Insert into kptogopayouts(controlno, kptn, cardno, denomination, currency, recipientfname, recipientlname, recipientmname, payoutdate, sendermobileno, branchcode, zonecode, operatorid, stationno, iscancelled, oldcontrolno) values (@controlno, @kptn, @cardno, @denomination, @currency, @recipientfname, @recipientlname, @recipientmname, @payoutdate, @sendermobileno, @branchcode, @zonecode, @operatorid, @stationno, @iscancelled, @oldcontrolno)";
                        command.CommandText = insert;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("controlno", controlno);
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.Parameters.AddWithValue("cardno", cardno);
                        command.Parameters.AddWithValue("denomination", denomination);
                        command.Parameters.AddWithValue("currency", currency);
                        command.Parameters.AddWithValue("recipientfname", recipientfname);
                        command.Parameters.AddWithValue("recipientlname", recipientlname);
                        command.Parameters.AddWithValue("recipientmname", recipientmname);
                        command.Parameters.AddWithValue("payoutdate", payoutdate);
                        command.Parameters.AddWithValue("sendermobileno", sendermobileno);
                        command.Parameters.AddWithValue("branchcode", brachcode);
                        command.Parameters.AddWithValue("zonecode", zonecode);
                        command.Parameters.AddWithValue("operatorid", operatorid);
                        command.Parameters.AddWithValue("stationno", stationno);
                        command.Parameters.AddWithValue("iscancelled", iscancelled);
                        command.Parameters.AddWithValue("oldcontrolno", oldcontrolno);
                        int x = command.ExecuteNonQuery();

                        if (x > 0)
                        {
                            command.CommandText = "update kptogoadmin.controlseries set series = @series where branchcode = @bcode and zonecode = @zcode and type = '1'";
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("bcode", brachcode);
                            command.Parameters.AddWithValue("series", series + 1);
                            command.Parameters.AddWithValue("zcode", zonecode);
                            command.ExecuteNonQuery();
                        }


                        command.Transaction = trans;

                        command.CommandText = "kpadminlogs.savelog53";
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("kptnno", KPTNNo);
                        command.Parameters.AddWithValue("action", "PAYOUT");
                        command.Parameters.AddWithValue("isremote", "0");
                        command.Parameters.AddWithValue("txndate", date);
                        command.Parameters.AddWithValue("stationcode", "");
                        command.Parameters.AddWithValue("stationno", stationno);
                        command.Parameters.AddWithValue("zonecode", zonecode);
                        command.Parameters.AddWithValue("branchcode", brachcode);
                        command.Parameters.AddWithValue("branchname", "");
                        command.Parameters.AddWithValue("operatorid", operatorid);
                        command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                        command.Parameters.AddWithValue("remotereason", "");
                        command.Parameters.AddWithValue("remotebranch", "");
                        command.Parameters.AddWithValue("remoteoperator", "");
                        command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                        command.Parameters.AddWithValue("remotezonecode", "0");
                        command.Parameters.AddWithValue("type", "N");
                        command.ExecuteNonQuery();

                        trans.Commit();
                        conn.Close();
                        kplog.Info(KPTNNo + " - Successfully Saved");
                        return new PayoutResponse { respcode = 1, message = getRespMessage(1), DateClaimed = dt };
                    }
                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(KPTNNo + " - " + ex.ToString());
                    Int32 respcode = 0;
                    //String message;
                    //throw new Exception(ex.ErrorCode.ToString());
                    if (ex.Number == 1062)
                    {
                        respcode = 3;
                        kplog.Error(KPTNNo + " - " + getRespMessage(3));
                    }
                    //if (ex.Message.Contains("Duplicate"))
                    //{
                    //    respcode = 3;
                    //}
                    trans.Rollback();
                    custconKPTOGO.CloseConnection();
                    return new PayoutResponse { respcode = respcode, message = getRespMessage(respcode) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
                }
            }
        }
        catch (Exception ex)
        {
            //trans.Rollback();
            kplog.Fatal(KPTNNo + " - " + ex.ToString());
            custconKPTOGO.CloseConnection();
            return new PayoutResponse { respcode = 0, message = getRespMessage(0) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
        }


    }


    [WebMethod(BufferResponse = false, Description = "Method for searching Global Transactions")]
    public SearchResponse kptnSearchGlobalforpayoutKIOSK(String Username, String Password, String kptn, String kptn6, Decimal amount, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new SearchResponse { respcode = 7, message = getRespMessage(7) };
        }

        if (decodeKPTNGlobalKIOSK(0, kptn6) == "4" || (!istablevalid(decodeKPTNGlobalKIOSK(0, kptn6))))
        {
            return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
        }

        using (MySqlConnection conn = dbconGlobalkiosk.getConnection())
        {
            try
            {
                conn.Open();

                using (command = conn.CreateCommand())
                {
                    List<object> a = new List<object>();

                    SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();

                    String query = "SELECT Purpose, ZoneCode, BranchCode, IsClaimed, IsCancelled , RemoteBranch, RemoteOperatorID,IsRemote, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, ORNo, Charge, RemoteZoneCode, vat, preferredcurrency, exchangerate, amountpo,paymenttype,bankname,cardcheckno,cardcheckexpdate,transtype FROM " + decodeKPTNGlobalKIOSK(0, kptn6) + " WHERE KPTNNo = @kptn6;";

                    command.CommandText = query;
                    command.Parameters.AddWithValue("kptn6", kptn6);
                    using (MySqlDataReader dataReader = command.ExecuteReader())
                    {
                        if (dataReader.HasRows)
                        {
                            dataReader.Read();

                            string sFName = dataReader["SenderFname"].ToString();
                            string sLName = dataReader["SenderLname"].ToString();
                            string sMName = dataReader["SenderMName"].ToString();
                            string sSt = dataReader["SenderStreet"].ToString();
                            string sPCity = dataReader["SenderProvinceCity"].ToString();
                            string sCtry = dataReader["SenderCountry"].ToString();
                            string sG = dataReader["SenderGender"].ToString();
                            string sCNo = dataReader["SenderContactNo"].ToString();
                            Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                            string sBID = dataReader["SenderBranchID"].ToString();
                            string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                            string SenderName = dataReader["SenderName"].ToString();

                            string rFName = dataReader["ReceiverFname"].ToString();
                            string rLName = dataReader["ReceiverLname"].ToString();
                            string rMName = dataReader["ReceiverMName"].ToString();
                            string rSt = dataReader["ReceiverStreet"].ToString();
                            string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                            string rCtry = dataReader["ReceiverCountry"].ToString();
                            string rG = dataReader["ReceiverGender"].ToString();
                            string rCNo = dataReader["ReceiverContactNo"].ToString();
                            string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                            string ReceiverName = dataReader["ReceiverName"].ToString();

                            string SendoutControlNo = dataReader["ControlNo"].ToString();
                            string KPTNNo = dataReader["KPTNNo"].ToString();
                            string OperatorID = dataReader["OperatorID"].ToString();
                            Boolean IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                            string TransPassword = dataReader["TransPassword"].ToString();
                            DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"]);
                            string Currency = dataReader["Currency"].ToString();
                            Decimal Principal = (Decimal)dataReader["Principal"];
                            Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string Relation = dataReader["Relation"].ToString();
                            string Message = dataReader["Message"].ToString();
                            string StationID = dataReader["StationID"].ToString();
                            string SourceOfFund = dataReader["Source"].ToString();
                            string IDType = dataReader["IDType"].ToString();
                            string IDNo = dataReader["IDNo"].ToString();
                            string ExpiryDate = dataReader["ExpiryDate"].ToString();
                            string ORNo = dataReader["ORNo"].ToString();
                            string RemoteBranch = dataReader["RemoteBranch"].ToString();
                            string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                            Boolean isSameAmount = false;
                            Boolean IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                            Boolean x = Convert.ToBoolean(dataReader["IsCancelled"]);
                            Boolean IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                            string bcode = dataReader["BranchCode"].ToString();
                            Decimal Charge = Convert.ToDecimal(dataReader["Charge"]);
                            Int32 zcode = Convert.ToInt32(dataReader["ZoneCode"]);
                            string purpose = dataReader["Purpose"].ToString();
                            Int32? remoteZone = dataReader["RemoteZoneCode"] == DBNull.Value ? 0 : Convert.ToInt32(dataReader["RemoteZoneCode"]);
                            double? vat = dataReader["vat"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["vat"]);
                            string precurrency = dataReader["preferredcurrency"].ToString();
                            double? xchangerate = dataReader["exchangerate"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["exchangerate"]);
                            double? amtpo = dataReader["amountpo"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["amountpo"]);
                            String paymenttype = dataReader["paymenttype"].ToString();
                            String bankname = dataReader["bankname"].ToString();
                            String cardcheckno = dataReader["cardcheckno"].ToString();
                            String cardexpdate = (dataReader["cardcheckexpdate"].ToString() == String.Empty || dataReader["cardcheckexpdate"].ToString().StartsWith("0")) ? null : DateTime.Parse(dataReader["cardcheckexpdate"].ToString()).ToString("yyyy-MM-dd");
                            String transtype = dataReader["transtype"].ToString();

                            if (Principal == amount)
                            {
                                isSameAmount = true;
                            }


                            if (x)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(8));
                                dataReader.Close();
                                conn.Close();
                                dbconGlobalkiosk.CloseConnection();
                                return new SearchResponse { respcode = 8, message = getRespMessage(8), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            if (IsClaimed)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(3));
                                dataReader.Close();
                                conn.Close();
                                dbconGlobalkiosk.CloseConnection();
                                return new SearchResponse { respcode = 3, message = getRespMessage(3), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            dataReader.Close();
                            Decimal DormantCharge = 0.0M;
                            conn.Close();
                            SenderInfo si = new SenderInfo
                            {
                                FirstName = sFName,
                                LastName = sLName,
                                MiddleName = sMName,
                                SenderName = SenderName,
                                Street = sSt,
                                ProvinceCity = sPCity,
                                Country = sCtry,
                                Gender = sG,
                                ContactNo = sCNo,
                                IsSMS = sIsSM,
                                BranchID = sBID,
                                SenderMLCardNo = sMLCardNo,
                                Birthdate = sBdate
                            };

                            ReceiverInfo ri = new ReceiverInfo
                            {
                                FirstName = rFName,
                                LastName = rLName,
                                MiddleName = rMName,
                                ReceiverName = ReceiverName,
                                Street = rSt,
                                ProvinceCity = rPCity,
                                Country = rCtry,
                                Gender = rG,
                                ContactNo = rCNo,
                                BirthDate = rBdate,
                            };

                            SendoutInfo soi = new SendoutInfo
                            {
                                SendoutControlNo = SendoutControlNo,
                                KPTNNo = KPTNNo,
                                OperatorID = OperatorID,
                                IsPassword = IsPassword,
                                TransPassword = TransPassword,
                                syscreated = syscreated,
                                Currency = Currency,
                                Principal = Principal,
                                SenderIsSMS = SenderIsSMS,
                                Relation = Relation,
                                Message = Message,
                                StationID = StationID,
                                SourceOfFund = SourceOfFund,
                                IDNo = IDNo,
                                IDType = IDType,
                                ExpiryDate = ExpiryDate,
                                DormantCharge = DormantCharge,
                                ORNo = ORNo,
                                isSameAmount = isSameAmount,
                                IsRemote = IsRemote,
                                RemoteBranch = RemoteBranch,
                                RemoteOperatorID = RemoteOperatorID,
                                BranchCode = bcode,
                                Charge = Charge,
                                ZoneCode = zcode,
                                Purpose = purpose,
                                RemoteZone = remoteZone,
                                vat = vat,
                                preferredcurrency = precurrency,
                                exchangerate = xchangerate,
                                amountpo = amtpo,
                                paytype = paymenttype,
                                bankname = bankname,
                                cardcheck = cardcheckno,
                                cardexp = cardexpdate,
                                trnstype = transtype
                            };

                            return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                        }
                        else
                        {
                            kplog.Error(getRespMessage(4));
                            dataReader.Close();
                            conn.Close();
                            dbconGlobalkiosk.CloseConnection();
                            return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(ex.ToString(), ex);
                conn.Close();
                dbconGlobalkiosk.CloseConnection();
                if (ex.Message.Equals("4"))
                {
                    kplog.Error(getRespMessage(4));
                    return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
                return new SearchResponse { respcode = 0, message = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
            }
        }
    }

    [WebMethod(BufferResponse = false, Description = "Method for searching Global Transactions")]
    public SearchResponse kptnSearchGlobalKIOSK(String Username, String Password, String kptn6, Decimal amount, Double version, String stationcode)
    {
        if (!authenticate(Username, Password))
        {
            return new SearchResponse { respcode = 7, message = getRespMessage(7) };
        }

        if (decodeKPTNGlobalKIOSK(0, kptn6) == "4" || (!istablevalid(decodeKPTNGlobalKIOSK(0, kptn6))))
        {
            kplog.Error(kptn6 + " - Invalid KPTN number");
            return new SearchResponse { respcode = 0, message = "Invalid KPTN number" };
        }

        using (MySqlConnection conn = dbconGlobalkiosk.getConnection())
        {
            try
            {
                conn.Open();

                using (command = conn.CreateCommand())
                {
                    List<object> a = new List<object>();

                    SerializableDictionary<String, Object> sd = new SerializableDictionary<string, object>();

                    String query = "SELECT Purpose, ZoneCode, BranchCode, IsClaimed, IsCancelled , RemoteBranch, RemoteOperatorID,IsRemote, SenderFName, SenderLName, SenderMName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS,SenderBirthdate, SenderBranchID, SenderMLCardNo, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, ControlNo, KPTNNo, OperatorID, IsPassword, TransPassword, TransDate, Currency, Principal, Relation, Message, StationID, Source, IDType, IDNo, ExpiryDate, SenderName, ReceiverName, TransDate, ORNo, Charge, RemoteZoneCode, vat, preferredcurrency, exchangerate, amountpo,paymenttype,bankname,cardcheckno,cardcheckexpdate,transtype FROM " + decodeKPTNGlobalKIOSK(0, kptn6) + " WHERE KPTNNo = @kptn6 AND zonecode!=3;";

                    command.CommandText = query;
                    command.Parameters.AddWithValue("kptn6", kptn6);
                    using (MySqlDataReader dataReader = command.ExecuteReader())
                    {
                        if (dataReader.HasRows)
                        {
                            dataReader.Read();

                            string sFName = dataReader["SenderFname"].ToString();
                            string sLName = dataReader["SenderLname"].ToString();
                            string sMName = dataReader["SenderMName"].ToString();
                            string sSt = dataReader["SenderStreet"].ToString();
                            string sPCity = dataReader["SenderProvinceCity"].ToString();
                            string sCtry = dataReader["SenderCountry"].ToString();
                            string sG = dataReader["SenderGender"].ToString();
                            string sCNo = dataReader["SenderContactNo"].ToString();
                            Int32 sIsSM = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string sBdate = (dataReader["SenderBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["SenderBirthdate"].ToString();
                            string sBID = dataReader["SenderBranchID"].ToString();
                            string sMLCardNo = dataReader["SenderMLCardNo"].ToString();
                            string SenderName = dataReader["SenderName"].ToString();

                            string rFName = dataReader["ReceiverFname"].ToString();
                            string rLName = dataReader["ReceiverLname"].ToString();
                            string rMName = dataReader["ReceiverMName"].ToString();
                            string rSt = dataReader["ReceiverStreet"].ToString();
                            string rPCity = dataReader["ReceiverProvinceCity"].ToString();
                            string rCtry = dataReader["ReceiverCountry"].ToString();
                            string rG = dataReader["ReceiverGender"].ToString();
                            string rCNo = dataReader["ReceiverContactNo"].ToString();
                            string rBdate = (dataReader["ReceiverBirthdate"].ToString().Equals("0/0/0000")) ? String.Empty : dataReader["ReceiverBirthdate"].ToString();

                            string ReceiverName = dataReader["ReceiverName"].ToString();

                            string SendoutControlNo = dataReader["ControlNo"].ToString();
                            string KPTNNo = dataReader["KPTNNo"].ToString();
                            string OperatorID = dataReader["OperatorID"].ToString();
                            Boolean IsPassword = Convert.ToBoolean(dataReader["IsPassword"]);
                            string TransPassword = dataReader["TransPassword"].ToString();
                            DateTime syscreated = Convert.ToDateTime(dataReader["TransDate"]);
                            string Currency = dataReader["Currency"].ToString();
                            Decimal Principal = (Decimal)dataReader["Principal"];
                            Int32 SenderIsSMS = Convert.ToInt32(dataReader["SenderIsSMS"]);
                            string Relation = dataReader["Relation"].ToString();
                            string Message = dataReader["Message"].ToString();
                            string StationID = dataReader["StationID"].ToString();
                            string SourceOfFund = dataReader["Source"].ToString();
                            string IDType = dataReader["IDType"].ToString();
                            string IDNo = dataReader["IDNo"].ToString();
                            string ExpiryDate = dataReader["ExpiryDate"].ToString();
                            string ORNo = dataReader["ORNo"].ToString();
                            string RemoteBranch = dataReader["RemoteBranch"].ToString();
                            string RemoteOperatorID = dataReader["RemoteOperatorID"].ToString();
                            Boolean isSameAmount = false;
                            Boolean IsRemote = Convert.ToBoolean(dataReader["IsRemote"]);
                            Boolean x = Convert.ToBoolean(dataReader["IsCancelled"]);
                            Boolean IsClaimed = Convert.ToBoolean(dataReader["IsClaimed"]);
                            string bcode = dataReader["BranchCode"].ToString();
                            Decimal Charge = Convert.ToDecimal(dataReader["Charge"]);
                            Int32 zcode = Convert.ToInt32(dataReader["ZoneCode"]);
                            string purpose = dataReader["Purpose"].ToString();
                            Int32? remoteZone = dataReader["RemoteZoneCode"] == DBNull.Value ? 0 : Convert.ToInt32(dataReader["RemoteZoneCode"]);
                            double? vat = dataReader["vat"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["vat"]);
                            string precurrency = dataReader["preferredcurrency"].ToString();
                            double? xchangerate = dataReader["exchangerate"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["exchangerate"]);
                            double? amtpo = dataReader["amountpo"] == DBNull.Value ? 0.0 : Convert.ToDouble(dataReader["amountpo"]);
                            String paymenttype = dataReader["paymenttype"].ToString();
                            String bankname = dataReader["bankname"].ToString();
                            String cardcheckno = dataReader["cardcheckno"].ToString();
                            String cardexpdate = (dataReader["cardcheckexpdate"].ToString() == String.Empty || dataReader["cardcheckexpdate"].ToString().StartsWith("0")) ? null : DateTime.Parse(dataReader["cardcheckexpdate"].ToString()).ToString("yyyy-MM-dd");
                            String transtype = dataReader["transtype"].ToString();

                            if (Principal == amount)
                            {
                                isSameAmount = true;
                            }
                            if (x)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(8));
                                dataReader.Close();
                                conn.Close();
                                dbconGlobalkiosk.CloseConnection();
                                return new SearchResponse { respcode = 8, message = getRespMessage(8), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            if (IsClaimed)
                            {
                                kplog.Error(kptn6 + " - " + getRespMessage(3));
                                dataReader.Close();
                                conn.Close();
                                dbconGlobalkiosk.CloseConnection();
                                return new SearchResponse { respcode = 3, message = getRespMessage(3), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                            }
                            dataReader.Close();
                            Decimal DormantCharge = 0.0M;
                            conn.Close();
                            SenderInfo si = new SenderInfo
                            {
                                FirstName = sFName,
                                LastName = sLName,
                                MiddleName = sMName,
                                SenderName = SenderName,
                                Street = sSt,
                                ProvinceCity = sPCity,
                                Country = sCtry,
                                Gender = sG,
                                ContactNo = sCNo,
                                IsSMS = sIsSM,
                                BranchID = sBID,
                                //CustID = sCustID,
                                SenderMLCardNo = sMLCardNo,
                                Birthdate = sBdate
                            };
                            ReceiverInfo ri = new ReceiverInfo
                            {
                                FirstName = rFName,
                                LastName = rLName,
                                MiddleName = rMName,
                                ReceiverName = ReceiverName,
                                Street = rSt,
                                ProvinceCity = rPCity,
                                Country = rCtry,
                                Gender = rG,
                                ContactNo = rCNo,
                                BirthDate = rBdate,
                            };
                            SendoutInfo soi = new SendoutInfo
                            {
                                SendoutControlNo = SendoutControlNo,
                                KPTNNo = KPTNNo,
                                OperatorID = OperatorID,
                                IsPassword = IsPassword,
                                TransPassword = TransPassword,
                                syscreated = syscreated,
                                Currency = Currency,
                                Principal = Principal,
                                SenderIsSMS = SenderIsSMS,
                                Relation = Relation,
                                Message = Message,
                                StationID = StationID,
                                SourceOfFund = SourceOfFund,
                                IDNo = IDNo,
                                IDType = IDType,
                                ExpiryDate = ExpiryDate,
                                DormantCharge = DormantCharge,
                                ORNo = ORNo,
                                isSameAmount = isSameAmount,
                                IsRemote = IsRemote,
                                RemoteBranch = RemoteBranch,
                                RemoteOperatorID = RemoteOperatorID,
                                BranchCode = bcode,
                                Charge = Charge,
                                ZoneCode = zcode,
                                Purpose = purpose,
                                RemoteZone = remoteZone,
                                vat = vat,
                                preferredcurrency = precurrency,
                                exchangerate = xchangerate,
                                amountpo = amtpo,
                                paytype = paymenttype,
                                bankname = bankname,
                                cardcheck = cardcheckno,
                                cardexp = cardexpdate,
                                trnstype = transtype
                            };
                            kplog.Info(kptn6 + " - Search Success");
                            return new SearchResponse { respcode = 1, message = getRespMessage(1), SenderInfo = si, ReceiverInfo = ri, SendoutInfo = soi };
                        }
                        else
                        {
                            kplog.Error(kptn6 + " - " + getRespMessage(4));
                            dataReader.Close();
                            conn.Close();
                            dbconGlobalkiosk.CloseConnection();
                            return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal(kptn6 + " - " + ex.ToString(), ex);
                conn.Close();
                dbconGlobalkiosk.CloseConnection();
                if (ex.Message.Equals("4"))
                {
                    kplog.Error(kptn6 + " - " + getRespMessage(4));
                    return new SearchResponse { respcode = 4, message = getRespMessage(4), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
                }
                return new SearchResponse { respcode = 0, message = ex.ToString(), SenderInfo = null, ReceiverInfo = null, SendoutInfo = null };
            }
        }
    }

    public PayoutResponse updatecontrol(String stationnum, String branchcode101, String zonecode101, Int32 type, Int32 sr)
    {
        using (MySqlConnection checkcontrol = dbconGlobal.getConnection())
        {
            checkcontrol.Open();
            try
            {
                using (command = checkcontrol.CreateCommand())
                {
                    command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                    command.Parameters.Clear();

                    //string st1 = IsRemote == 1 ? "01" : Station;
                    //string bcode1 = IsRemote == 1 ? RemoteBranch : BranchCode;
                    //Int32 rmotezone = remotezone == 0 ? Convert.ToInt32(ZoneCode) : remotezone;

                    command.Parameters.AddWithValue("st", stationnum);
                    command.Parameters.AddWithValue("bcode", branchcode101);
                    command.Parameters.AddWithValue("series", sr);
                    command.Parameters.AddWithValue("zcode", zonecode101);
                    command.Parameters.AddWithValue("tp", type);
                    command.ExecuteNonQuery();

                    checkcontrol.Close();
                    dbconGlobal.CloseConnection();
                    return new PayoutResponse { respcode = 101, message = "Problem saving transaction. Please close the payout window and try again." };
                }
            }
            catch (Exception ex)
            {
                kplog.Fatal("Error in updating control series: param stationnum=" + stationnum + " | bcode=" + branchcode101 + " | zcode=" + zonecode101 + " | seriesnum=" + sr + " || " + ex.ToString());
                checkcontrol.Close();
                dbconGlobal.CloseConnection();
                return new PayoutResponse { respcode = 0, message = "Problem saving transaction. Please close the payout window and try again.", ErrorDetail = ex.ToString() };
            }
        }
    }

    public PayoutResponse payoutGlobalKIOSK(String Username, String Password, String ControlNo, String KPTNNo, String OperatorID, String Station, int IsRemote, String RemoteBranch, String RemoteOperatorID, String Reason, String SOBranch, String SOControlNo, String SOOperator, String Currency, Double Principal, String SenderID, String ReceiverID, String Relation, String IDType, String IDNo, String ExpiryDate, String SODate, int sysmodifier, String BranchCode, String series, String ZoneCode, Int32 type, Double balance, Double DormantCharge, String senderid, String SenderMLCardNO, String SenderFName, String SenderLName, String SenderMName, String SenderStreet, String SenderProvinceCity, String SenderCountry, String SenderGender, String SenderContactNo, int SenderIsSMS, String SenderBirthdate, String SenderBranchID, String ReceiverMLCardNO, String ReceiverFName, String ReceiverLName, String ReceiverMName, String ReceiverStreet, String ReceiverProvinceCity, String ReceiverCountry, String ReceiverGender, String ReceiverContactNo, String ReceiverBirthdate, String ORNo, Double ServiceCharge, Double version, String stationcode, Int32 remotezone, String RemoteBranchCode, String POBranchName, double vat, int syscreator, string preferredcurrency, double amountpo, double exchangerate)
    {
        try
        {
            if (Station.ToString().Equals("0"))
            {
                kplog.Fatal(getRespMessage(13));
                return new PayoutResponse { respcode = 10, message = getRespMessage(13) };
            }
            if (!authenticate(Username, Password))
            {
                return new PayoutResponse { respcode = 7, message = getRespMessage(7) };
            }

            if (decodeKPTNGlobalKIOSK(0, KPTNNo) == "4" || (!istablevalid(decodeKPTNGlobalKIOSK(0, KPTNNo))))
            {
                kplog.Error(KPTNNo + " - Invalid KPTN number");
                return new PayoutResponse { respcode = 0, message = "Invalid KPTN number" };
            }

            PayoutResponse check = new PayoutResponse();
            check = checkifallowPO(BranchCode, Convert.ToInt32(ZoneCode), KPTNNo, ReceiverFName + " " + ReceiverMName + " " + ReceiverLName, SenderFName + " " + SenderMName + " " + SenderLName, Currency, Convert.ToDecimal(Principal), OperatorID, true);
            if (check.respcode == 3)
                return new PayoutResponse { respcode = 0, message = check.message };

            Int32 sr = ConvertSeries(series);
            dt = getServerDateGlobalKiosk(false);
            kplog.Info("dt: " + dt.ToString("yyyy-MM-dd HH:mm:ss"));

            using (MySqlConnection checkinglang = dbconGlobalkiosk.getConnection())
            {
                checkinglang.Open();
                try
                {
                    using (command = checkinglang.CreateCommand())
                    {
                        String checkiftagasclaimed = "Select kptnno from " + generateTableNameGlobalKiosk(0, null) + " where kptnno=@kptn and isclaimed='1' and (sysmodified is not null or sysmodified!='' or sysmodified='0000-00-00 00:00:00')";
                        command.CommandTimeout = 0;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.CommandText = checkiftagasclaimed;
                        MySqlDataReader iftagisclaimeddr = command.ExecuteReader();
                        if (iftagisclaimeddr.HasRows)
                        {
                            iftagisclaimeddr.Close();
                            return new PayoutResponse { respcode = 0, message = "Transaction already claimed." };
                        }
                        iftagisclaimeddr.Close();

                        String mm = string.Empty;
                        String xmm = string.Empty;
                        MySqlDataReader isclaimeddr;
                        for (int x = 1; x < 12; x++)
                        {
                            mm = Convert.ToString(x);
                            xmm = mm.PadLeft(2, '0');
                            String checkifisclaimed = "Select kptnno,ClaimedDate from kpkiosktransactionsglobal.payout" + xmm + " where kptnno=@kptn";
                            command.CommandTimeout = 0;
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("kptn", KPTNNo);
                            command.CommandText = checkifisclaimed;
                            isclaimeddr = command.ExecuteReader();
                            if (isclaimeddr.HasRows)
                            {
                                isclaimeddr.Read();
                                DateTime cdate = Convert.ToDateTime(isclaimeddr["ClaimedDate"]);
                                isclaimeddr.Close();
                                String checkifisPOcancelled = "select kptnno from kpkiosktransactionsglobal.payout" + xmm + " where oldkptnno=@kptn and ClaimedDate=@cdate ORDER BY cancelleddate DESC limit 1";
                                command.Parameters.Clear();
                                command.Parameters.AddWithValue("cdate", cdate);
                                command.Parameters.AddWithValue("kptn", KPTNNo);
                                command.CommandText = checkifisPOcancelled;
                                MySqlDataReader iscancelleddr = command.ExecuteReader();
                                if (!iscancelleddr.HasRows)
                                {
                                    iscancelleddr.Close();
                                    kplog.Info(KPTNNo + " - Transaction already claimed");
                                    return new PayoutResponse { respcode = 0, message = "Transaction already claimed." };
                                }
                                iscancelleddr.Close();

                            }
                            isclaimeddr.Close();
                        }

                        string checkifcontrolexist = "select controlno from " + generateTableNameGlobalKiosk(1, null) + " where controlno=@controlno";
                        command.CommandTimeout = 0;
                        command.CommandText = checkifcontrolexist;
                        command.Parameters.AddWithValue("controlno", ControlNo);
                        MySqlDataReader controlexistreader = command.ExecuteReader();
                        if (controlexistreader.HasRows)
                        {
                            controlexistreader.Close();
                            string query101 = string.Empty;
                            string branchcode101 = string.Empty;
                            string zonecode101 = string.Empty;
                            string stationnum = string.Empty;
                            if (remotezone == 0)
                                zonecode101 = ZoneCode;
                            else
                                zonecode101 = remotezone.ToString();

                            if (IsRemote == 1)
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameGlobalKiosk(1, null) + " where remotebranch = @branchcode and stationid = @stationid and remotezonecode =@zonecode";
                                branchcode101 = RemoteBranch;
                                stationnum = "01";
                            }
                            else
                            {
                                query101 = "select max(substring(controlno,length(controlno)-5,length(controlno))) as max1 from " + generateTableNameGlobalKiosk(1, null) + " where branchcode = @branchcode and stationid = @stationid and zonecode=@zonecode";
                                branchcode101 = BranchCode;
                                stationnum = Station;
                            }
                            command.CommandText = query101;
                            command.Parameters.Clear();
                            command.Parameters.AddWithValue("branchcode", branchcode101);
                            command.Parameters.AddWithValue("stationid", Station);
                            command.Parameters.AddWithValue("zonecode", zonecode101);

                            MySqlDataReader controlmaxreader = command.ExecuteReader();
                            if (controlmaxreader.Read())
                            {
                                sr = Convert.ToInt32(controlmaxreader["max1"]) + 1;
                                kplog.Info("max series: " + sr);
                            }
                            controlmaxreader.Close();

                            //command.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                            //command.Parameters.Clear();

                            //command.Parameters.AddWithValue("st", stationnum);
                            //command.Parameters.AddWithValue("bcode", branchcode101);
                            //command.Parameters.AddWithValue("series", sr);
                            //command.Parameters.AddWithValue("zcode", zonecode101);
                            //command.Parameters.AddWithValue("tp", type);
                            //int abc101 = command.ExecuteNonQuery();

                            checkinglang.Close();
                            dbconGlobalkiosk.CloseConnection();
                            kplog.Error(KPTNNo + " - " + ControlNo + " - Problem saving transaction. Please close the sendout window and try again.");
                            return (PayoutResponse)updatecontrol(stationnum, branchcode101, zonecode101, type, sr);
                            //return new PayoutResponse { respcode = 101, message = "Problem saving transaction. Please close the sendout window and try again." };
                        }
                    }
                }
                catch (Exception ex)
                {
                    kplog.Fatal(KPTNNo + " - " + ex.ToString());
                    checkinglang.Close();
                    dbconGlobalkiosk.CloseConnection();
                    return new PayoutResponse { respcode = 0, message = "Problem saving transaction. Please close the payout window and try again.", ErrorDetail = ex.ToString() };
                }
                checkinglang.Close();
                dbconGlobalkiosk.CloseConnection();
            }

            using (MySqlConnection conn = dbconGlobalkiosk.getConnection())
            {
                try
                {

                    conn.Open();
                    trans = conn.BeginTransaction(IsolationLevel.ReadCommitted);
                    using (command = conn.CreateCommand())
                    {
                        command.CommandText = "SET autocommit = 0;";
                        command.ExecuteNonQuery();
                        command.Transaction = trans;
                        String sBdate = (SenderBirthdate == String.Empty) ? null : Convert.ToDateTime(SenderBirthdate).ToString("yyyy-MM-dd");
                        String rBdate = (ReceiverBirthdate == String.Empty) ? null : Convert.ToDateTime(ReceiverBirthdate).ToString("yyyy-MM-dd");
                        String xPiry = (ExpiryDate == String.Empty) ? null : Convert.ToDateTime(ExpiryDate).ToString("yyyy-MM-dd");
                        String month = dt.ToString("MM");
                        String tblorig = "payout" + dt.ToString("MM") + dt.ToString("dd");
                        String insert = "Insert into " + generateTableNameGlobalKiosk(1, null) + " (ControlNo, KPTNNo, OperatorID, StationID, IsRemote, RemoteBranch, RemoteOperatorID, Reason, SOBranch, SOControlNo, SOOperator,  Currency, Principal, Relation, IDType, IDNo, ExpiryDate, ClaimedDate, SODate, syscreated, BranchCode, ZoneCode, SenderMLCardNO, SenderFName, SenderLName, SenderMName, SenderName, SenderStreet, SenderProvinceCity, SenderCountry, SenderGender, SenderContactNo, SenderIsSMS, SenderBirthdate, SenderBranchID, ReceiverFName, ReceiverLName, ReceiverMName, ReceiverName, ReceiverStreet, ReceiverProvinceCity, ReceiverCountry, ReceiverGender, ReceiverContactNo, ReceiverBirthdate, SOORNo, ServiceCharge, RemoteZoneCode,syscreator,preferredpo,amountpo,exchangerate,transtype) values (@ControlNo, @KPTNNo, @OperatorID, @StationID, @IsRemote, @RemoteBranch, @RemoteOperatorID, @Reason, @SOBranch, @SOControlNo, @SOOperator, @Currency, @Principal, @Relation, @IDType, @IDNo, @ExpiryDate, @claimeddateP, @SODate, @syscreated, @BranchCode, @ZoneCode, @SenderMLCardNO, @SenderFName, @SenderLName, @SenderMName, @SenderName, @SenderStreet, @SenderProvinceCity, @SenderCountry, @SenderGender, @SenderContactNo, @SenderIsSMS, @SenderBirthdate, @SenderBranchID, @ReceiverFName, @ReceiverLName, @ReceiverMName, @ReceiverName, @ReceiverStreet, @ReceiverProvinceCity, @ReceiverCountry, @ReceiverGender, @ReceiverContactNo, @ReceiverBirthdate, @SOORNo, @ServiceCharge, @remotezone, @syscreator,@pocurrency1,@poamount1,@exchangerate1,@transtype)";
                        command.CommandText = insert;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("ControlNo", ControlNo);
                        command.Parameters.AddWithValue("KPTNNo", KPTNNo);
                        command.Parameters.AddWithValue("OperatorID", OperatorID);
                        command.Parameters.AddWithValue("StationID", Station);
                        command.Parameters.AddWithValue("IsRemote", IsRemote);
                        command.Parameters.AddWithValue("RemoteBranch", RemoteBranch);
                        command.Parameters.AddWithValue("RemoteOperatorID", RemoteOperatorID);
                        command.Parameters.AddWithValue("Reason", Reason);
                        command.Parameters.AddWithValue("SOBranch", SOBranch);
                        command.Parameters.AddWithValue("SOControlNo", SOControlNo);
                        command.Parameters.AddWithValue("SOOperator", SOOperator);
                        command.Parameters.AddWithValue("Currency", Currency);
                        command.Parameters.AddWithValue("Principal", Principal);
                        command.Parameters.AddWithValue("Relation", Relation);
                        command.Parameters.AddWithValue("IDType", IDType);
                        command.Parameters.AddWithValue("IDNo", IDNo);
                        command.Parameters.AddWithValue("ExpiryDate", (xPiry == String.Empty) ? null : xPiry);
                        command.Parameters.AddWithValue("SODate", Convert.ToDateTime(SODate).ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreator", syscreator);
                        command.Parameters.AddWithValue("BranchCode", BranchCode);
                        command.Parameters.AddWithValue("ZoneCode", ZoneCode);
                        command.Parameters.AddWithValue("Balance", balance);
                        command.Parameters.AddWithValue("DormantCharge", DormantCharge);
                        command.Parameters.AddWithValue("SenderMLCardNO", SenderMLCardNO);
                        command.Parameters.AddWithValue("SenderFName", SenderFName);
                        command.Parameters.AddWithValue("SenderLName", SenderLName);
                        command.Parameters.AddWithValue("SenderMName", SenderMName);
                        command.Parameters.AddWithValue("SenderName", SenderLName + ", " + SenderFName + " " + SenderMName);
                        command.Parameters.AddWithValue("SenderStreet", SenderStreet);
                        command.Parameters.AddWithValue("SenderProvinceCity", SenderProvinceCity);
                        command.Parameters.AddWithValue("SenderCountry", SenderCountry);
                        command.Parameters.AddWithValue("SenderGender", SenderGender);
                        command.Parameters.AddWithValue("SenderContactNo", SenderContactNo);
                        command.Parameters.AddWithValue("SenderIsSMS", SenderIsSMS);
                        command.Parameters.AddWithValue("SenderBirthdate", sBdate);
                        command.Parameters.AddWithValue("SenderBranchID", SenderBranchID);
                        command.Parameters.AddWithValue("ReceiverFName", ReceiverFName);
                        command.Parameters.AddWithValue("ReceiverLName", ReceiverLName);
                        command.Parameters.AddWithValue("ReceiverMName", ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverName", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        command.Parameters.AddWithValue("ReceiverStreet", ReceiverStreet);
                        command.Parameters.AddWithValue("ReceiverProvinceCity", ReceiverProvinceCity);
                        command.Parameters.AddWithValue("ReceiverCountry", ReceiverCountry);
                        command.Parameters.AddWithValue("ReceiverGender", ReceiverGender);
                        command.Parameters.AddWithValue("ReceiverContactNo", ReceiverContactNo);
                        command.Parameters.AddWithValue("ReceiverBirthdate", rBdate);
                        command.Parameters.AddWithValue("SOORNo", ORNo);
                        command.Parameters.AddWithValue("ServiceCharge", ServiceCharge);
                        command.Parameters.AddWithValue("remotezone", remotezone);
                        command.Parameters.AddWithValue("vat", vat);
                        command.Parameters.AddWithValue("pocurrency1", preferredcurrency);
                        command.Parameters.AddWithValue("poamount1", amountpo);
                        command.Parameters.AddWithValue("exchangerate1", exchangerate);
                        command.Parameters.AddWithValue("transtype", "INTERNATIONAL");
                        command.Parameters.AddWithValue("claimeddateP", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.ExecuteNonQuery();


                        command.CommandText = "update " + decodeKPTNGlobalKIOSK(0, KPTNNo) + " set IsClaimed = 1, sysmodified = @modified, sysmodifier = @modifier where KPTNNo = @kptn";
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("modified", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("modifier", sysmodifier);
                        command.Parameters.AddWithValue("kptn", KPTNNo);
                        command.ExecuteNonQuery();

                        using (MySqlConnection conng = dbconGlobal.getConnection())
                        {
                            conng.Open();
                            using (commandg = conng.CreateCommand())
                            {

                                if (IsRemote == 1)
                                {
                                    commandg.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                                    commandg.Parameters.Clear();
                                    commandg.Parameters.AddWithValue("st", "01");
                                    commandg.Parameters.AddWithValue("bcode", RemoteBranch);
                                    commandg.Parameters.AddWithValue("series", sr + 1);//nseries
                                    commandg.Parameters.AddWithValue("zcode", remotezone);
                                    commandg.Parameters.AddWithValue("tp", type);
                                    commandg.ExecuteNonQuery();
                                }
                                else
                                {
                                    commandg.CommandText = "update kpformsglobal.control set nseries = @series where bcode = @bcode and station = @st and zcode = @zcode and type = @tp";
                                    commandg.Parameters.Clear();
                                    commandg.Parameters.AddWithValue("st", Station);
                                    commandg.Parameters.AddWithValue("bcode", BranchCode);
                                    commandg.Parameters.AddWithValue("series", sr + 1);
                                    commandg.Parameters.AddWithValue("zcode", ZoneCode);
                                    commandg.Parameters.AddWithValue("tp", type);
                                    commandg.ExecuteNonQuery();
                                }

                            }
                            conng.Close();
                        }

                        String insertpayout = "INSERT INTO kpkiosktransactionsglobal.payout" + month + " (controlno,kptnno,claimeddate," +
                       "operatorid,stationid,isremote,remotebranch,remoteoperatorid,reason,sobranch,socontrolno,sooperator," +
                       "sodate,soorno,syscreated,syscreator,currency,principal,relation,idtype,idno,expirydate,branchcode," +
                       "zonecode,sendermlcardno,senderfname,senderlname,sendermname,sendername,senderstreet," +
                       "senderprovincecity,sendercountry,sendergender,sendercontactno,senderissms,senderbirthdate," +
                       "senderbranchid,receiverfname,receiverlname,receivermname,receivername,receiverstreet," +
                       "receiverprovincecity,receivercountry,receivergender,receivercontactno,receiverbirthdate," +
                       "balance,dormantcharge,servicecharge,vat,remotezonecode,tableoriginated,`year`,pocurrency,poamount,exchangerate,transtype) " +
                       "values (@controlnoP,@kptnnoP,@claimeddateP," +
                       "@operatoridP,@stationidP,@isremoteP,@remotebranchP,@remoteoperatoridP,@reasonP,@sobranchP,@socontrolnoP,@sooperatorP," +
                       "@sodateP,@soornoP,@syscreatedP,@syscreatorP,@currencyP,@principalP,@relationP,@idtypeP,@idnoP,@expirydateP,@branchcodeP," +
                       "@zonecodeP,@sendermlcardnoP,@senderfnameP,@senderlnameP,@sendermnameP,@sendernameP,@senderstreetP," +
                       "@senderprovincecityP,@sendercountryP,@sendergenderP,@sendercontactnoP,@senderissmsP,@senderbirthdateP," +
                       "@senderbranchidP,@receiverfnameP,@receiverlnameP,@receivermnameP,@receivernameP,@receiverstreetP," +
                       "@receiverprovincecityP,@receivercountryP,@receivergenderP,@receivercontactnoP,@receiverbirthdateP," +
                       "@balanceP,@dormantchargeP,@servicechargeP,@vatP,@remotezonecodeP,@tableoriginatedP,@yearP,@pocurrency,@poamount,@exchangerate,@transtype)";
                        command.CommandText = insertpayout;
                        command.Parameters.Clear();
                        command.Parameters.AddWithValue("controlnoP", ControlNo);
                        command.Parameters.AddWithValue("kptnnoP", KPTNNo);
                        command.Parameters.AddWithValue("claimeddateP", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("operatoridP", OperatorID);
                        command.Parameters.AddWithValue("stationidP", Station);
                        command.Parameters.AddWithValue("isremoteP", IsRemote);
                        command.Parameters.AddWithValue("remotebranchP", RemoteBranch);
                        command.Parameters.AddWithValue("remoteoperatoridP", RemoteOperatorID);
                        command.Parameters.AddWithValue("reasonP", Reason);
                        command.Parameters.AddWithValue("sobranchP", SOBranch);
                        command.Parameters.AddWithValue("socontrolnoP", SOControlNo);
                        command.Parameters.AddWithValue("sooperatorP", SOOperator);
                        command.Parameters.AddWithValue("sodateP", Convert.ToDateTime(SODate).ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("soornoP", ORNo);
                        command.Parameters.AddWithValue("syscreatedP", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreatorP", syscreator);
                        command.Parameters.AddWithValue("currencyP", Currency);
                        command.Parameters.AddWithValue("principalP", Principal);
                        command.Parameters.AddWithValue("relationP", Relation);
                        command.Parameters.AddWithValue("idtypeP", IDType);
                        command.Parameters.AddWithValue("idnoP", IDNo);
                        command.Parameters.AddWithValue("expirydateP", xPiry);
                        command.Parameters.AddWithValue("branchcodeP", BranchCode);
                        command.Parameters.AddWithValue("zonecodeP", ZoneCode);
                        command.Parameters.AddWithValue("sendermlcardnoP", SenderMLCardNO);
                        command.Parameters.AddWithValue("senderfnameP", SenderFName);
                        command.Parameters.AddWithValue("senderlnameP", SenderLName);
                        command.Parameters.AddWithValue("sendermnameP", SenderMName);
                        command.Parameters.AddWithValue("sendernameP", SenderLName + ", " + SenderFName + " " + SenderMName);
                        command.Parameters.AddWithValue("senderstreetP", SenderStreet);
                        command.Parameters.AddWithValue("senderprovincecityP", SenderProvinceCity);
                        command.Parameters.AddWithValue("sendercountryP", SenderCountry);
                        command.Parameters.AddWithValue("sendergenderP", SenderGender);
                        command.Parameters.AddWithValue("sendercontactnoP", SenderContactNo);
                        command.Parameters.AddWithValue("senderissmsP", SenderIsSMS);
                        command.Parameters.AddWithValue("senderbirthdateP", sBdate);
                        command.Parameters.AddWithValue("senderbranchidP", SenderBranchID);
                        command.Parameters.AddWithValue("receiverfnameP", ReceiverFName);
                        command.Parameters.AddWithValue("receiverlnameP", ReceiverLName);
                        command.Parameters.AddWithValue("receivermnameP", ReceiverMName);
                        command.Parameters.AddWithValue("receivernameP", ReceiverLName + ", " + ReceiverFName + " " + ReceiverMName);
                        command.Parameters.AddWithValue("receiverstreetP", ReceiverStreet);
                        command.Parameters.AddWithValue("receiverprovincecityP", ReceiverProvinceCity);
                        command.Parameters.AddWithValue("receivercountryP", ReceiverCountry);
                        command.Parameters.AddWithValue("receivergenderP", ReceiverGender);
                        command.Parameters.AddWithValue("receivercontactnoP", ReceiverContactNo);
                        command.Parameters.AddWithValue("receiverbirthdateP", rBdate);
                        command.Parameters.AddWithValue("balanceP", balance);
                        command.Parameters.AddWithValue("dormantchargeP", DormantCharge);
                        command.Parameters.AddWithValue("servicechargeP", ServiceCharge);
                        command.Parameters.AddWithValue("vatP", vat);
                        command.Parameters.AddWithValue("remotezonecodeP", remotezone);
                        command.Parameters.AddWithValue("tableoriginatedP", tblorig);
                        command.Parameters.AddWithValue("yearP", dt.ToString("yyyy"));
                        command.Parameters.AddWithValue("pocurrency", preferredcurrency);
                        command.Parameters.AddWithValue("poamount", amountpo);
                        command.Parameters.AddWithValue("exchangerate", exchangerate);
                        command.Parameters.AddWithValue("transtype", "INTERNATIONAL");
                        command.ExecuteNonQuery();

                        String custS = getcustomertable(SenderLName);
                        command.Parameters.Clear();
                        command.CommandText = "kpadminlogsglobal.save_customers";
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.AddWithValue("tblcustomer", custS);
                        command.Parameters.AddWithValue("kptnno", KPTNNo);
                        command.Parameters.AddWithValue("controlno", ControlNo);
                        command.Parameters.AddWithValue("transdate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("fname", SenderFName);
                        command.Parameters.AddWithValue("lname", SenderLName);
                        command.Parameters.AddWithValue("mname", SenderMName);
                        command.Parameters.AddWithValue("sobranch", SOBranch);
                        command.Parameters.AddWithValue("pobranch", POBranchName);
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("remotebranch", RemoteBranch);
                        command.Parameters.AddWithValue("cancelledbranch", String.Empty);
                        command.Parameters.AddWithValue("status", 1);
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreator", syscreator);
                        command.Parameters.AddWithValue("customertype", "S");
                        command.Parameters.AddWithValue("amount", Principal);
                        command.ExecuteNonQuery();

                        String custR = getcustomertable(ReceiverLName);
                        command.Parameters.Clear();
                        command.CommandText = "kpadminlogsglobal.save_customers";
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.AddWithValue("tblcustomer", custR);
                        command.Parameters.AddWithValue("kptnno", KPTNNo);
                        command.Parameters.AddWithValue("controlno", ControlNo);
                        command.Parameters.AddWithValue("transdate", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("fname", ReceiverFName);
                        command.Parameters.AddWithValue("lname", ReceiverLName);
                        command.Parameters.AddWithValue("mname", ReceiverMName);
                        command.Parameters.AddWithValue("sobranch", SOBranch);
                        command.Parameters.AddWithValue("pobranch", POBranchName);
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("remotebranch", RemoteBranch);
                        command.Parameters.AddWithValue("cancelledbranch", String.Empty);
                        command.Parameters.AddWithValue("status", 1);
                        command.Parameters.AddWithValue("syscreated", dt.ToString("yyyy-MM-dd HH:mm:ss"));
                        command.Parameters.AddWithValue("syscreator", syscreator);
                        command.Parameters.AddWithValue("customertype", "R");
                        command.Parameters.AddWithValue("amount", Principal);
                        command.ExecuteNonQuery();


                        command.Transaction = trans;
                        command.Parameters.Clear();
                        command.CommandText = "kpadminlogsglobal.savelog53";
                        command.CommandType = CommandType.StoredProcedure;

                        command.Parameters.AddWithValue("kptnno", KPTNNo);
                        command.Parameters.AddWithValue("action", "PAYOUT");
                        command.Parameters.AddWithValue("isremote", IsRemote);
                        command.Parameters.AddWithValue("txndate", dt);
                        command.Parameters.AddWithValue("stationcode", stationcode);
                        command.Parameters.AddWithValue("stationno", Station);
                        command.Parameters.AddWithValue("zonecode", ZoneCode);
                        command.Parameters.AddWithValue("branchcode", BranchCode);
                        command.Parameters.AddWithValue("operatorid", OperatorID);
                        command.Parameters.AddWithValue("cancelledreason", DBNull.Value);
                        command.Parameters.AddWithValue("remotereason", Reason);
                        command.Parameters.AddWithValue("remotebranch", (RemoteBranch.Equals(DBNull.Value)) ? null : RemoteBranch);
                        command.Parameters.AddWithValue("remoteoperator", (RemoteOperatorID.Equals(DBNull.Value)) ? null : RemoteOperatorID);
                        command.Parameters.AddWithValue("oldkptnno", DBNull.Value);
                        command.Parameters.AddWithValue("remotezonecode", remotezone);
                        command.Parameters.AddWithValue("type", "N");
                        command.ExecuteNonQuery();

                        trans.Commit();
                        conn.Close();
                        kplog.Info(KPTNNo + " - Successfully Payout");
                        return new PayoutResponse { respcode = 1, message = getRespMessage(1), DateClaimed = dt };
                    }
                }
                catch (MySqlException ex)
                {
                    kplog.Fatal(KPTNNo + " - " + ex.ToString());
                    Int32 respcode = 0;
                    if (ex.Number == 1062)
                    {
                        respcode = 3;
                        kplog.Fatal(KPTNNo + " - " + getRespMessage(3));
                    }
                    trans.Rollback();
                    dbconGlobalkiosk.CloseConnection();
                    return new PayoutResponse { respcode = respcode, message = getRespMessage(respcode) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
                }
            }
        }
        catch (Exception ex)
        {
            kplog.Fatal(KPTNNo + " - " + ex.ToString());
            dbconGlobalkiosk.CloseConnection();
            return new PayoutResponse { respcode = 0, message = getRespMessage(0) + " " + ex.Message, ErrorDetail = ex.ToString(), DateClaimed = DateTime.Now };
        }
    }
}
